
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  00007246  000072da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001f6  008001f6  00007470  2**0
                  ALLOC
  3 .stab         00005808  00000000  00000000  00007470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003059  00000000  00000000  0000cc78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000fcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000234  00000000  00000000  0000feb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002791  00000000  00000000  000100e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015bc  00000000  00000000  00012876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013e2  00000000  00000000  00013e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00015214  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000342  00000000  00000000  00015414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b12  00000000  00000000  00015756  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f2 e7       	ldi	r31, 0x72	; 114
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <main>
      8a:	0c 94 21 39 	jmp	0x7242	; 0x7242 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
     1bc:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <_fpadd_parts>:
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 ea 38 	jmp	0x71d4	; 0x71d4 <__prologue_saves__>
     1f4:	dc 01       	movw	r26, r24
     1f6:	2b 01       	movw	r4, r22
     1f8:	fa 01       	movw	r30, r20
     1fa:	9c 91       	ld	r25, X
     1fc:	92 30       	cpi	r25, 0x02	; 2
     1fe:	08 f4       	brcc	.+2      	; 0x202 <_fpadd_parts+0x1a>
     200:	39 c1       	rjmp	.+626    	; 0x474 <_fpadd_parts+0x28c>
     202:	eb 01       	movw	r28, r22
     204:	88 81       	ld	r24, Y
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	08 f4       	brcc	.+2      	; 0x20c <_fpadd_parts+0x24>
     20a:	33 c1       	rjmp	.+614    	; 0x472 <_fpadd_parts+0x28a>
     20c:	94 30       	cpi	r25, 0x04	; 4
     20e:	69 f4       	brne	.+26     	; 0x22a <_fpadd_parts+0x42>
     210:	84 30       	cpi	r24, 0x04	; 4
     212:	09 f0       	breq	.+2      	; 0x216 <_fpadd_parts+0x2e>
     214:	2f c1       	rjmp	.+606    	; 0x474 <_fpadd_parts+0x28c>
     216:	11 96       	adiw	r26, 0x01	; 1
     218:	9c 91       	ld	r25, X
     21a:	11 97       	sbiw	r26, 0x01	; 1
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	98 17       	cp	r25, r24
     220:	09 f4       	brne	.+2      	; 0x224 <_fpadd_parts+0x3c>
     222:	28 c1       	rjmp	.+592    	; 0x474 <_fpadd_parts+0x28c>
     224:	ad e9       	ldi	r26, 0x9D	; 157
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	25 c1       	rjmp	.+586    	; 0x474 <_fpadd_parts+0x28c>
     22a:	84 30       	cpi	r24, 0x04	; 4
     22c:	09 f4       	brne	.+2      	; 0x230 <_fpadd_parts+0x48>
     22e:	21 c1       	rjmp	.+578    	; 0x472 <_fpadd_parts+0x28a>
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	a9 f4       	brne	.+42     	; 0x25e <_fpadd_parts+0x76>
     234:	92 30       	cpi	r25, 0x02	; 2
     236:	09 f0       	breq	.+2      	; 0x23a <_fpadd_parts+0x52>
     238:	1d c1       	rjmp	.+570    	; 0x474 <_fpadd_parts+0x28c>
     23a:	9a 01       	movw	r18, r20
     23c:	ad 01       	movw	r20, r26
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	ea 01       	movw	r28, r20
     242:	09 90       	ld	r0, Y+
     244:	ae 01       	movw	r20, r28
     246:	e9 01       	movw	r28, r18
     248:	09 92       	st	Y+, r0
     24a:	9e 01       	movw	r18, r28
     24c:	81 50       	subi	r24, 0x01	; 1
     24e:	c1 f7       	brne	.-16     	; 0x240 <_fpadd_parts+0x58>
     250:	e2 01       	movw	r28, r4
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	11 96       	adiw	r26, 0x01	; 1
     256:	9c 91       	ld	r25, X
     258:	89 23       	and	r24, r25
     25a:	81 83       	std	Z+1, r24	; 0x01
     25c:	08 c1       	rjmp	.+528    	; 0x46e <_fpadd_parts+0x286>
     25e:	92 30       	cpi	r25, 0x02	; 2
     260:	09 f4       	brne	.+2      	; 0x264 <_fpadd_parts+0x7c>
     262:	07 c1       	rjmp	.+526    	; 0x472 <_fpadd_parts+0x28a>
     264:	12 96       	adiw	r26, 0x02	; 2
     266:	2d 90       	ld	r2, X+
     268:	3c 90       	ld	r3, X
     26a:	13 97       	sbiw	r26, 0x03	; 3
     26c:	eb 01       	movw	r28, r22
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	9b 81       	ldd	r25, Y+3	; 0x03
     272:	14 96       	adiw	r26, 0x04	; 4
     274:	ad 90       	ld	r10, X+
     276:	bd 90       	ld	r11, X+
     278:	cd 90       	ld	r12, X+
     27a:	dc 90       	ld	r13, X
     27c:	17 97       	sbiw	r26, 0x07	; 7
     27e:	ec 80       	ldd	r14, Y+4	; 0x04
     280:	fd 80       	ldd	r15, Y+5	; 0x05
     282:	0e 81       	ldd	r16, Y+6	; 0x06
     284:	1f 81       	ldd	r17, Y+7	; 0x07
     286:	91 01       	movw	r18, r2
     288:	28 1b       	sub	r18, r24
     28a:	39 0b       	sbc	r19, r25
     28c:	b9 01       	movw	r22, r18
     28e:	37 ff       	sbrs	r19, 7
     290:	04 c0       	rjmp	.+8      	; 0x29a <_fpadd_parts+0xb2>
     292:	66 27       	eor	r22, r22
     294:	77 27       	eor	r23, r23
     296:	62 1b       	sub	r22, r18
     298:	73 0b       	sbc	r23, r19
     29a:	60 32       	cpi	r22, 0x20	; 32
     29c:	71 05       	cpc	r23, r1
     29e:	0c f0       	brlt	.+2      	; 0x2a2 <_fpadd_parts+0xba>
     2a0:	61 c0       	rjmp	.+194    	; 0x364 <_fpadd_parts+0x17c>
     2a2:	12 16       	cp	r1, r18
     2a4:	13 06       	cpc	r1, r19
     2a6:	6c f5       	brge	.+90     	; 0x302 <_fpadd_parts+0x11a>
     2a8:	37 01       	movw	r6, r14
     2aa:	48 01       	movw	r8, r16
     2ac:	06 2e       	mov	r0, r22
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_fpadd_parts+0xd0>
     2b0:	96 94       	lsr	r9
     2b2:	87 94       	ror	r8
     2b4:	77 94       	ror	r7
     2b6:	67 94       	ror	r6
     2b8:	0a 94       	dec	r0
     2ba:	d2 f7       	brpl	.-12     	; 0x2b0 <_fpadd_parts+0xc8>
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <_fpadd_parts+0xe6>
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	44 1f       	adc	r20, r20
     2cc:	55 1f       	adc	r21, r21
     2ce:	6a 95       	dec	r22
     2d0:	d2 f7       	brpl	.-12     	; 0x2c6 <_fpadd_parts+0xde>
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	30 40       	sbci	r19, 0x00	; 0
     2d6:	40 40       	sbci	r20, 0x00	; 0
     2d8:	50 40       	sbci	r21, 0x00	; 0
     2da:	2e 21       	and	r18, r14
     2dc:	3f 21       	and	r19, r15
     2de:	40 23       	and	r20, r16
     2e0:	51 23       	and	r21, r17
     2e2:	21 15       	cp	r18, r1
     2e4:	31 05       	cpc	r19, r1
     2e6:	41 05       	cpc	r20, r1
     2e8:	51 05       	cpc	r21, r1
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <_fpadd_parts+0x10c>
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	79 01       	movw	r14, r18
     2f6:	8a 01       	movw	r16, r20
     2f8:	e6 28       	or	r14, r6
     2fa:	f7 28       	or	r15, r7
     2fc:	08 29       	or	r16, r8
     2fe:	19 29       	or	r17, r9
     300:	3c c0       	rjmp	.+120    	; 0x37a <_fpadd_parts+0x192>
     302:	23 2b       	or	r18, r19
     304:	d1 f1       	breq	.+116    	; 0x37a <_fpadd_parts+0x192>
     306:	26 0e       	add	r2, r22
     308:	37 1e       	adc	r3, r23
     30a:	35 01       	movw	r6, r10
     30c:	46 01       	movw	r8, r12
     30e:	06 2e       	mov	r0, r22
     310:	04 c0       	rjmp	.+8      	; 0x31a <_fpadd_parts+0x132>
     312:	96 94       	lsr	r9
     314:	87 94       	ror	r8
     316:	77 94       	ror	r7
     318:	67 94       	ror	r6
     31a:	0a 94       	dec	r0
     31c:	d2 f7       	brpl	.-12     	; 0x312 <_fpadd_parts+0x12a>
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	04 c0       	rjmp	.+8      	; 0x330 <_fpadd_parts+0x148>
     328:	22 0f       	add	r18, r18
     32a:	33 1f       	adc	r19, r19
     32c:	44 1f       	adc	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	d2 f7       	brpl	.-12     	; 0x328 <_fpadd_parts+0x140>
     334:	21 50       	subi	r18, 0x01	; 1
     336:	30 40       	sbci	r19, 0x00	; 0
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	50 40       	sbci	r21, 0x00	; 0
     33c:	2a 21       	and	r18, r10
     33e:	3b 21       	and	r19, r11
     340:	4c 21       	and	r20, r12
     342:	5d 21       	and	r21, r13
     344:	21 15       	cp	r18, r1
     346:	31 05       	cpc	r19, r1
     348:	41 05       	cpc	r20, r1
     34a:	51 05       	cpc	r21, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <_fpadd_parts+0x16e>
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	59 01       	movw	r10, r18
     358:	6a 01       	movw	r12, r20
     35a:	a6 28       	or	r10, r6
     35c:	b7 28       	or	r11, r7
     35e:	c8 28       	or	r12, r8
     360:	d9 28       	or	r13, r9
     362:	0b c0       	rjmp	.+22     	; 0x37a <_fpadd_parts+0x192>
     364:	82 15       	cp	r24, r2
     366:	93 05       	cpc	r25, r3
     368:	2c f0       	brlt	.+10     	; 0x374 <_fpadd_parts+0x18c>
     36a:	1c 01       	movw	r2, r24
     36c:	aa 24       	eor	r10, r10
     36e:	bb 24       	eor	r11, r11
     370:	65 01       	movw	r12, r10
     372:	03 c0       	rjmp	.+6      	; 0x37a <_fpadd_parts+0x192>
     374:	ee 24       	eor	r14, r14
     376:	ff 24       	eor	r15, r15
     378:	87 01       	movw	r16, r14
     37a:	11 96       	adiw	r26, 0x01	; 1
     37c:	9c 91       	ld	r25, X
     37e:	d2 01       	movw	r26, r4
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	8c 91       	ld	r24, X
     384:	98 17       	cp	r25, r24
     386:	09 f4       	brne	.+2      	; 0x38a <_fpadd_parts+0x1a2>
     388:	45 c0       	rjmp	.+138    	; 0x414 <_fpadd_parts+0x22c>
     38a:	99 23       	and	r25, r25
     38c:	39 f0       	breq	.+14     	; 0x39c <_fpadd_parts+0x1b4>
     38e:	a8 01       	movw	r20, r16
     390:	97 01       	movw	r18, r14
     392:	2a 19       	sub	r18, r10
     394:	3b 09       	sbc	r19, r11
     396:	4c 09       	sbc	r20, r12
     398:	5d 09       	sbc	r21, r13
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_fpadd_parts+0x1c0>
     39c:	a6 01       	movw	r20, r12
     39e:	95 01       	movw	r18, r10
     3a0:	2e 19       	sub	r18, r14
     3a2:	3f 09       	sbc	r19, r15
     3a4:	40 0b       	sbc	r20, r16
     3a6:	51 0b       	sbc	r21, r17
     3a8:	57 fd       	sbrc	r21, 7
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <_fpadd_parts+0x1d4>
     3ac:	11 82       	std	Z+1, r1	; 0x01
     3ae:	33 82       	std	Z+3, r3	; 0x03
     3b0:	22 82       	std	Z+2, r2	; 0x02
     3b2:	24 83       	std	Z+4, r18	; 0x04
     3b4:	35 83       	std	Z+5, r19	; 0x05
     3b6:	46 83       	std	Z+6, r20	; 0x06
     3b8:	57 83       	std	Z+7, r21	; 0x07
     3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <_fpadd_parts+0x20e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	81 83       	std	Z+1, r24	; 0x01
     3c0:	33 82       	std	Z+3, r3	; 0x03
     3c2:	22 82       	std	Z+2, r2	; 0x02
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	dc 01       	movw	r26, r24
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	a4 0b       	sbc	r26, r20
     3d0:	b5 0b       	sbc	r27, r21
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	95 83       	std	Z+5, r25	; 0x05
     3d6:	a6 83       	std	Z+6, r26	; 0x06
     3d8:	b7 83       	std	Z+7, r27	; 0x07
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <_fpadd_parts+0x20e>
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	44 1f       	adc	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	24 83       	std	Z+4, r18	; 0x04
     3e6:	35 83       	std	Z+5, r19	; 0x05
     3e8:	46 83       	std	Z+6, r20	; 0x06
     3ea:	57 83       	std	Z+7, r21	; 0x07
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	93 83       	std	Z+3, r25	; 0x03
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	35 81       	ldd	r19, Z+5	; 0x05
     3fa:	46 81       	ldd	r20, Z+6	; 0x06
     3fc:	57 81       	ldd	r21, Z+7	; 0x07
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	a1 09       	sbc	r26, r1
     406:	b1 09       	sbc	r27, r1
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	9f 4f       	sbci	r25, 0xFF	; 255
     40c:	af 4f       	sbci	r26, 0xFF	; 255
     40e:	bf 43       	sbci	r27, 0x3F	; 63
     410:	28 f3       	brcs	.-54     	; 0x3dc <_fpadd_parts+0x1f4>
     412:	0b c0       	rjmp	.+22     	; 0x42a <_fpadd_parts+0x242>
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	33 82       	std	Z+3, r3	; 0x03
     418:	22 82       	std	Z+2, r2	; 0x02
     41a:	ea 0c       	add	r14, r10
     41c:	fb 1c       	adc	r15, r11
     41e:	0c 1d       	adc	r16, r12
     420:	1d 1d       	adc	r17, r13
     422:	e4 82       	std	Z+4, r14	; 0x04
     424:	f5 82       	std	Z+5, r15	; 0x05
     426:	06 83       	std	Z+6, r16	; 0x06
     428:	17 83       	std	Z+7, r17	; 0x07
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	80 83       	st	Z, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	46 81       	ldd	r20, Z+6	; 0x06
     434:	57 81       	ldd	r21, Z+7	; 0x07
     436:	57 ff       	sbrs	r21, 7
     438:	1a c0       	rjmp	.+52     	; 0x46e <_fpadd_parts+0x286>
     43a:	c9 01       	movw	r24, r18
     43c:	aa 27       	eor	r26, r26
     43e:	97 fd       	sbrc	r25, 7
     440:	a0 95       	com	r26
     442:	ba 2f       	mov	r27, r26
     444:	81 70       	andi	r24, 0x01	; 1
     446:	90 70       	andi	r25, 0x00	; 0
     448:	a0 70       	andi	r26, 0x00	; 0
     44a:	b0 70       	andi	r27, 0x00	; 0
     44c:	56 95       	lsr	r21
     44e:	47 95       	ror	r20
     450:	37 95       	ror	r19
     452:	27 95       	ror	r18
     454:	82 2b       	or	r24, r18
     456:	93 2b       	or	r25, r19
     458:	a4 2b       	or	r26, r20
     45a:	b5 2b       	or	r27, r21
     45c:	84 83       	std	Z+4, r24	; 0x04
     45e:	95 83       	std	Z+5, r25	; 0x05
     460:	a6 83       	std	Z+6, r26	; 0x06
     462:	b7 83       	std	Z+7, r27	; 0x07
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	93 81       	ldd	r25, Z+3	; 0x03
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	93 83       	std	Z+3, r25	; 0x03
     46c:	82 83       	std	Z+2, r24	; 0x02
     46e:	df 01       	movw	r26, r30
     470:	01 c0       	rjmp	.+2      	; 0x474 <_fpadd_parts+0x28c>
     472:	d2 01       	movw	r26, r4
     474:	cd 01       	movw	r24, r26
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	e2 e1       	ldi	r30, 0x12	; 18
     47c:	0c 94 06 39 	jmp	0x720c	; 0x720c <__epilogue_restores__>

00000480 <__subsf3>:
     480:	a0 e2       	ldi	r26, 0x20	; 32
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e6 e4       	ldi	r30, 0x46	; 70
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	0c 94 f6 38 	jmp	0x71ec	; 0x71ec <__prologue_saves__+0x18>
     48c:	69 83       	std	Y+1, r22	; 0x01
     48e:	7a 83       	std	Y+2, r23	; 0x02
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	2d 83       	std	Y+5, r18	; 0x05
     496:	3e 83       	std	Y+6, r19	; 0x06
     498:	4f 83       	std	Y+7, r20	; 0x07
     49a:	58 87       	std	Y+8, r21	; 0x08
     49c:	e9 e0       	ldi	r30, 0x09	; 9
     49e:	ee 2e       	mov	r14, r30
     4a0:	f1 2c       	mov	r15, r1
     4a2:	ec 0e       	add	r14, r28
     4a4:	fd 1e       	adc	r15, r29
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	b7 01       	movw	r22, r14
     4ac:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     4b0:	8e 01       	movw	r16, r28
     4b2:	0f 5e       	subi	r16, 0xEF	; 239
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	ce 01       	movw	r24, r28
     4b8:	05 96       	adiw	r24, 0x05	; 5
     4ba:	b8 01       	movw	r22, r16
     4bc:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     4c0:	8a 89       	ldd	r24, Y+18	; 0x12
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	89 27       	eor	r24, r25
     4c6:	8a 8b       	std	Y+18, r24	; 0x12
     4c8:	c7 01       	movw	r24, r14
     4ca:	b8 01       	movw	r22, r16
     4cc:	ae 01       	movw	r20, r28
     4ce:	47 5e       	subi	r20, 0xE7	; 231
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     4d6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     4da:	a0 96       	adiw	r28, 0x20	; 32
     4dc:	e6 e0       	ldi	r30, 0x06	; 6
     4de:	0c 94 12 39 	jmp	0x7224	; 0x7224 <__epilogue_restores__+0x18>

000004e2 <__addsf3>:
     4e2:	a0 e2       	ldi	r26, 0x20	; 32
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e7 e7       	ldi	r30, 0x77	; 119
     4e8:	f2 e0       	ldi	r31, 0x02	; 2
     4ea:	0c 94 f6 38 	jmp	0x71ec	; 0x71ec <__prologue_saves__+0x18>
     4ee:	69 83       	std	Y+1, r22	; 0x01
     4f0:	7a 83       	std	Y+2, r23	; 0x02
     4f2:	8b 83       	std	Y+3, r24	; 0x03
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	2d 83       	std	Y+5, r18	; 0x05
     4f8:	3e 83       	std	Y+6, r19	; 0x06
     4fa:	4f 83       	std	Y+7, r20	; 0x07
     4fc:	58 87       	std	Y+8, r21	; 0x08
     4fe:	f9 e0       	ldi	r31, 0x09	; 9
     500:	ef 2e       	mov	r14, r31
     502:	f1 2c       	mov	r15, r1
     504:	ec 0e       	add	r14, r28
     506:	fd 1e       	adc	r15, r29
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	b7 01       	movw	r22, r14
     50e:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     512:	8e 01       	movw	r16, r28
     514:	0f 5e       	subi	r16, 0xEF	; 239
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	ce 01       	movw	r24, r28
     51a:	05 96       	adiw	r24, 0x05	; 5
     51c:	b8 01       	movw	r22, r16
     51e:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     522:	c7 01       	movw	r24, r14
     524:	b8 01       	movw	r22, r16
     526:	ae 01       	movw	r20, r28
     528:	47 5e       	subi	r20, 0xE7	; 231
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     530:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     534:	a0 96       	adiw	r28, 0x20	; 32
     536:	e6 e0       	ldi	r30, 0x06	; 6
     538:	0c 94 12 39 	jmp	0x7224	; 0x7224 <__epilogue_restores__+0x18>

0000053c <__mulsf3>:
     53c:	a0 e2       	ldi	r26, 0x20	; 32
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e4 ea       	ldi	r30, 0xA4	; 164
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	0c 94 ea 38 	jmp	0x71d4	; 0x71d4 <__prologue_saves__>
     548:	69 83       	std	Y+1, r22	; 0x01
     54a:	7a 83       	std	Y+2, r23	; 0x02
     54c:	8b 83       	std	Y+3, r24	; 0x03
     54e:	9c 83       	std	Y+4, r25	; 0x04
     550:	2d 83       	std	Y+5, r18	; 0x05
     552:	3e 83       	std	Y+6, r19	; 0x06
     554:	4f 83       	std	Y+7, r20	; 0x07
     556:	58 87       	std	Y+8, r21	; 0x08
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	be 01       	movw	r22, r28
     55e:	67 5f       	subi	r22, 0xF7	; 247
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     566:	ce 01       	movw	r24, r28
     568:	05 96       	adiw	r24, 0x05	; 5
     56a:	be 01       	movw	r22, r28
     56c:	6f 5e       	subi	r22, 0xEF	; 239
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     574:	99 85       	ldd	r25, Y+9	; 0x09
     576:	92 30       	cpi	r25, 0x02	; 2
     578:	88 f0       	brcs	.+34     	; 0x59c <__mulsf3+0x60>
     57a:	89 89       	ldd	r24, Y+17	; 0x11
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	c8 f0       	brcs	.+50     	; 0x5b2 <__mulsf3+0x76>
     580:	94 30       	cpi	r25, 0x04	; 4
     582:	19 f4       	brne	.+6      	; 0x58a <__mulsf3+0x4e>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	51 f4       	brne	.+20     	; 0x59c <__mulsf3+0x60>
     588:	04 c0       	rjmp	.+8      	; 0x592 <__mulsf3+0x56>
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	29 f4       	brne	.+10     	; 0x598 <__mulsf3+0x5c>
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	81 f4       	brne	.+32     	; 0x5b2 <__mulsf3+0x76>
     592:	8d e9       	ldi	r24, 0x9D	; 157
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	c6 c0       	rjmp	.+396    	; 0x724 <__mulsf3+0x1e8>
     598:	92 30       	cpi	r25, 0x02	; 2
     59a:	49 f4       	brne	.+18     	; 0x5ae <__mulsf3+0x72>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a0:	8a 89       	ldd	r24, Y+18	; 0x12
     5a2:	98 13       	cpse	r25, r24
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	2a 87       	std	Y+10, r18	; 0x0a
     5a8:	ce 01       	movw	r24, r28
     5aa:	09 96       	adiw	r24, 0x09	; 9
     5ac:	bb c0       	rjmp	.+374    	; 0x724 <__mulsf3+0x1e8>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	49 f4       	brne	.+18     	; 0x5c4 <__mulsf3+0x88>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	8a 89       	ldd	r24, Y+18	; 0x12
     5b8:	98 13       	cpse	r25, r24
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	2a 8b       	std	Y+18, r18	; 0x12
     5be:	ce 01       	movw	r24, r28
     5c0:	41 96       	adiw	r24, 0x11	; 17
     5c2:	b0 c0       	rjmp	.+352    	; 0x724 <__mulsf3+0x1e8>
     5c4:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c6:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c8:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ca:	58 88       	ldd	r5, Y+16	; 0x10
     5cc:	6d 88       	ldd	r6, Y+21	; 0x15
     5ce:	7e 88       	ldd	r7, Y+22	; 0x16
     5d0:	8f 88       	ldd	r8, Y+23	; 0x17
     5d2:	98 8c       	ldd	r9, Y+24	; 0x18
     5d4:	ee 24       	eor	r14, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	87 01       	movw	r16, r14
     5da:	aa 24       	eor	r10, r10
     5dc:	bb 24       	eor	r11, r11
     5de:	65 01       	movw	r12, r10
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	e0 e0       	ldi	r30, 0x00	; 0
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	c1 01       	movw	r24, r2
     5ee:	81 70       	andi	r24, 0x01	; 1
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	89 2b       	or	r24, r25
     5f4:	e9 f0       	breq	.+58     	; 0x630 <__mulsf3+0xf4>
     5f6:	e6 0c       	add	r14, r6
     5f8:	f7 1c       	adc	r15, r7
     5fa:	08 1d       	adc	r16, r8
     5fc:	19 1d       	adc	r17, r9
     5fe:	9a 01       	movw	r18, r20
     600:	ab 01       	movw	r20, r22
     602:	2a 0d       	add	r18, r10
     604:	3b 1d       	adc	r19, r11
     606:	4c 1d       	adc	r20, r12
     608:	5d 1d       	adc	r21, r13
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e6 14       	cp	r14, r6
     614:	f7 04       	cpc	r15, r7
     616:	08 05       	cpc	r16, r8
     618:	19 05       	cpc	r17, r9
     61a:	20 f4       	brcc	.+8      	; 0x624 <__mulsf3+0xe8>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	ba 01       	movw	r22, r20
     626:	a9 01       	movw	r20, r18
     628:	48 0f       	add	r20, r24
     62a:	59 1f       	adc	r21, r25
     62c:	6a 1f       	adc	r22, r26
     62e:	7b 1f       	adc	r23, r27
     630:	aa 0c       	add	r10, r10
     632:	bb 1c       	adc	r11, r11
     634:	cc 1c       	adc	r12, r12
     636:	dd 1c       	adc	r13, r13
     638:	97 fe       	sbrs	r9, 7
     63a:	08 c0       	rjmp	.+16     	; 0x64c <__mulsf3+0x110>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	a8 2a       	or	r10, r24
     646:	b9 2a       	or	r11, r25
     648:	ca 2a       	or	r12, r26
     64a:	db 2a       	or	r13, r27
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	e0 32       	cpi	r30, 0x20	; 32
     650:	f1 05       	cpc	r31, r1
     652:	49 f0       	breq	.+18     	; 0x666 <__mulsf3+0x12a>
     654:	66 0c       	add	r6, r6
     656:	77 1c       	adc	r7, r7
     658:	88 1c       	adc	r8, r8
     65a:	99 1c       	adc	r9, r9
     65c:	56 94       	lsr	r5
     65e:	47 94       	ror	r4
     660:	37 94       	ror	r3
     662:	27 94       	ror	r2
     664:	c3 cf       	rjmp	.-122    	; 0x5ec <__mulsf3+0xb0>
     666:	fa 85       	ldd	r31, Y+10	; 0x0a
     668:	ea 89       	ldd	r30, Y+18	; 0x12
     66a:	2b 89       	ldd	r18, Y+19	; 0x13
     66c:	3c 89       	ldd	r19, Y+20	; 0x14
     66e:	8b 85       	ldd	r24, Y+11	; 0x0b
     670:	9c 85       	ldd	r25, Y+12	; 0x0c
     672:	28 0f       	add	r18, r24
     674:	39 1f       	adc	r19, r25
     676:	2e 5f       	subi	r18, 0xFE	; 254
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	17 c0       	rjmp	.+46     	; 0x6aa <__mulsf3+0x16e>
     67c:	ca 01       	movw	r24, r20
     67e:	81 70       	andi	r24, 0x01	; 1
     680:	90 70       	andi	r25, 0x00	; 0
     682:	89 2b       	or	r24, r25
     684:	61 f0       	breq	.+24     	; 0x69e <__mulsf3+0x162>
     686:	16 95       	lsr	r17
     688:	07 95       	ror	r16
     68a:	f7 94       	ror	r15
     68c:	e7 94       	ror	r14
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e8       	ldi	r27, 0x80	; 128
     696:	e8 2a       	or	r14, r24
     698:	f9 2a       	or	r15, r25
     69a:	0a 2b       	or	r16, r26
     69c:	1b 2b       	or	r17, r27
     69e:	76 95       	lsr	r23
     6a0:	67 95       	ror	r22
     6a2:	57 95       	ror	r21
     6a4:	47 95       	ror	r20
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	e7 cf       	rjmp	.-50     	; 0x67c <__mulsf3+0x140>
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <__mulsf3+0x18c>
     6b0:	44 0f       	add	r20, r20
     6b2:	55 1f       	adc	r21, r21
     6b4:	66 1f       	adc	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	17 fd       	sbrc	r17, 7
     6ba:	41 60       	ori	r20, 0x01	; 1
     6bc:	ee 0c       	add	r14, r14
     6be:	ff 1c       	adc	r15, r15
     6c0:	00 1f       	adc	r16, r16
     6c2:	11 1f       	adc	r17, r17
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	30 40       	sbci	r19, 0x00	; 0
     6c8:	40 30       	cpi	r20, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	59 07       	cpc	r21, r25
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	69 07       	cpc	r22, r25
     6d2:	90 e4       	ldi	r25, 0x40	; 64
     6d4:	79 07       	cpc	r23, r25
     6d6:	60 f3       	brcs	.-40     	; 0x6b0 <__mulsf3+0x174>
     6d8:	2b 8f       	std	Y+27, r18	; 0x1b
     6da:	3c 8f       	std	Y+28, r19	; 0x1c
     6dc:	db 01       	movw	r26, r22
     6de:	ca 01       	movw	r24, r20
     6e0:	8f 77       	andi	r24, 0x7F	; 127
     6e2:	90 70       	andi	r25, 0x00	; 0
     6e4:	a0 70       	andi	r26, 0x00	; 0
     6e6:	b0 70       	andi	r27, 0x00	; 0
     6e8:	80 34       	cpi	r24, 0x40	; 64
     6ea:	91 05       	cpc	r25, r1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	61 f4       	brne	.+24     	; 0x70a <__mulsf3+0x1ce>
     6f2:	47 fd       	sbrc	r20, 7
     6f4:	0a c0       	rjmp	.+20     	; 0x70a <__mulsf3+0x1ce>
     6f6:	e1 14       	cp	r14, r1
     6f8:	f1 04       	cpc	r15, r1
     6fa:	01 05       	cpc	r16, r1
     6fc:	11 05       	cpc	r17, r1
     6fe:	29 f0       	breq	.+10     	; 0x70a <__mulsf3+0x1ce>
     700:	40 5c       	subi	r20, 0xC0	; 192
     702:	5f 4f       	sbci	r21, 0xFF	; 255
     704:	6f 4f       	sbci	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	40 78       	andi	r20, 0x80	; 128
     70a:	1a 8e       	std	Y+26, r1	; 0x1a
     70c:	fe 17       	cp	r31, r30
     70e:	11 f0       	breq	.+4      	; 0x714 <__mulsf3+0x1d8>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8a 8f       	std	Y+26, r24	; 0x1a
     714:	4d 8f       	std	Y+29, r20	; 0x1d
     716:	5e 8f       	std	Y+30, r21	; 0x1e
     718:	6f 8f       	std	Y+31, r22	; 0x1f
     71a:	78 a3       	std	Y+32, r23	; 0x20
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	89 8f       	std	Y+25, r24	; 0x19
     720:	ce 01       	movw	r24, r28
     722:	49 96       	adiw	r24, 0x19	; 25
     724:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     728:	a0 96       	adiw	r28, 0x20	; 32
     72a:	e2 e1       	ldi	r30, 0x12	; 18
     72c:	0c 94 06 39 	jmp	0x720c	; 0x720c <__epilogue_restores__>

00000730 <__divsf3>:
     730:	a8 e1       	ldi	r26, 0x18	; 24
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ee e9       	ldi	r30, 0x9E	; 158
     736:	f3 e0       	ldi	r31, 0x03	; 3
     738:	0c 94 f2 38 	jmp	0x71e4	; 0x71e4 <__prologue_saves__+0x10>
     73c:	69 83       	std	Y+1, r22	; 0x01
     73e:	7a 83       	std	Y+2, r23	; 0x02
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	2d 83       	std	Y+5, r18	; 0x05
     746:	3e 83       	std	Y+6, r19	; 0x06
     748:	4f 83       	std	Y+7, r20	; 0x07
     74a:	58 87       	std	Y+8, r21	; 0x08
     74c:	b9 e0       	ldi	r27, 0x09	; 9
     74e:	eb 2e       	mov	r14, r27
     750:	f1 2c       	mov	r15, r1
     752:	ec 0e       	add	r14, r28
     754:	fd 1e       	adc	r15, r29
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	b7 01       	movw	r22, r14
     75c:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     760:	8e 01       	movw	r16, r28
     762:	0f 5e       	subi	r16, 0xEF	; 239
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	05 96       	adiw	r24, 0x05	; 5
     76a:	b8 01       	movw	r22, r16
     76c:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     770:	29 85       	ldd	r18, Y+9	; 0x09
     772:	22 30       	cpi	r18, 0x02	; 2
     774:	08 f4       	brcc	.+2      	; 0x778 <__divsf3+0x48>
     776:	7e c0       	rjmp	.+252    	; 0x874 <__stack+0x15>
     778:	39 89       	ldd	r19, Y+17	; 0x11
     77a:	32 30       	cpi	r19, 0x02	; 2
     77c:	10 f4       	brcc	.+4      	; 0x782 <__divsf3+0x52>
     77e:	b8 01       	movw	r22, r16
     780:	7c c0       	rjmp	.+248    	; 0x87a <__stack+0x1b>
     782:	8a 85       	ldd	r24, Y+10	; 0x0a
     784:	9a 89       	ldd	r25, Y+18	; 0x12
     786:	89 27       	eor	r24, r25
     788:	8a 87       	std	Y+10, r24	; 0x0a
     78a:	24 30       	cpi	r18, 0x04	; 4
     78c:	11 f0       	breq	.+4      	; 0x792 <__divsf3+0x62>
     78e:	22 30       	cpi	r18, 0x02	; 2
     790:	31 f4       	brne	.+12     	; 0x79e <__divsf3+0x6e>
     792:	23 17       	cp	r18, r19
     794:	09 f0       	breq	.+2      	; 0x798 <__divsf3+0x68>
     796:	6e c0       	rjmp	.+220    	; 0x874 <__stack+0x15>
     798:	6d e9       	ldi	r22, 0x9D	; 157
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	6e c0       	rjmp	.+220    	; 0x87a <__stack+0x1b>
     79e:	34 30       	cpi	r19, 0x04	; 4
     7a0:	39 f4       	brne	.+14     	; 0x7b0 <__divsf3+0x80>
     7a2:	1d 86       	std	Y+13, r1	; 0x0d
     7a4:	1e 86       	std	Y+14, r1	; 0x0e
     7a6:	1f 86       	std	Y+15, r1	; 0x0f
     7a8:	18 8a       	std	Y+16, r1	; 0x10
     7aa:	1c 86       	std	Y+12, r1	; 0x0c
     7ac:	1b 86       	std	Y+11, r1	; 0x0b
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__divsf3+0x88>
     7b0:	32 30       	cpi	r19, 0x02	; 2
     7b2:	21 f4       	brne	.+8      	; 0x7bc <__divsf3+0x8c>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	89 87       	std	Y+9, r24	; 0x09
     7b8:	b7 01       	movw	r22, r14
     7ba:	5f c0       	rjmp	.+190    	; 0x87a <__stack+0x1b>
     7bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     7be:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	28 1b       	sub	r18, r24
     7c6:	39 0b       	sbc	r19, r25
     7c8:	3c 87       	std	Y+12, r19	; 0x0c
     7ca:	2b 87       	std	Y+11, r18	; 0x0b
     7cc:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ce:	fe 84       	ldd	r15, Y+14	; 0x0e
     7d0:	0f 85       	ldd	r16, Y+15	; 0x0f
     7d2:	18 89       	ldd	r17, Y+16	; 0x10
     7d4:	ad 88       	ldd	r10, Y+21	; 0x15
     7d6:	be 88       	ldd	r11, Y+22	; 0x16
     7d8:	cf 88       	ldd	r12, Y+23	; 0x17
     7da:	d8 8c       	ldd	r13, Y+24	; 0x18
     7dc:	ea 14       	cp	r14, r10
     7de:	fb 04       	cpc	r15, r11
     7e0:	0c 05       	cpc	r16, r12
     7e2:	1d 05       	cpc	r17, r13
     7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__divsf3+0xc6>
     7e6:	ee 0c       	add	r14, r14
     7e8:	ff 1c       	adc	r15, r15
     7ea:	00 1f       	adc	r16, r16
     7ec:	11 1f       	adc	r17, r17
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	30 40       	sbci	r19, 0x00	; 0
     7f2:	3c 87       	std	Y+12, r19	; 0x0c
     7f4:	2b 87       	std	Y+11, r18	; 0x0b
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e4       	ldi	r27, 0x40	; 64
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	ea 14       	cp	r14, r10
     80c:	fb 04       	cpc	r15, r11
     80e:	0c 05       	cpc	r16, r12
     810:	1d 05       	cpc	r17, r13
     812:	40 f0       	brcs	.+16     	; 0x824 <__divsf3+0xf4>
     814:	28 2b       	or	r18, r24
     816:	39 2b       	or	r19, r25
     818:	4a 2b       	or	r20, r26
     81a:	5b 2b       	or	r21, r27
     81c:	ea 18       	sub	r14, r10
     81e:	fb 08       	sbc	r15, r11
     820:	0c 09       	sbc	r16, r12
     822:	1d 09       	sbc	r17, r13
     824:	b6 95       	lsr	r27
     826:	a7 95       	ror	r26
     828:	97 95       	ror	r25
     82a:	87 95       	ror	r24
     82c:	ee 0c       	add	r14, r14
     82e:	ff 1c       	adc	r15, r15
     830:	00 1f       	adc	r16, r16
     832:	11 1f       	adc	r17, r17
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	6f 31       	cpi	r22, 0x1F	; 31
     83a:	71 05       	cpc	r23, r1
     83c:	31 f7       	brne	.-52     	; 0x80a <__divsf3+0xda>
     83e:	da 01       	movw	r26, r20
     840:	c9 01       	movw	r24, r18
     842:	8f 77       	andi	r24, 0x7F	; 127
     844:	90 70       	andi	r25, 0x00	; 0
     846:	a0 70       	andi	r26, 0x00	; 0
     848:	b0 70       	andi	r27, 0x00	; 0
     84a:	80 34       	cpi	r24, 0x40	; 64
     84c:	91 05       	cpc	r25, r1
     84e:	a1 05       	cpc	r26, r1
     850:	b1 05       	cpc	r27, r1
     852:	61 f4       	brne	.+24     	; 0x86c <__stack+0xd>
     854:	27 fd       	sbrc	r18, 7
     856:	0a c0       	rjmp	.+20     	; 0x86c <__stack+0xd>
     858:	e1 14       	cp	r14, r1
     85a:	f1 04       	cpc	r15, r1
     85c:	01 05       	cpc	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	29 f0       	breq	.+10     	; 0x86c <__stack+0xd>
     862:	20 5c       	subi	r18, 0xC0	; 192
     864:	3f 4f       	sbci	r19, 0xFF	; 255
     866:	4f 4f       	sbci	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	20 78       	andi	r18, 0x80	; 128
     86c:	2d 87       	std	Y+13, r18	; 0x0d
     86e:	3e 87       	std	Y+14, r19	; 0x0e
     870:	4f 87       	std	Y+15, r20	; 0x0f
     872:	58 8b       	std	Y+16, r21	; 0x10
     874:	be 01       	movw	r22, r28
     876:	67 5f       	subi	r22, 0xF7	; 247
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	cb 01       	movw	r24, r22
     87c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     880:	68 96       	adiw	r28, 0x18	; 24
     882:	ea e0       	ldi	r30, 0x0A	; 10
     884:	0c 94 0e 39 	jmp	0x721c	; 0x721c <__epilogue_restores__+0x10>

00000888 <__gtsf2>:
     888:	a8 e1       	ldi	r26, 0x18	; 24
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	ea e4       	ldi	r30, 0x4A	; 74
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	0c 94 f6 38 	jmp	0x71ec	; 0x71ec <__prologue_saves__+0x18>
     894:	69 83       	std	Y+1, r22	; 0x01
     896:	7a 83       	std	Y+2, r23	; 0x02
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	9c 83       	std	Y+4, r25	; 0x04
     89c:	2d 83       	std	Y+5, r18	; 0x05
     89e:	3e 83       	std	Y+6, r19	; 0x06
     8a0:	4f 83       	std	Y+7, r20	; 0x07
     8a2:	58 87       	std	Y+8, r21	; 0x08
     8a4:	89 e0       	ldi	r24, 0x09	; 9
     8a6:	e8 2e       	mov	r14, r24
     8a8:	f1 2c       	mov	r15, r1
     8aa:	ec 0e       	add	r14, r28
     8ac:	fd 1e       	adc	r15, r29
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	b7 01       	movw	r22, r14
     8b4:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     8b8:	8e 01       	movw	r16, r28
     8ba:	0f 5e       	subi	r16, 0xEF	; 239
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	ce 01       	movw	r24, r28
     8c0:	05 96       	adiw	r24, 0x05	; 5
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     8c8:	89 85       	ldd	r24, Y+9	; 0x09
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__gtsf2+0x56>
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	28 f0       	brcs	.+10     	; 0x8de <__gtsf2+0x56>
     8d4:	c7 01       	movw	r24, r14
     8d6:	b8 01       	movw	r22, r16
     8d8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__gtsf2+0x58>
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	68 96       	adiw	r28, 0x18	; 24
     8e2:	e6 e0       	ldi	r30, 0x06	; 6
     8e4:	0c 94 12 39 	jmp	0x7224	; 0x7224 <__epilogue_restores__+0x18>

000008e8 <__gesf2>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 f6 38 	jmp	0x71ec	; 0x71ec <__prologue_saves__+0x18>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	89 e0       	ldi	r24, 0x09	; 9
     906:	e8 2e       	mov	r14, r24
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	40 f0       	brcs	.+16     	; 0x93e <__gesf2+0x56>
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	28 f0       	brcs	.+10     	; 0x93e <__gesf2+0x56>
     934:	c7 01       	movw	r24, r14
     936:	b8 01       	movw	r22, r16
     938:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__gesf2+0x58>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	68 96       	adiw	r28, 0x18	; 24
     942:	e6 e0       	ldi	r30, 0x06	; 6
     944:	0c 94 12 39 	jmp	0x7224	; 0x7224 <__epilogue_restores__+0x18>

00000948 <__ltsf2>:
     948:	a8 e1       	ldi	r26, 0x18	; 24
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 f6 38 	jmp	0x71ec	; 0x71ec <__prologue_saves__+0x18>
     954:	69 83       	std	Y+1, r22	; 0x01
     956:	7a 83       	std	Y+2, r23	; 0x02
     958:	8b 83       	std	Y+3, r24	; 0x03
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	2d 83       	std	Y+5, r18	; 0x05
     95e:	3e 83       	std	Y+6, r19	; 0x06
     960:	4f 83       	std	Y+7, r20	; 0x07
     962:	58 87       	std	Y+8, r21	; 0x08
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	e8 2e       	mov	r14, r24
     968:	f1 2c       	mov	r15, r1
     96a:	ec 0e       	add	r14, r28
     96c:	fd 1e       	adc	r15, r29
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	b7 01       	movw	r22, r14
     974:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     978:	8e 01       	movw	r16, r28
     97a:	0f 5e       	subi	r16, 0xEF	; 239
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	05 96       	adiw	r24, 0x05	; 5
     982:	b8 01       	movw	r22, r16
     984:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	40 f0       	brcs	.+16     	; 0x99e <__ltsf2+0x56>
     98e:	89 89       	ldd	r24, Y+17	; 0x11
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	28 f0       	brcs	.+10     	; 0x99e <__ltsf2+0x56>
     994:	c7 01       	movw	r24, r14
     996:	b8 01       	movw	r22, r16
     998:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__ltsf2+0x58>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	68 96       	adiw	r28, 0x18	; 24
     9a2:	e6 e0       	ldi	r30, 0x06	; 6
     9a4:	0c 94 12 39 	jmp	0x7224	; 0x7224 <__epilogue_restores__+0x18>

000009a8 <__floatsisf>:
     9a8:	a8 e0       	ldi	r26, 0x08	; 8
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 f3 38 	jmp	0x71e6	; 0x71e6 <__prologue_saves__+0x12>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	da 01       	movw	r26, r20
     9be:	c9 01       	movw	r24, r18
     9c0:	88 27       	eor	r24, r24
     9c2:	b7 fd       	sbrc	r27, 7
     9c4:	83 95       	inc	r24
     9c6:	99 27       	eor	r25, r25
     9c8:	aa 27       	eor	r26, r26
     9ca:	bb 27       	eor	r27, r27
     9cc:	b8 2e       	mov	r11, r24
     9ce:	21 15       	cp	r18, r1
     9d0:	31 05       	cpc	r19, r1
     9d2:	41 05       	cpc	r20, r1
     9d4:	51 05       	cpc	r21, r1
     9d6:	19 f4       	brne	.+6      	; 0x9de <__floatsisf+0x36>
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	3a c0       	rjmp	.+116    	; 0xa52 <__floatsisf+0xaa>
     9de:	88 23       	and	r24, r24
     9e0:	a9 f0       	breq	.+42     	; 0xa0c <__floatsisf+0x64>
     9e2:	20 30       	cpi	r18, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	38 07       	cpc	r19, r24
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	48 07       	cpc	r20, r24
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	58 07       	cpc	r21, r24
     9f0:	29 f4       	brne	.+10     	; 0x9fc <__floatsisf+0x54>
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	9f ec       	ldi	r25, 0xCF	; 207
     9fa:	30 c0       	rjmp	.+96     	; 0xa5c <__floatsisf+0xb4>
     9fc:	ee 24       	eor	r14, r14
     9fe:	ff 24       	eor	r15, r15
     a00:	87 01       	movw	r16, r14
     a02:	e2 1a       	sub	r14, r18
     a04:	f3 0a       	sbc	r15, r19
     a06:	04 0b       	sbc	r16, r20
     a08:	15 0b       	sbc	r17, r21
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__floatsisf+0x68>
     a0c:	79 01       	movw	r14, r18
     a0e:	8a 01       	movw	r16, r20
     a10:	8e e1       	ldi	r24, 0x1E	; 30
     a12:	c8 2e       	mov	r12, r24
     a14:	d1 2c       	mov	r13, r1
     a16:	dc 82       	std	Y+4, r13	; 0x04
     a18:	cb 82       	std	Y+3, r12	; 0x03
     a1a:	ed 82       	std	Y+5, r14	; 0x05
     a1c:	fe 82       	std	Y+6, r15	; 0x06
     a1e:	0f 83       	std	Y+7, r16	; 0x07
     a20:	18 87       	std	Y+8, r17	; 0x08
     a22:	c8 01       	movw	r24, r16
     a24:	b7 01       	movw	r22, r14
     a26:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__clzsi2>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	18 16       	cp	r1, r24
     a2e:	19 06       	cpc	r1, r25
     a30:	84 f4       	brge	.+32     	; 0xa52 <__floatsisf+0xaa>
     a32:	08 2e       	mov	r0, r24
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__floatsisf+0x96>
     a36:	ee 0c       	add	r14, r14
     a38:	ff 1c       	adc	r15, r15
     a3a:	00 1f       	adc	r16, r16
     a3c:	11 1f       	adc	r17, r17
     a3e:	0a 94       	dec	r0
     a40:	d2 f7       	brpl	.-12     	; 0xa36 <__floatsisf+0x8e>
     a42:	ed 82       	std	Y+5, r14	; 0x05
     a44:	fe 82       	std	Y+6, r15	; 0x06
     a46:	0f 83       	std	Y+7, r16	; 0x07
     a48:	18 87       	std	Y+8, r17	; 0x08
     a4a:	c8 1a       	sub	r12, r24
     a4c:	d9 0a       	sbc	r13, r25
     a4e:	dc 82       	std	Y+4, r13	; 0x04
     a50:	cb 82       	std	Y+3, r12	; 0x03
     a52:	ba 82       	std	Y+2, r11	; 0x02
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     a5c:	28 96       	adiw	r28, 0x08	; 8
     a5e:	e9 e0       	ldi	r30, 0x09	; 9
     a60:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__epilogue_restores__+0x12>

00000a64 <__fixsfsi>:
     a64:	ac e0       	ldi	r26, 0x0C	; 12
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e8 e3       	ldi	r30, 0x38	; 56
     a6a:	f5 e0       	ldi	r31, 0x05	; 5
     a6c:	0c 94 fa 38 	jmp	0x71f4	; 0x71f4 <__prologue_saves__+0x20>
     a70:	69 83       	std	Y+1, r22	; 0x01
     a72:	7a 83       	std	Y+2, r23	; 0x02
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	be 01       	movw	r22, r28
     a7e:	6b 5f       	subi	r22, 0xFB	; 251
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     a86:	8d 81       	ldd	r24, Y+5	; 0x05
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	61 f1       	breq	.+88     	; 0xae4 <__fixsfsi+0x80>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	50 f1       	brcs	.+84     	; 0xae4 <__fixsfsi+0x80>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	21 f4       	brne	.+8      	; 0xa9c <__fixsfsi+0x38>
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	88 23       	and	r24, r24
     a98:	51 f1       	breq	.+84     	; 0xaee <__fixsfsi+0x8a>
     a9a:	2e c0       	rjmp	.+92     	; 0xaf8 <__fixsfsi+0x94>
     a9c:	2f 81       	ldd	r18, Y+7	; 0x07
     a9e:	38 85       	ldd	r19, Y+8	; 0x08
     aa0:	37 fd       	sbrc	r19, 7
     aa2:	20 c0       	rjmp	.+64     	; 0xae4 <__fixsfsi+0x80>
     aa4:	6e 81       	ldd	r22, Y+6	; 0x06
     aa6:	2f 31       	cpi	r18, 0x1F	; 31
     aa8:	31 05       	cpc	r19, r1
     aaa:	1c f0       	brlt	.+6      	; 0xab2 <__fixsfsi+0x4e>
     aac:	66 23       	and	r22, r22
     aae:	f9 f0       	breq	.+62     	; 0xaee <__fixsfsi+0x8a>
     ab0:	23 c0       	rjmp	.+70     	; 0xaf8 <__fixsfsi+0x94>
     ab2:	8e e1       	ldi	r24, 0x1E	; 30
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	82 1b       	sub	r24, r18
     ab8:	93 0b       	sbc	r25, r19
     aba:	29 85       	ldd	r18, Y+9	; 0x09
     abc:	3a 85       	ldd	r19, Y+10	; 0x0a
     abe:	4b 85       	ldd	r20, Y+11	; 0x0b
     ac0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__fixsfsi+0x68>
     ac4:	56 95       	lsr	r21
     ac6:	47 95       	ror	r20
     ac8:	37 95       	ror	r19
     aca:	27 95       	ror	r18
     acc:	8a 95       	dec	r24
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__fixsfsi+0x60>
     ad0:	66 23       	and	r22, r22
     ad2:	b1 f0       	breq	.+44     	; 0xb00 <__fixsfsi+0x9c>
     ad4:	50 95       	com	r21
     ad6:	40 95       	com	r20
     ad8:	30 95       	com	r19
     ada:	21 95       	neg	r18
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	0e c0       	rjmp	.+28     	; 0xb00 <__fixsfsi+0x9c>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <__fixsfsi+0x9c>
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	3f ef       	ldi	r19, 0xFF	; 255
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	5f e7       	ldi	r21, 0x7F	; 127
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__fixsfsi+0x9c>
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e8       	ldi	r21, 0x80	; 128
     b00:	b9 01       	movw	r22, r18
     b02:	ca 01       	movw	r24, r20
     b04:	2c 96       	adiw	r28, 0x0c	; 12
     b06:	e2 e0       	ldi	r30, 0x02	; 2
     b08:	0c 94 16 39 	jmp	0x722c	; 0x722c <__epilogue_restores__+0x20>

00000b0c <__floatunsisf>:
     b0c:	a8 e0       	ldi	r26, 0x08	; 8
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	ec e8       	ldi	r30, 0x8C	; 140
     b12:	f5 e0       	ldi	r31, 0x05	; 5
     b14:	0c 94 f2 38 	jmp	0x71e4	; 0x71e4 <__prologue_saves__+0x10>
     b18:	7b 01       	movw	r14, r22
     b1a:	8c 01       	movw	r16, r24
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	81 05       	cpc	r24, r1
     b22:	91 05       	cpc	r25, r1
     b24:	19 f4       	brne	.+6      	; 0xb2c <__floatunsisf+0x20>
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	60 c0       	rjmp	.+192    	; 0xbec <__floatunsisf+0xe0>
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	8e e1       	ldi	r24, 0x1E	; 30
     b32:	c8 2e       	mov	r12, r24
     b34:	d1 2c       	mov	r13, r1
     b36:	dc 82       	std	Y+4, r13	; 0x04
     b38:	cb 82       	std	Y+3, r12	; 0x03
     b3a:	ed 82       	std	Y+5, r14	; 0x05
     b3c:	fe 82       	std	Y+6, r15	; 0x06
     b3e:	0f 83       	std	Y+7, r16	; 0x07
     b40:	18 87       	std	Y+8, r17	; 0x08
     b42:	c8 01       	movw	r24, r16
     b44:	b7 01       	movw	r22, r14
     b46:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__clzsi2>
     b4a:	fc 01       	movw	r30, r24
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	f7 ff       	sbrs	r31, 7
     b50:	3b c0       	rjmp	.+118    	; 0xbc8 <__floatunsisf+0xbc>
     b52:	22 27       	eor	r18, r18
     b54:	33 27       	eor	r19, r19
     b56:	2e 1b       	sub	r18, r30
     b58:	3f 0b       	sbc	r19, r31
     b5a:	57 01       	movw	r10, r14
     b5c:	68 01       	movw	r12, r16
     b5e:	02 2e       	mov	r0, r18
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__floatunsisf+0x5e>
     b62:	d6 94       	lsr	r13
     b64:	c7 94       	ror	r12
     b66:	b7 94       	ror	r11
     b68:	a7 94       	ror	r10
     b6a:	0a 94       	dec	r0
     b6c:	d2 f7       	brpl	.-12     	; 0xb62 <__floatunsisf+0x56>
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__floatunsisf+0x7c>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	2a 95       	dec	r18
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <__floatunsisf+0x74>
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	a1 09       	sbc	r26, r1
     b90:	b1 09       	sbc	r27, r1
     b92:	8e 21       	and	r24, r14
     b94:	9f 21       	and	r25, r15
     b96:	a0 23       	and	r26, r16
     b98:	b1 23       	and	r27, r17
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	a1 05       	cpc	r26, r1
     b9e:	b1 05       	cpc	r27, r1
     ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatunsisf+0x9e>
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	4a 29       	or	r20, r10
     bac:	5b 29       	or	r21, r11
     bae:	6c 29       	or	r22, r12
     bb0:	7d 29       	or	r23, r13
     bb2:	4d 83       	std	Y+5, r20	; 0x05
     bb4:	5e 83       	std	Y+6, r21	; 0x06
     bb6:	6f 83       	std	Y+7, r22	; 0x07
     bb8:	78 87       	std	Y+8, r23	; 0x08
     bba:	8e e1       	ldi	r24, 0x1E	; 30
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	8e 1b       	sub	r24, r30
     bc0:	9f 0b       	sbc	r25, r31
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	12 c0       	rjmp	.+36     	; 0xbec <__floatunsisf+0xe0>
     bc8:	30 97       	sbiw	r30, 0x00	; 0
     bca:	81 f0       	breq	.+32     	; 0xbec <__floatunsisf+0xe0>
     bcc:	0e 2e       	mov	r0, r30
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__floatunsisf+0xcc>
     bd0:	ee 0c       	add	r14, r14
     bd2:	ff 1c       	adc	r15, r15
     bd4:	00 1f       	adc	r16, r16
     bd6:	11 1f       	adc	r17, r17
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <__floatunsisf+0xc4>
     bdc:	ed 82       	std	Y+5, r14	; 0x05
     bde:	fe 82       	std	Y+6, r15	; 0x06
     be0:	0f 83       	std	Y+7, r16	; 0x07
     be2:	18 87       	std	Y+8, r17	; 0x08
     be4:	ce 1a       	sub	r12, r30
     be6:	df 0a       	sbc	r13, r31
     be8:	dc 82       	std	Y+4, r13	; 0x04
     bea:	cb 82       	std	Y+3, r12	; 0x03
     bec:	1a 82       	std	Y+2, r1	; 0x02
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     bf6:	28 96       	adiw	r28, 0x08	; 8
     bf8:	ea e0       	ldi	r30, 0x0A	; 10
     bfa:	0c 94 0e 39 	jmp	0x721c	; 0x721c <__epilogue_restores__+0x10>

00000bfe <__clzsi2>:
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	7b 01       	movw	r14, r22
     c08:	8c 01       	movw	r16, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	e8 16       	cp	r14, r24
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	f8 06       	cpc	r15, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 07       	cpc	r16, r24
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	18 07       	cpc	r17, r24
     c1a:	88 f4       	brcc	.+34     	; 0xc3e <__clzsi2+0x40>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	e8 16       	cp	r14, r24
     c20:	f1 04       	cpc	r15, r1
     c22:	01 05       	cpc	r16, r1
     c24:	11 05       	cpc	r17, r1
     c26:	31 f0       	breq	.+12     	; 0xc34 <__clzsi2+0x36>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <__clzsi2+0x36>
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	17 c0       	rjmp	.+46     	; 0xc62 <__clzsi2+0x64>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	12 c0       	rjmp	.+36     	; 0xc62 <__clzsi2+0x64>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	e8 16       	cp	r14, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	f8 06       	cpc	r15, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 07       	cpc	r16, r24
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	18 07       	cpc	r17, r24
     c4e:	28 f0       	brcs	.+10     	; 0xc5a <__clzsi2+0x5c>
     c50:	88 e1       	ldi	r24, 0x18	; 24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__clzsi2+0x64>
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	28 1b       	sub	r18, r24
     c6c:	39 0b       	sbc	r19, r25
     c6e:	4a 0b       	sbc	r20, r26
     c70:	5b 0b       	sbc	r21, r27
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <__clzsi2+0x7e>
     c74:	16 95       	lsr	r17
     c76:	07 95       	ror	r16
     c78:	f7 94       	ror	r15
     c7a:	e7 94       	ror	r14
     c7c:	8a 95       	dec	r24
     c7e:	d2 f7       	brpl	.-12     	; 0xc74 <__clzsi2+0x76>
     c80:	f7 01       	movw	r30, r14
     c82:	eb 55       	subi	r30, 0x5B	; 91
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	80 81       	ld	r24, Z
     c88:	28 1b       	sub	r18, r24
     c8a:	31 09       	sbc	r19, r1
     c8c:	41 09       	sbc	r20, r1
     c8e:	51 09       	sbc	r21, r1
     c90:	c9 01       	movw	r24, r18
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	08 95       	ret

00000c9c <__pack_f>:
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	fc 01       	movw	r30, r24
     ca8:	e4 80       	ldd	r14, Z+4	; 0x04
     caa:	f5 80       	ldd	r15, Z+5	; 0x05
     cac:	06 81       	ldd	r16, Z+6	; 0x06
     cae:	17 81       	ldd	r17, Z+7	; 0x07
     cb0:	d1 80       	ldd	r13, Z+1	; 0x01
     cb2:	80 81       	ld	r24, Z
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	48 f4       	brcc	.+18     	; 0xcca <__pack_f+0x2e>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e1       	ldi	r26, 0x10	; 16
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e8 2a       	or	r14, r24
     cc2:	f9 2a       	or	r15, r25
     cc4:	0a 2b       	or	r16, r26
     cc6:	1b 2b       	or	r17, r27
     cc8:	a5 c0       	rjmp	.+330    	; 0xe14 <__pack_f+0x178>
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__pack_f+0x34>
     cce:	9f c0       	rjmp	.+318    	; 0xe0e <__pack_f+0x172>
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	21 f4       	brne	.+8      	; 0xcdc <__pack_f+0x40>
     cd4:	ee 24       	eor	r14, r14
     cd6:	ff 24       	eor	r15, r15
     cd8:	87 01       	movw	r16, r14
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__pack_f+0x4a>
     cdc:	e1 14       	cp	r14, r1
     cde:	f1 04       	cpc	r15, r1
     ce0:	01 05       	cpc	r16, r1
     ce2:	11 05       	cpc	r17, r1
     ce4:	19 f4       	brne	.+6      	; 0xcec <__pack_f+0x50>
     ce6:	e0 e0       	ldi	r30, 0x00	; 0
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	96 c0       	rjmp	.+300    	; 0xe18 <__pack_f+0x17c>
     cec:	62 81       	ldd	r22, Z+2	; 0x02
     cee:	73 81       	ldd	r23, Z+3	; 0x03
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	62 38       	cpi	r22, 0x82	; 130
     cf4:	79 07       	cpc	r23, r25
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <__pack_f+0x5e>
     cf8:	5b c0       	rjmp	.+182    	; 0xdb0 <__pack_f+0x114>
     cfa:	22 e8       	ldi	r18, 0x82	; 130
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	26 1b       	sub	r18, r22
     d00:	37 0b       	sbc	r19, r23
     d02:	2a 31       	cpi	r18, 0x1A	; 26
     d04:	31 05       	cpc	r19, r1
     d06:	2c f0       	brlt	.+10     	; 0xd12 <__pack_f+0x76>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <__pack_f+0xca>
     d12:	b8 01       	movw	r22, r16
     d14:	a7 01       	movw	r20, r14
     d16:	02 2e       	mov	r0, r18
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__pack_f+0x86>
     d1a:	76 95       	lsr	r23
     d1c:	67 95       	ror	r22
     d1e:	57 95       	ror	r21
     d20:	47 95       	ror	r20
     d22:	0a 94       	dec	r0
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__pack_f+0x7e>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__pack_f+0x9c>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	2a 95       	dec	r18
     d3a:	d2 f7       	brpl	.-12     	; 0xd30 <__pack_f+0x94>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	a1 09       	sbc	r26, r1
     d40:	b1 09       	sbc	r27, r1
     d42:	8e 21       	and	r24, r14
     d44:	9f 21       	and	r25, r15
     d46:	a0 23       	and	r26, r16
     d48:	b1 23       	and	r27, r17
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	a1 05       	cpc	r26, r1
     d4e:	b1 05       	cpc	r27, r1
     d50:	21 f0       	breq	.+8      	; 0xd5a <__pack_f+0xbe>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	9a 01       	movw	r18, r20
     d5c:	ab 01       	movw	r20, r22
     d5e:	28 2b       	or	r18, r24
     d60:	39 2b       	or	r19, r25
     d62:	4a 2b       	or	r20, r26
     d64:	5b 2b       	or	r21, r27
     d66:	da 01       	movw	r26, r20
     d68:	c9 01       	movw	r24, r18
     d6a:	8f 77       	andi	r24, 0x7F	; 127
     d6c:	90 70       	andi	r25, 0x00	; 0
     d6e:	a0 70       	andi	r26, 0x00	; 0
     d70:	b0 70       	andi	r27, 0x00	; 0
     d72:	80 34       	cpi	r24, 0x40	; 64
     d74:	91 05       	cpc	r25, r1
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	39 f4       	brne	.+14     	; 0xd8a <__pack_f+0xee>
     d7c:	27 ff       	sbrs	r18, 7
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <__pack_f+0xf6>
     d80:	20 5c       	subi	r18, 0xC0	; 192
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	4f 4f       	sbci	r20, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <__pack_f+0xf6>
     d8a:	21 5c       	subi	r18, 0xC1	; 193
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	4f 4f       	sbci	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	e0 e0       	ldi	r30, 0x00	; 0
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	20 30       	cpi	r18, 0x00	; 0
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	3a 07       	cpc	r19, r26
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	4a 07       	cpc	r20, r26
     da0:	a0 e4       	ldi	r26, 0x40	; 64
     da2:	5a 07       	cpc	r21, r26
     da4:	10 f0       	brcs	.+4      	; 0xdaa <__pack_f+0x10e>
     da6:	e1 e0       	ldi	r30, 0x01	; 1
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	79 01       	movw	r14, r18
     dac:	8a 01       	movw	r16, r20
     dae:	27 c0       	rjmp	.+78     	; 0xdfe <__pack_f+0x162>
     db0:	60 38       	cpi	r22, 0x80	; 128
     db2:	71 05       	cpc	r23, r1
     db4:	64 f5       	brge	.+88     	; 0xe0e <__pack_f+0x172>
     db6:	fb 01       	movw	r30, r22
     db8:	e1 58       	subi	r30, 0x81	; 129
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	d8 01       	movw	r26, r16
     dbe:	c7 01       	movw	r24, r14
     dc0:	8f 77       	andi	r24, 0x7F	; 127
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	a0 70       	andi	r26, 0x00	; 0
     dc6:	b0 70       	andi	r27, 0x00	; 0
     dc8:	80 34       	cpi	r24, 0x40	; 64
     dca:	91 05       	cpc	r25, r1
     dcc:	a1 05       	cpc	r26, r1
     dce:	b1 05       	cpc	r27, r1
     dd0:	39 f4       	brne	.+14     	; 0xde0 <__pack_f+0x144>
     dd2:	e7 fe       	sbrs	r14, 7
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <__pack_f+0x154>
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <__pack_f+0x14c>
     de0:	8f e3       	ldi	r24, 0x3F	; 63
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 0e       	add	r14, r24
     dea:	f9 1e       	adc	r15, r25
     dec:	0a 1f       	adc	r16, r26
     dee:	1b 1f       	adc	r17, r27
     df0:	17 ff       	sbrs	r17, 7
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <__pack_f+0x162>
     df4:	16 95       	lsr	r17
     df6:	07 95       	ror	r16
     df8:	f7 94       	ror	r15
     dfa:	e7 94       	ror	r14
     dfc:	31 96       	adiw	r30, 0x01	; 1
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	16 95       	lsr	r17
     e02:	07 95       	ror	r16
     e04:	f7 94       	ror	r15
     e06:	e7 94       	ror	r14
     e08:	8a 95       	dec	r24
     e0a:	d1 f7       	brne	.-12     	; 0xe00 <__pack_f+0x164>
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__pack_f+0x17c>
     e0e:	ee 24       	eor	r14, r14
     e10:	ff 24       	eor	r15, r15
     e12:	87 01       	movw	r16, r14
     e14:	ef ef       	ldi	r30, 0xFF	; 255
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	6e 2f       	mov	r22, r30
     e1a:	67 95       	ror	r22
     e1c:	66 27       	eor	r22, r22
     e1e:	67 95       	ror	r22
     e20:	90 2f       	mov	r25, r16
     e22:	9f 77       	andi	r25, 0x7F	; 127
     e24:	d7 94       	ror	r13
     e26:	dd 24       	eor	r13, r13
     e28:	d7 94       	ror	r13
     e2a:	8e 2f       	mov	r24, r30
     e2c:	86 95       	lsr	r24
     e2e:	49 2f       	mov	r20, r25
     e30:	46 2b       	or	r20, r22
     e32:	58 2f       	mov	r21, r24
     e34:	5d 29       	or	r21, r13
     e36:	b7 01       	movw	r22, r14
     e38:	ca 01       	movw	r24, r20
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	08 95       	ret

00000e46 <__unpack_f>:
     e46:	fc 01       	movw	r30, r24
     e48:	db 01       	movw	r26, r22
     e4a:	40 81       	ld	r20, Z
     e4c:	51 81       	ldd	r21, Z+1	; 0x01
     e4e:	22 81       	ldd	r18, Z+2	; 0x02
     e50:	62 2f       	mov	r22, r18
     e52:	6f 77       	andi	r22, 0x7F	; 127
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	22 1f       	adc	r18, r18
     e58:	22 27       	eor	r18, r18
     e5a:	22 1f       	adc	r18, r18
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	89 2f       	mov	r24, r25
     e60:	88 0f       	add	r24, r24
     e62:	82 2b       	or	r24, r18
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	99 1f       	adc	r25, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	99 1f       	adc	r25, r25
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	9c 93       	st	X, r25
     e72:	11 97       	sbiw	r26, 0x01	; 1
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	a9 f5       	brne	.+106    	; 0xee4 <__unpack_f+0x9e>
     e7a:	41 15       	cp	r20, r1
     e7c:	51 05       	cpc	r21, r1
     e7e:	61 05       	cpc	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	11 f4       	brne	.+4      	; 0xe88 <__unpack_f+0x42>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	37 c0       	rjmp	.+110    	; 0xef6 <__unpack_f+0xb0>
     e88:	82 e8       	ldi	r24, 0x82	; 130
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	13 96       	adiw	r26, 0x03	; 3
     e8e:	9c 93       	st	X, r25
     e90:	8e 93       	st	-X, r24
     e92:	12 97       	sbiw	r26, 0x02	; 2
     e94:	9a 01       	movw	r18, r20
     e96:	ab 01       	movw	r20, r22
     e98:	67 e0       	ldi	r22, 0x07	; 7
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	6a 95       	dec	r22
     ea4:	d1 f7       	brne	.-12     	; 0xe9a <__unpack_f+0x54>
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	8c 93       	st	X, r24
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <__unpack_f+0x80>
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	44 1f       	adc	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	8d 91       	ld	r24, X+
     eb8:	9c 91       	ld	r25, X
     eba:	13 97       	sbiw	r26, 0x03	; 3
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	20 30       	cpi	r18, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	38 07       	cpc	r19, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	48 07       	cpc	r20, r24
     ed0:	80 e4       	ldi	r24, 0x40	; 64
     ed2:	58 07       	cpc	r21, r24
     ed4:	58 f3       	brcs	.-42     	; 0xeac <__unpack_f+0x66>
     ed6:	14 96       	adiw	r26, 0x04	; 4
     ed8:	2d 93       	st	X+, r18
     eda:	3d 93       	st	X+, r19
     edc:	4d 93       	st	X+, r20
     ede:	5c 93       	st	X, r21
     ee0:	17 97       	sbiw	r26, 0x07	; 7
     ee2:	08 95       	ret
     ee4:	2f 3f       	cpi	r18, 0xFF	; 255
     ee6:	31 05       	cpc	r19, r1
     ee8:	79 f4       	brne	.+30     	; 0xf08 <__unpack_f+0xc2>
     eea:	41 15       	cp	r20, r1
     eec:	51 05       	cpc	r21, r1
     eee:	61 05       	cpc	r22, r1
     ef0:	71 05       	cpc	r23, r1
     ef2:	19 f4       	brne	.+6      	; 0xefa <__unpack_f+0xb4>
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	8c 93       	st	X, r24
     ef8:	08 95       	ret
     efa:	64 ff       	sbrs	r22, 4
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <__unpack_f+0xbe>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	8c 93       	st	X, r24
     f02:	12 c0       	rjmp	.+36     	; 0xf28 <__unpack_f+0xe2>
     f04:	1c 92       	st	X, r1
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <__unpack_f+0xe2>
     f08:	2f 57       	subi	r18, 0x7F	; 127
     f0a:	30 40       	sbci	r19, 0x00	; 0
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	3c 93       	st	X, r19
     f10:	2e 93       	st	-X, r18
     f12:	12 97       	sbiw	r26, 0x02	; 2
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	8c 93       	st	X, r24
     f18:	87 e0       	ldi	r24, 0x07	; 7
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	8a 95       	dec	r24
     f24:	d1 f7       	brne	.-12     	; 0xf1a <__unpack_f+0xd4>
     f26:	70 64       	ori	r23, 0x40	; 64
     f28:	14 96       	adiw	r26, 0x04	; 4
     f2a:	4d 93       	st	X+, r20
     f2c:	5d 93       	st	X+, r21
     f2e:	6d 93       	st	X+, r22
     f30:	7c 93       	st	X, r23
     f32:	17 97       	sbiw	r26, 0x07	; 7
     f34:	08 95       	ret

00000f36 <__fpcmp_parts_f>:
     f36:	1f 93       	push	r17
     f38:	dc 01       	movw	r26, r24
     f3a:	fb 01       	movw	r30, r22
     f3c:	9c 91       	ld	r25, X
     f3e:	92 30       	cpi	r25, 0x02	; 2
     f40:	08 f4       	brcc	.+2      	; 0xf44 <__fpcmp_parts_f+0xe>
     f42:	47 c0       	rjmp	.+142    	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f44:	80 81       	ld	r24, Z
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	08 f4       	brcc	.+2      	; 0xf4c <__fpcmp_parts_f+0x16>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f4c:	94 30       	cpi	r25, 0x04	; 4
     f4e:	51 f4       	brne	.+20     	; 0xf64 <__fpcmp_parts_f+0x2e>
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	1c 91       	ld	r17, X
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	99 f5       	brne	.+102    	; 0xfbe <__fpcmp_parts_f+0x88>
     f58:	81 81       	ldd	r24, Z+1	; 0x01
     f5a:	68 2f       	mov	r22, r24
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	61 1b       	sub	r22, r17
     f60:	71 09       	sbc	r23, r1
     f62:	3f c0       	rjmp	.+126    	; 0xfe2 <__fpcmp_parts_f+0xac>
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	21 f0       	breq	.+8      	; 0xf70 <__fpcmp_parts_f+0x3a>
     f68:	92 30       	cpi	r25, 0x02	; 2
     f6a:	31 f4       	brne	.+12     	; 0xf78 <__fpcmp_parts_f+0x42>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	b9 f1       	breq	.+110    	; 0xfde <__fpcmp_parts_f+0xa8>
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	89 f1       	breq	.+98     	; 0xfd8 <__fpcmp_parts_f+0xa2>
     f76:	2d c0       	rjmp	.+90     	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	1c 91       	ld	r17, X
     f7c:	11 97       	sbiw	r26, 0x01	; 1
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	f1 f0       	breq	.+60     	; 0xfbe <__fpcmp_parts_f+0x88>
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	18 17       	cp	r17, r24
     f86:	d9 f4       	brne	.+54     	; 0xfbe <__fpcmp_parts_f+0x88>
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	2d 91       	ld	r18, X+
     f8c:	3c 91       	ld	r19, X
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	94 f0       	brlt	.+36     	; 0xfbe <__fpcmp_parts_f+0x88>
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	bc f0       	brlt	.+46     	; 0xfce <__fpcmp_parts_f+0x98>
     fa0:	14 96       	adiw	r26, 0x04	; 4
     fa2:	8d 91       	ld	r24, X+
     fa4:	9d 91       	ld	r25, X+
     fa6:	0d 90       	ld	r0, X+
     fa8:	bc 91       	ld	r27, X
     faa:	a0 2d       	mov	r26, r0
     fac:	24 81       	ldd	r18, Z+4	; 0x04
     fae:	35 81       	ldd	r19, Z+5	; 0x05
     fb0:	46 81       	ldd	r20, Z+6	; 0x06
     fb2:	57 81       	ldd	r21, Z+7	; 0x07
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	4a 07       	cpc	r20, r26
     fba:	5b 07       	cpc	r21, r27
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <__fpcmp_parts_f+0x8e>
     fbe:	11 23       	and	r17, r17
     fc0:	41 f0       	breq	.+16     	; 0xfd2 <__fpcmp_parts_f+0x9c>
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <__fpcmp_parts_f+0xa2>
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	a4 07       	cpc	r26, r20
     fca:	b5 07       	cpc	r27, r21
     fcc:	40 f4       	brcc	.+16     	; 0xfde <__fpcmp_parts_f+0xa8>
     fce:	11 23       	and	r17, r17
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <__fpcmp_parts_f+0xa2>
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <__fpcmp_parts_f+0xac>
     fd8:	6f ef       	ldi	r22, 0xFF	; 255
     fda:	7f ef       	ldi	r23, 0xFF	; 255
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <__fpcmp_parts_f+0xac>
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	cb 01       	movw	r24, r22
     fe4:	1f 91       	pop	r17
     fe6:	08 95       	ret

00000fe8 <PWM_Init>:
void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr);

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <PWM_Init+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <PWM_Init+0x8>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Tmr_Channel) {
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	80 81       	ld	r24, Z
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3c 83       	std	Y+4, r19	; 0x04
    1004:	2b 83       	std	Y+3, r18	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	54 f4       	brge	.+20     	; 0x1024 <PWM_Init+0x3c>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	21 30       	cpi	r18, 0x01	; 1
    1016:	31 05       	cpc	r19, r1
    1018:	84 f4       	brge	.+32     	; 0x103a <PWM_Init+0x52>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	39 f0       	breq	.+14     	; 0x1030 <PWM_Init+0x48>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <PWM_Init+0x64>
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	3c 81       	ldd	r19, Y+4	; 0x04
    1028:	23 30       	cpi	r18, 0x03	; 3
    102a:	31 05       	cpc	r19, r1
    102c:	59 f0       	breq	.+22     	; 0x1044 <PWM_Init+0x5c>
    102e:	0e c0       	rjmp	.+28     	; 0x104c <PWM_Init+0x64>
		case PWM_TIMER_0_CHANNEL: PWM_InitTimer0(Config_Ptr); break;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	0e 94 4d 0a 	call	0x149a	; 0x149a <PWM_InitTimer0>
    1038:	09 c0       	rjmp	.+18     	; 0x104c <PWM_Init+0x64>
		case PWM_TIMER_1_CHANNEL_A:
		case PWM_TIMER_1_CHANNEL_B: PWM_InitTimer1(Config_Ptr); break;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	0e 94 46 0b 	call	0x168c	; 0x168c <PWM_InitTimer1>
    1042:	04 c0       	rjmp	.+8      	; 0x104c <PWM_Init+0x64>
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <PWM_InitTimer2>
		default: break;
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <PWM_SetDuty>:

void PWM_SetDuty(PWM_ChannelType Tmr_Channel, PWM_OutputStateType State, uint16 Duty_Percent) {
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	2e 97       	sbiw	r28, 0x0e	; 14
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	6a 83       	std	Y+2, r22	; 0x02
    107e:	5c 83       	std	Y+4, r21	; 0x04
    1080:	4b 83       	std	Y+3, r20	; 0x03
	switch (Tmr_Channel) {
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3e 87       	std	Y+14, r19	; 0x0e
    108a:	2d 87       	std	Y+13, r18	; 0x0d
    108c:	4d 85       	ldd	r20, Y+13	; 0x0d
    108e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1090:	41 30       	cpi	r20, 0x01	; 1
    1092:	51 05       	cpc	r21, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <PWM_SetDuty+0x3e>
    1096:	87 c0       	rjmp	.+270    	; 0x11a6 <PWM_SetDuty+0x14c>
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	91 05       	cpc	r25, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <PWM_SetDuty+0x52>
    10a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    10a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	71 f0       	breq	.+28     	; 0x10c6 <PWM_SetDuty+0x6c>
    10aa:	e8 c1       	rjmp	.+976    	; 0x147c <PWM_SetDuty+0x422>
    10ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <PWM_SetDuty+0x5e>
    10b6:	f5 c0       	rjmp	.+490    	; 0x12a2 <PWM_SetDuty+0x248>
    10b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    10ba:	5e 85       	ldd	r21, Y+14	; 0x0e
    10bc:	43 30       	cpi	r20, 0x03	; 3
    10be:	51 05       	cpc	r21, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <PWM_SetDuty+0x6a>
    10c2:	6d c1       	rjmp	.+730    	; 0x139e <PWM_SetDuty+0x344>
    10c4:	db c1       	rjmp	.+950    	; 0x147c <PWM_SetDuty+0x422>
		case PWM_TIMER_0_CHANNEL:
			switch (State) {
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	e8 2f       	mov	r30, r24
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	fc 87       	std	Y+12, r31	; 0x0c
    10ce:	eb 87       	std	Y+11, r30	; 0x0b
    10d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    10d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    10d4:	21 15       	cp	r18, r1
    10d6:	31 05       	cpc	r19, r1
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <PWM_SetDuty+0x8c>
    10da:	4b 85       	ldd	r20, Y+11	; 0x0b
    10dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    10de:	41 30       	cpi	r20, 0x01	; 1
    10e0:	51 05       	cpc	r21, r1
    10e2:	79 f1       	breq	.+94     	; 0x1142 <PWM_SetDuty+0xe8>
    10e4:	cb c1       	rjmp	.+918    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)(Duty_Percent * PWM_TIMER_0_RESOLUTION / 100.0); break;
    10e6:	0c e5       	ldi	r16, 0x5C	; 92
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	4b 81       	ldd	r20, Y+3	; 0x03
    10ec:	5c 81       	ldd	r21, Y+4	; 0x04
    10ee:	ca 01       	movw	r24, r20
    10f0:	9c 01       	movw	r18, r24
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	c9 01       	movw	r24, r18
    10f8:	96 95       	lsr	r25
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 27       	eor	r24, r24
    10fe:	97 95       	ror	r25
    1100:	87 95       	ror	r24
    1102:	82 1b       	sub	r24, r18
    1104:	93 0b       	sbc	r25, r19
    1106:	84 0f       	add	r24, r20
    1108:	95 1f       	adc	r25, r21
    110a:	cc 01       	movw	r24, r24
    110c:	a0 e0       	ldi	r26, 0x00	; 0
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	bc 01       	movw	r22, r24
    111e:	cd 01       	movw	r24, r26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	48 ec       	ldi	r20, 0xC8	; 200
    1126:	52 e4       	ldi	r21, 0x42	; 66
    1128:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	f8 01       	movw	r30, r16
    113e:	80 83       	st	Z, r24
    1140:	9d c1       	rjmp	.+826    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    1142:	0c e5       	ldi	r16, 0x5C	; 92
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	cc 01       	movw	r24, r24
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	88 ec       	ldi	r24, 0xC8	; 200
    1162:	92 e4       	ldi	r25, 0x42	; 66
    1164:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	53 e4       	ldi	r21, 0x43	; 67
    1178:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	48 ec       	ldi	r20, 0xC8	; 200
    118a:	52 e4       	ldi	r21, 0x42	; 66
    118c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	f8 01       	movw	r30, r16
    11a2:	80 83       	st	Z, r24
    11a4:	6b c1       	rjmp	.+726    	; 0x147c <PWM_SetDuty+0x422>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_A:
			switch (State) {
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3a 87       	std	Y+10, r19	; 0x0a
    11ae:	29 87       	std	Y+9, r18	; 0x09
    11b0:	49 85       	ldd	r20, Y+9	; 0x09
    11b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    11b4:	41 15       	cp	r20, r1
    11b6:	51 05       	cpc	r21, r1
    11b8:	31 f0       	breq	.+12     	; 0x11c6 <PWM_SetDuty+0x16c>
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <PWM_SetDuty+0x1c6>
    11c4:	5b c1       	rjmp	.+694    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)(Duty_Percent * gu16_PWM_TimerTopValue / 100.0); break;
    11c6:	0a e4       	ldi	r16, 0x4A	; 74
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	20 91 f6 01 	lds	r18, 0x01F6
    11ce:	30 91 f7 01 	lds	r19, 0x01F7
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	fc 01       	movw	r30, r24
    11d8:	2e 9f       	mul	r18, r30
    11da:	c0 01       	movw	r24, r0
    11dc:	2f 9f       	mul	r18, r31
    11de:	90 0d       	add	r25, r0
    11e0:	3e 9f       	mul	r19, r30
    11e2:	90 0d       	add	r25, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	cc 01       	movw	r24, r24
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	48 ec       	ldi	r20, 0xC8	; 200
    1202:	52 e4       	ldi	r21, 0x42	; 66
    1204:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	f8 01       	movw	r30, r16
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
    121e:	2e c1       	rjmp	.+604    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((100.0 - Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1220:	0f 2e       	mov	r0, r31
    1222:	fa e4       	ldi	r31, 0x4A	; 74
    1224:	cf 2e       	mov	r12, r31
    1226:	dd 24       	eor	r13, r13
    1228:	f0 2d       	mov	r31, r0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	cc 01       	movw	r24, r24
    1230:	a0 e0       	ldi	r26, 0x00	; 0
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	88 ec       	ldi	r24, 0xC8	; 200
    1246:	92 e4       	ldi	r25, 0x42	; 66
    1248:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	7c 01       	movw	r14, r24
    1252:	8d 01       	movw	r16, r26
    1254:	80 91 f6 01 	lds	r24, 0x01F6
    1258:	90 91 f7 01 	lds	r25, 0x01F7
    125c:	cc 01       	movw	r24, r24
    125e:	a0 e0       	ldi	r26, 0x00	; 0
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	c8 01       	movw	r24, r16
    1270:	b7 01       	movw	r22, r14
    1272:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	48 ec       	ldi	r20, 0xC8	; 200
    1284:	52 e4       	ldi	r21, 0x42	; 66
    1286:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	f6 01       	movw	r30, r12
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
    12a0:	ed c0       	rjmp	.+474    	; 0x147c <PWM_SetDuty+0x422>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (State) {
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	38 87       	std	Y+8, r19	; 0x08
    12aa:	2f 83       	std	Y+7, r18	; 0x07
    12ac:	4f 81       	ldd	r20, Y+7	; 0x07
    12ae:	58 85       	ldd	r21, Y+8	; 0x08
    12b0:	41 15       	cp	r20, r1
    12b2:	51 05       	cpc	r21, r1
    12b4:	31 f0       	breq	.+12     	; 0x12c2 <PWM_SetDuty+0x268>
    12b6:	8f 81       	ldd	r24, Y+7	; 0x07
    12b8:	98 85       	ldd	r25, Y+8	; 0x08
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	71 f1       	breq	.+92     	; 0x131c <PWM_SetDuty+0x2c2>
    12c0:	dd c0       	rjmp	.+442    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)(Duty_Percent * gu16_PWM_TimerTopValue / 100.0); break;
    12c2:	08 e4       	ldi	r16, 0x48	; 72
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	20 91 f6 01 	lds	r18, 0x01F6
    12ca:	30 91 f7 01 	lds	r19, 0x01F7
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	fc 01       	movw	r30, r24
    12d4:	2e 9f       	mul	r18, r30
    12d6:	c0 01       	movw	r24, r0
    12d8:	2f 9f       	mul	r18, r31
    12da:	90 0d       	add	r25, r0
    12dc:	3e 9f       	mul	r19, r30
    12de:	90 0d       	add	r25, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	cc 01       	movw	r24, r24
    12e4:	a0 e0       	ldi	r26, 0x00	; 0
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	48 ec       	ldi	r20, 0xC8	; 200
    12fe:	52 e4       	ldi	r21, 0x42	; 66
    1300:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	f8 01       	movw	r30, r16
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	b0 c0       	rjmp	.+352    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((100.0 - Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    131c:	0f 2e       	mov	r0, r31
    131e:	f8 e4       	ldi	r31, 0x48	; 72
    1320:	cf 2e       	mov	r12, r31
    1322:	dd 24       	eor	r13, r13
    1324:	f0 2d       	mov	r31, r0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	cc 01       	movw	r24, r24
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	92 e4       	ldi	r25, 0x42	; 66
    1344:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	7c 01       	movw	r14, r24
    134e:	8d 01       	movw	r16, r26
    1350:	80 91 f6 01 	lds	r24, 0x01F6
    1354:	90 91 f7 01 	lds	r25, 0x01F7
    1358:	cc 01       	movw	r24, r24
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	c8 01       	movw	r24, r16
    136c:	b7 01       	movw	r22, r14
    136e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	48 ec       	ldi	r20, 0xC8	; 200
    1380:	52 e4       	ldi	r21, 0x42	; 66
    1382:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	f6 01       	movw	r30, r12
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
    139c:	6f c0       	rjmp	.+222    	; 0x147c <PWM_SetDuty+0x422>
				default: break;
			}
			break;
		case PWM_TIMER_2_CHANNEL:
			switch (State) {
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3e 83       	std	Y+6, r19	; 0x06
    13a6:	2d 83       	std	Y+5, r18	; 0x05
    13a8:	4d 81       	ldd	r20, Y+5	; 0x05
    13aa:	5e 81       	ldd	r21, Y+6	; 0x06
    13ac:	41 15       	cp	r20, r1
    13ae:	51 05       	cpc	r21, r1
    13b0:	31 f0       	breq	.+12     	; 0x13be <PWM_SetDuty+0x364>
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	79 f1       	breq	.+94     	; 0x141a <PWM_SetDuty+0x3c0>
    13bc:	5f c0       	rjmp	.+190    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)(Duty_Percent * PWM_TIMER_2_RESOLUTION / 100.0); break;
    13be:	03 e4       	ldi	r16, 0x43	; 67
    13c0:	10 e0       	ldi	r17, 0x00	; 0
    13c2:	4b 81       	ldd	r20, Y+3	; 0x03
    13c4:	5c 81       	ldd	r21, Y+4	; 0x04
    13c6:	ca 01       	movw	r24, r20
    13c8:	9c 01       	movw	r18, r24
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	c9 01       	movw	r24, r18
    13d0:	96 95       	lsr	r25
    13d2:	98 2f       	mov	r25, r24
    13d4:	88 27       	eor	r24, r24
    13d6:	97 95       	ror	r25
    13d8:	87 95       	ror	r24
    13da:	82 1b       	sub	r24, r18
    13dc:	93 0b       	sbc	r25, r19
    13de:	84 0f       	add	r24, r20
    13e0:	95 1f       	adc	r25, r21
    13e2:	cc 01       	movw	r24, r24
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	48 ec       	ldi	r20, 0xC8	; 200
    13fe:	52 e4       	ldi	r21, 0x42	; 66
    1400:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	f8 01       	movw	r30, r16
    1416:	80 83       	st	Z, r24
    1418:	31 c0       	rjmp	.+98     	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    141a:	03 e4       	ldi	r16, 0x43	; 67
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	cc 01       	movw	r24, r24
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1430:	9b 01       	movw	r18, r22
    1432:	ac 01       	movw	r20, r24
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	88 ec       	ldi	r24, 0xC8	; 200
    143a:	92 e4       	ldi	r25, 0x42	; 66
    143c:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	53 e4       	ldi	r21, 0x43	; 67
    1450:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	48 ec       	ldi	r20, 0xC8	; 200
    1462:	52 e4       	ldi	r21, 0x42	; 66
    1464:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	bc 01       	movw	r22, r24
    146e:	cd 01       	movw	r24, r26
    1470:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	f8 01       	movw	r30, r16
    147a:	80 83       	st	Z, r24
				default: break;
			}
			break;
		default: break;
	}
}
    147c:	2e 96       	adiw	r28, 0x0e	; 14
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	08 95       	ret

0000149a <PWM_InitTimer0>:

/************************************************************************/
/*				Private Functions Implementations                       */
/************************************************************************/
void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr) {
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <PWM_InitTimer0+0xa>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <PWM_InitTimer0+0xc>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <PWM_InitTimer0+0xe>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
	/* Make PB3=OC0 as output */
	// DIO_SetPinDirection(DIO_PORT_B, DIO_PIN_3, DIO_OUTPUT);
	SET_BIT(*PORTB_DIR_REG, 3U);
    14b0:	a7 e3       	ldi	r26, 0x37	; 55
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e7 e3       	ldi	r30, 0x37	; 55
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	88 60       	ori	r24, 0x08	; 8
    14bc:	8c 93       	st	X, r24
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
    14be:	e3 e5       	ldi	r30, 0x53	; 83
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	10 82       	st	Z, r1
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
    14c4:	a3 e5       	ldi	r26, 0x53	; 83
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e3 e5       	ldi	r30, 0x53	; 83
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	90 81       	ld	r25, Z
    14ce:	e9 81       	ldd	r30, Y+1	; 0x01
    14d0:	fa 81       	ldd	r31, Y+2	; 0x02
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
    14d4:	88 0f       	add	r24, r24
    14d6:	88 0f       	add	r24, r24
    14d8:	88 0f       	add	r24, r24
    14da:	89 2b       	or	r24, r25
    14dc:	80 64       	ori	r24, 0x40	; 64
    14de:	8c 93       	st	X, r24
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
    14e0:	a3 e5       	ldi	r26, 0x53	; 83
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e3 e5       	ldi	r30, 0x53	; 83
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	90 81       	ld	r25, Z
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	83 81       	ldd	r24, Z+3	; 0x03
    14f0:	82 95       	swap	r24
    14f2:	80 7f       	andi	r24, 0xF0	; 240
    14f4:	89 2b       	or	r24, r25
    14f6:	80 62       	ori	r24, 0x20	; 32
    14f8:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	2d 83       	std	Y+5, r18	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	91 05       	cpc	r25, r1
    1510:	f1 f0       	breq	.+60     	; 0x154e <PWM_InitTimer0+0xb4>
    1512:	ed 81       	ldd	r30, Y+5	; 0x05
    1514:	fe 81       	ldd	r31, Y+6	; 0x06
    1516:	e5 30       	cpi	r30, 0x05	; 5
    1518:	f1 05       	cpc	r31, r1
    151a:	3c f4       	brge	.+14     	; 0x152a <PWM_InitTimer0+0x90>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	00 96       	adiw	r24, 0x00	; 0
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	50 f5       	brcc	.+84     	; 0x157c <PWM_InitTimer0+0xe2>
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <PWM_InitTimer0+0x9e>
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	06 97       	sbiw	r24, 0x06	; 6
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	18 f5       	brcc	.+70     	; 0x157c <PWM_InitTimer0+0xe2>
    1536:	17 c0       	rjmp	.+46     	; 0x1566 <PWM_InitTimer0+0xcc>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    1538:	a3 e5       	ldi	r26, 0x53	; 83
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e3 e5       	ldi	r30, 0x53	; 83
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	90 81       	ld	r25, Z
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	89 2b       	or	r24, r25
    154a:	8c 93       	st	X, r24
    154c:	17 c0       	rjmp	.+46     	; 0x157c <PWM_InitTimer0+0xe2>
		case PWM_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
    154e:	a3 e5       	ldi	r26, 0x53	; 83
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e3 e5       	ldi	r30, 0x53	; 83
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	90 81       	ld	r25, Z
    1558:	e9 81       	ldd	r30, Y+1	; 0x01
    155a:	fa 81       	ldd	r31, Y+2	; 0x02
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	81 50       	subi	r24, 0x01	; 1
    1560:	89 2b       	or	r24, r25
    1562:	8c 93       	st	X, r24
    1564:	0b c0       	rjmp	.+22     	; 0x157c <PWM_InitTimer0+0xe2>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    1566:	a3 e5       	ldi	r26, 0x53	; 83
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e3 e5       	ldi	r30, 0x53	; 83
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	90 81       	ld	r25, Z
    1570:	e9 81       	ldd	r30, Y+1	; 0x01
    1572:	fa 81       	ldd	r31, Y+2	; 0x02
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	82 50       	subi	r24, 0x02	; 2
    1578:	89 2b       	or	r24, r25
    157a:	8c 93       	st	X, r24
		default: break;
	}
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
    157c:	ec e5       	ldi	r30, 0x5C	; 92
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
	switch (Config_Ptr->State) {
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	83 81       	ldd	r24, Z+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	31 f0       	breq	.+12     	; 0x15a4 <PWM_InitTimer0+0x10a>
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	e1 30       	cpi	r30, 0x01	; 1
    159e:	f1 05       	cpc	r31, r1
    15a0:	91 f1       	breq	.+100    	; 0x1606 <PWM_InitTimer0+0x16c>
    15a2:	66 c0       	rjmp	.+204    	; 0x1670 <PWM_InitTimer0+0x1d6>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    15a4:	0c e5       	ldi	r16, 0x5C	; 92
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	80 85       	ldd	r24, Z+8	; 0x08
    15ae:	48 2f       	mov	r20, r24
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	ca 01       	movw	r24, r20
    15b4:	9c 01       	movw	r18, r24
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	c9 01       	movw	r24, r18
    15bc:	96 95       	lsr	r25
    15be:	98 2f       	mov	r25, r24
    15c0:	88 27       	eor	r24, r24
    15c2:	97 95       	ror	r25
    15c4:	87 95       	ror	r24
    15c6:	82 1b       	sub	r24, r18
    15c8:	93 0b       	sbc	r25, r19
    15ca:	84 0f       	add	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	cc 01       	movw	r24, r24
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	48 ec       	ldi	r20, 0xC8	; 200
    15ea:	52 e4       	ldi	r21, 0x42	; 66
    15ec:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	80 83       	st	Z, r24
    1604:	35 c0       	rjmp	.+106    	; 0x1670 <PWM_InitTimer0+0x1d6>
		case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    1606:	0c e5       	ldi	r16, 0x5C	; 92
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	80 85       	ldd	r24, Z+8	; 0x08
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	aa 27       	eor	r26, r26
    1616:	97 fd       	sbrc	r25, 7
    1618:	a0 95       	com	r26
    161a:	ba 2f       	mov	r27, r26
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	88 ec       	ldi	r24, 0xC8	; 200
    162e:	92 e4       	ldi	r25, 0x42	; 66
    1630:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	48 ec       	ldi	r20, 0xC8	; 200
    1656:	52 e4       	ldi	r21, 0x42	; 66
    1658:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	80 83       	st	Z, r24
		default: break;
	}
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
    1670:	e2 e5       	ldi	r30, 0x52	; 82
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
}
    1676:	26 96       	adiw	r28, 0x06	; 6
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <PWM_InitTimer1>:

void PWM_InitTimer1(const PWM_ConfigurationType* Config_Ptr) {
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	2e 97       	sbiw	r28, 0x0e	; 14
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
	/* Make PD5=OC1A or PD4=OC1B as output */
	switch (Config_Ptr->Tmr_Channel) {
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3e 87       	std	Y+14, r19	; 0x0e
    16bc:	2d 87       	std	Y+13, r18	; 0x0d
    16be:	4d 85       	ldd	r20, Y+13	; 0x0d
    16c0:	5e 85       	ldd	r21, Y+14	; 0x0e
    16c2:	41 30       	cpi	r20, 0x01	; 1
    16c4:	51 05       	cpc	r21, r1
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <PWM_InitTimer1+0x48>
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	91 05       	cpc	r25, r1
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <PWM_InitTimer1+0x58>
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <PWM_InitTimer1+0x66>
		case PWM_TIMER_1_CHANNEL_A:
			//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_5, DIO_OUTPUT);
			SET_BIT(*PORTD_DIR_REG, 5U);
    16d4:	a1 e3       	ldi	r26, 0x31	; 49
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 62       	ori	r24, 0x20	; 32
    16e0:	8c 93       	st	X, r24
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <PWM_InitTimer1+0x66>
			break;
		case PWM_TIMER_1_CHANNEL_B:
			//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_4, DIO_OUTPUT);
			SET_BIT(*PORTD_DIR_REG, 4U);
    16e4:	a1 e3       	ldi	r26, 0x31	; 49
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e1 e3       	ldi	r30, 0x31	; 49
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 61       	ori	r24, 0x10	; 16
    16f0:	8c 93       	st	X, r24
			break;
		default: break;
	}
	/* Clear TCCR1A and TCCR1B Register Configurations */
	*TIMER1_CTRL_REG_A = 0x00U;
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
	*TIMER1_CTRL_REG_B = 0x00U;
    16f8:	ee e4       	ldi	r30, 0x4E	; 78
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
	/* Set PWM Mode */
	*TIMER1_CTRL_REG_A |= (0x02U);
    16fe:	af e4       	ldi	r26, 0x4F	; 79
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ef e4       	ldi	r30, 0x4F	; 79
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	82 60       	ori	r24, 0x02	; 2
    170a:	8c 93       	st	X, r24
	*TIMER1_CTRL_REG_B |= (1U<<4U) | ((Config_Ptr->Mode)<<PWM_TIMER_1_FAST_BIT);
    170c:	ae e4       	ldi	r26, 0x4E	; 78
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ee e4       	ldi	r30, 0x4E	; 78
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	90 81       	ld	r25, Z
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	81 81       	ldd	r24, Z+1	; 0x01
    171c:	88 0f       	add	r24, r24
    171e:	88 0f       	add	r24, r24
    1720:	88 0f       	add	r24, r24
    1722:	89 2b       	or	r24, r25
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	8c 93       	st	X, r24
	/* Set Output State and Channel OC1A or OC1B */
	switch (Config_Ptr->Tmr_Channel) {
    1728:	e9 81       	ldd	r30, Y+1	; 0x01
    172a:	fa 81       	ldd	r31, Y+2	; 0x02
    172c:	80 81       	ld	r24, Z
    172e:	e8 2f       	mov	r30, r24
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	fc 87       	std	Y+12, r31	; 0x0c
    1734:	eb 87       	std	Y+11, r30	; 0x0b
    1736:	2b 85       	ldd	r18, Y+11	; 0x0b
    1738:	3c 85       	ldd	r19, Y+12	; 0x0c
    173a:	21 30       	cpi	r18, 0x01	; 1
    173c:	31 05       	cpc	r19, r1
    173e:	31 f0       	breq	.+12     	; 0x174c <PWM_InitTimer1+0xc0>
    1740:	4b 85       	ldd	r20, Y+11	; 0x0b
    1742:	5c 85       	ldd	r21, Y+12	; 0x0c
    1744:	42 30       	cpi	r20, 0x02	; 2
    1746:	51 05       	cpc	r21, r1
    1748:	81 f0       	breq	.+32     	; 0x176a <PWM_InitTimer1+0xde>
    174a:	1c c0       	rjmp	.+56     	; 0x1784 <PWM_InitTimer1+0xf8>
		case PWM_TIMER_1_CHANNEL_A:
			*TIMER1_CTRL_REG_A |= (1U<<7U) | ((Config_Ptr->State)<<PWM_TIMER_1_A_INVERTING_BIT);
    174c:	af e4       	ldi	r26, 0x4F	; 79
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ef e4       	ldi	r30, 0x4F	; 79
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	90 81       	ld	r25, Z
    1756:	e9 81       	ldd	r30, Y+1	; 0x01
    1758:	fa 81       	ldd	r31, Y+2	; 0x02
    175a:	83 81       	ldd	r24, Z+3	; 0x03
    175c:	82 95       	swap	r24
    175e:	88 0f       	add	r24, r24
    1760:	88 0f       	add	r24, r24
    1762:	80 7c       	andi	r24, 0xC0	; 192
    1764:	89 2b       	or	r24, r25
    1766:	80 68       	ori	r24, 0x80	; 128
    1768:	8c 93       	st	X, r24
		case PWM_TIMER_1_CHANNEL_B: 
			*TIMER1_CTRL_REG_A |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_1_B_INVERTING_BIT);
    176a:	af e4       	ldi	r26, 0x4F	; 79
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	ef e4       	ldi	r30, 0x4F	; 79
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	90 81       	ld	r25, Z
    1774:	e9 81       	ldd	r30, Y+1	; 0x01
    1776:	fa 81       	ldd	r31, Y+2	; 0x02
    1778:	83 81       	ldd	r24, Z+3	; 0x03
    177a:	82 95       	swap	r24
    177c:	80 7f       	andi	r24, 0xF0	; 240
    177e:	89 2b       	or	r24, r25
    1780:	80 62       	ori	r24, 0x20	; 32
    1782:	8c 93       	st	X, r24
			break;
		default: break;
	}
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	e8 2f       	mov	r30, r24
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	fa 87       	std	Y+10, r31	; 0x0a
    1790:	e9 87       	std	Y+9, r30	; 0x09
    1792:	29 85       	ldd	r18, Y+9	; 0x09
    1794:	3a 85       	ldd	r19, Y+10	; 0x0a
    1796:	24 30       	cpi	r18, 0x04	; 4
    1798:	31 05       	cpc	r19, r1
    179a:	f1 f0       	breq	.+60     	; 0x17d8 <PWM_InitTimer1+0x14c>
    179c:	49 85       	ldd	r20, Y+9	; 0x09
    179e:	5a 85       	ldd	r21, Y+10	; 0x0a
    17a0:	45 30       	cpi	r20, 0x05	; 5
    17a2:	51 05       	cpc	r21, r1
    17a4:	3c f4       	brge	.+14     	; 0x17b4 <PWM_InitTimer1+0x128>
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	00 96       	adiw	r24, 0x00	; 0
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	50 f5       	brcc	.+84     	; 0x1806 <PWM_InitTimer1+0x17a>
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <PWM_InitTimer1+0x136>
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	06 97       	sbiw	r24, 0x06	; 6
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	91 05       	cpc	r25, r1
    17be:	18 f5       	brcc	.+70     	; 0x1806 <PWM_InitTimer1+0x17a>
    17c0:	17 c0       	rjmp	.+46     	; 0x17f0 <PWM_InitTimer1+0x164>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
    17c2:	ae e4       	ldi	r26, 0x4E	; 78
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	ee e4       	ldi	r30, 0x4E	; 78
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	90 81       	ld	r25, Z
    17cc:	e9 81       	ldd	r30, Y+1	; 0x01
    17ce:	fa 81       	ldd	r31, Y+2	; 0x02
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	89 2b       	or	r24, r25
    17d4:	8c 93       	st	X, r24
    17d6:	17 c0       	rjmp	.+46     	; 0x1806 <PWM_InitTimer1+0x17a>
		case PWM_PRESCALE_64:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
    17d8:	ae e4       	ldi	r26, 0x4E	; 78
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	ee e4       	ldi	r30, 0x4E	; 78
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	90 81       	ld	r25, Z
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	81 50       	subi	r24, 0x01	; 1
    17ea:	89 2b       	or	r24, r25
    17ec:	8c 93       	st	X, r24
    17ee:	0b c0       	rjmp	.+22     	; 0x1806 <PWM_InitTimer1+0x17a>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
    17f0:	ae e4       	ldi	r26, 0x4E	; 78
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	ee e4       	ldi	r30, 0x4E	; 78
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	90 81       	ld	r25, Z
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	82 50       	subi	r24, 0x02	; 2
    1802:	89 2b       	or	r24, r25
    1804:	8c 93       	st	X, r24
		default: break;
	}
	/* Set Period through TOP Value in ICR1 Register */
	gu16_PWM_TimerTopValue = (uint16)((F_CPU * (Config_Ptr->Period_ms) / ((Config_Ptr->Prescale_Value) * 1000.0)) - 1U);
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	86 81       	ldd	r24, Z+6	; 0x06
    180c:	97 81       	ldd	r25, Z+7	; 0x07
    180e:	cc 01       	movw	r24, r24
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	34 e2       	ldi	r19, 0x24	; 36
    1818:	44 ef       	ldi	r20, 0xF4	; 244
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1830:	7b 01       	movw	r14, r22
    1832:	8c 01       	movw	r16, r24
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	84 81       	ldd	r24, Z+4	; 0x04
    183a:	95 81       	ldd	r25, Z+5	; 0x05
    183c:	cc 01       	movw	r24, r24
    183e:	a0 e0       	ldi	r26, 0x00	; 0
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
    1858:	54 e4       	ldi	r21, 0x44	; 68
    185a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9c 01       	movw	r18, r24
    1864:	ad 01       	movw	r20, r26
    1866:	c8 01       	movw	r24, r16
    1868:	b7 01       	movw	r22, r14
    186a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	90 93 f7 01 	sts	0x01F7, r25
    1896:	80 93 f6 01 	sts	0x01F6, r24
	*(uint16*)TIMER1_INP_CAPT_REG_L = gu16_PWM_TimerTopValue;
    189a:	e6 e4       	ldi	r30, 0x46	; 70
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 91 f6 01 	lds	r24, 0x01F6
    18a2:	90 91 f7 01 	lds	r25, 0x01F7
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
	/* Set Duty Value in OCR1A or OCR1B Register */
	switch (Config_Ptr->Tmr_Channel) {
    18aa:	e9 81       	ldd	r30, Y+1	; 0x01
    18ac:	fa 81       	ldd	r31, Y+2	; 0x02
    18ae:	80 81       	ld	r24, Z
    18b0:	e8 2f       	mov	r30, r24
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	f8 87       	std	Y+8, r31	; 0x08
    18b6:	ef 83       	std	Y+7, r30	; 0x07
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	21 30       	cpi	r18, 0x01	; 1
    18be:	31 05       	cpc	r19, r1
    18c0:	39 f0       	breq	.+14     	; 0x18d0 <PWM_InitTimer1+0x244>
    18c2:	4f 81       	ldd	r20, Y+7	; 0x07
    18c4:	58 85       	ldd	r21, Y+8	; 0x08
    18c6:	42 30       	cpi	r20, 0x02	; 2
    18c8:	51 05       	cpc	r21, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <PWM_InitTimer1+0x242>
    18cc:	88 c0       	rjmp	.+272    	; 0x19de <PWM_InitTimer1+0x352>
    18ce:	0d c1       	rjmp	.+538    	; 0x1aea <PWM_InitTimer1+0x45e>
		case PWM_TIMER_1_CHANNEL_A:
			switch (Config_Ptr->State) {
    18d0:	e9 81       	ldd	r30, Y+1	; 0x01
    18d2:	fa 81       	ldd	r31, Y+2	; 0x02
    18d4:	83 81       	ldd	r24, Z+3	; 0x03
    18d6:	e8 2f       	mov	r30, r24
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	fe 83       	std	Y+6, r31	; 0x06
    18dc:	ed 83       	std	Y+5, r30	; 0x05
    18de:	2d 81       	ldd	r18, Y+5	; 0x05
    18e0:	3e 81       	ldd	r19, Y+6	; 0x06
    18e2:	21 15       	cp	r18, r1
    18e4:	31 05       	cpc	r19, r1
    18e6:	31 f0       	breq	.+12     	; 0x18f4 <PWM_InitTimer1+0x268>
    18e8:	4d 81       	ldd	r20, Y+5	; 0x05
    18ea:	5e 81       	ldd	r21, Y+6	; 0x06
    18ec:	41 30       	cpi	r20, 0x01	; 1
    18ee:	51 05       	cpc	r21, r1
    18f0:	89 f1       	breq	.+98     	; 0x1954 <PWM_InitTimer1+0x2c8>
    18f2:	fb c0       	rjmp	.+502    	; 0x1aea <PWM_InitTimer1+0x45e>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    18f4:	0a e4       	ldi	r16, 0x4A	; 74
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	80 85       	ldd	r24, Z+8	; 0x08
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	80 91 f6 01 	lds	r24, 0x01F6
    1906:	90 91 f7 01 	lds	r25, 0x01F7
    190a:	fc 01       	movw	r30, r24
    190c:	2e 9f       	mul	r18, r30
    190e:	c0 01       	movw	r24, r0
    1910:	2f 9f       	mul	r18, r31
    1912:	90 0d       	add	r25, r0
    1914:	3e 9f       	mul	r19, r30
    1916:	90 0d       	add	r25, r0
    1918:	11 24       	eor	r1, r1
    191a:	cc 01       	movw	r24, r24
    191c:	a0 e0       	ldi	r26, 0x00	; 0
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	bc 01       	movw	r22, r24
    192e:	cd 01       	movw	r24, r26
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	48 ec       	ldi	r20, 0xC8	; 200
    1936:	52 e4       	ldi	r21, 0x42	; 66
    1938:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	f8 01       	movw	r30, r16
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	cb c0       	rjmp	.+406    	; 0x1aea <PWM_InitTimer1+0x45e>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1954:	0f 2e       	mov	r0, r31
    1956:	fa e4       	ldi	r31, 0x4A	; 74
    1958:	cf 2e       	mov	r12, r31
    195a:	dd 24       	eor	r13, r13
    195c:	f0 2d       	mov	r31, r0
    195e:	e9 81       	ldd	r30, Y+1	; 0x01
    1960:	fa 81       	ldd	r31, Y+2	; 0x02
    1962:	80 85       	ldd	r24, Z+8	; 0x08
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	aa 27       	eor	r26, r26
    196a:	97 fd       	sbrc	r25, 7
    196c:	a0 95       	com	r26
    196e:	ba 2f       	mov	r27, r26
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1978:	9b 01       	movw	r18, r22
    197a:	ac 01       	movw	r20, r24
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	92 e4       	ldi	r25, 0x42	; 66
    1984:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	7c 01       	movw	r14, r24
    198e:	8d 01       	movw	r16, r26
    1990:	80 91 f6 01 	lds	r24, 0x01F6
    1994:	90 91 f7 01 	lds	r25, 0x01F7
    1998:	cc 01       	movw	r24, r24
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	bc 01       	movw	r22, r24
    19a0:	cd 01       	movw	r24, r26
    19a2:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
    19aa:	c8 01       	movw	r24, r16
    19ac:	b7 01       	movw	r22, r14
    19ae:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	48 ec       	ldi	r20, 0xC8	; 200
    19c0:	52 e4       	ldi	r21, 0x42	; 66
    19c2:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	f6 01       	movw	r30, r12
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	86 c0       	rjmp	.+268    	; 0x1aea <PWM_InitTimer1+0x45e>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (Config_Ptr->State) {
    19de:	e9 81       	ldd	r30, Y+1	; 0x01
    19e0:	fa 81       	ldd	r31, Y+2	; 0x02
    19e2:	83 81       	ldd	r24, Z+3	; 0x03
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	4b 81       	ldd	r20, Y+3	; 0x03
    19ee:	5c 81       	ldd	r21, Y+4	; 0x04
    19f0:	41 15       	cp	r20, r1
    19f2:	51 05       	cpc	r21, r1
    19f4:	31 f0       	breq	.+12     	; 0x1a02 <PWM_InitTimer1+0x376>
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	89 f1       	breq	.+98     	; 0x1a62 <PWM_InitTimer1+0x3d6>
    1a00:	74 c0       	rjmp	.+232    	; 0x1aea <PWM_InitTimer1+0x45e>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1a02:	08 e4       	ldi	r16, 0x48	; 72
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	80 85       	ldd	r24, Z+8	; 0x08
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	80 91 f6 01 	lds	r24, 0x01F6
    1a14:	90 91 f7 01 	lds	r25, 0x01F7
    1a18:	fc 01       	movw	r30, r24
    1a1a:	2e 9f       	mul	r18, r30
    1a1c:	c0 01       	movw	r24, r0
    1a1e:	2f 9f       	mul	r18, r31
    1a20:	90 0d       	add	r25, r0
    1a22:	3e 9f       	mul	r19, r30
    1a24:	90 0d       	add	r25, r0
    1a26:	11 24       	eor	r1, r1
    1a28:	cc 01       	movw	r24, r24
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	48 ec       	ldi	r20, 0xC8	; 200
    1a44:	52 e4       	ldi	r21, 0x42	; 66
    1a46:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	44 c0       	rjmp	.+136    	; 0x1aea <PWM_InitTimer1+0x45e>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1a62:	0f 2e       	mov	r0, r31
    1a64:	f8 e4       	ldi	r31, 0x48	; 72
    1a66:	cf 2e       	mov	r12, r31
    1a68:	dd 24       	eor	r13, r13
    1a6a:	f0 2d       	mov	r31, r0
    1a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a70:	80 85       	ldd	r24, Z+8	; 0x08
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	aa 27       	eor	r26, r26
    1a78:	97 fd       	sbrc	r25, 7
    1a7a:	a0 95       	com	r26
    1a7c:	ba 2f       	mov	r27, r26
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1a86:	9b 01       	movw	r18, r22
    1a88:	ac 01       	movw	r20, r24
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	92 e4       	ldi	r25, 0x42	; 66
    1a92:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	7c 01       	movw	r14, r24
    1a9c:	8d 01       	movw	r16, r26
    1a9e:	80 91 f6 01 	lds	r24, 0x01F6
    1aa2:	90 91 f7 01 	lds	r25, 0x01F7
    1aa6:	cc 01       	movw	r24, r24
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	c8 01       	movw	r24, r16
    1aba:	b7 01       	movw	r22, r14
    1abc:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	48 ec       	ldi	r20, 0xC8	; 200
    1ace:	52 e4       	ldi	r21, 0x42	; 66
    1ad0:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
			}
			break;
		default: break;
	}
	/* Clear TCNT1 Register Configuration */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
    1aea:	ec e4       	ldi	r30, 0x4C	; 76
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	11 82       	std	Z+1, r1	; 0x01
    1af0:	10 82       	st	Z, r1
}
    1af2:	2e 96       	adiw	r28, 0x0e	; 14
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	08 95       	ret

00001b10 <PWM_InitTimer2>:

void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr) {
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <PWM_InitTimer2+0xa>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <PWM_InitTimer2+0xc>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
	/* Make PD7=OC2 as output */
	// DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_7, DIO_OUTPUT);
	SET_BIT(*PORTD_DIR_REG, 7U);
    1b24:	a1 e3       	ldi	r26, 0x31	; 49
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e1 e3       	ldi	r30, 0x31	; 49
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 68       	ori	r24, 0x80	; 128
    1b30:	8c 93       	st	X, r24
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
    1b32:	e5 e4       	ldi	r30, 0x45	; 69
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	10 82       	st	Z, r1
	/* Set PWM Mode */
	*TIMER2_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_2_FAST_BIT);
    1b38:	a5 e4       	ldi	r26, 0x45	; 69
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e5 e4       	ldi	r30, 0x45	; 69
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	90 81       	ld	r25, Z
    1b42:	e9 81       	ldd	r30, Y+1	; 0x01
    1b44:	fa 81       	ldd	r31, Y+2	; 0x02
    1b46:	81 81       	ldd	r24, Z+1	; 0x01
    1b48:	88 0f       	add	r24, r24
    1b4a:	88 0f       	add	r24, r24
    1b4c:	88 0f       	add	r24, r24
    1b4e:	89 2b       	or	r24, r25
    1b50:	80 64       	ori	r24, 0x40	; 64
    1b52:	8c 93       	st	X, r24
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_2_INVERTING_BIT);
    1b54:	a3 e5       	ldi	r26, 0x53	; 83
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e3 e5       	ldi	r30, 0x53	; 83
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	90 81       	ld	r25, Z
    1b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b60:	fa 81       	ldd	r31, Y+2	; 0x02
    1b62:	83 81       	ldd	r24, Z+3	; 0x03
    1b64:	82 95       	swap	r24
    1b66:	80 7f       	andi	r24, 0xF0	; 240
    1b68:	89 2b       	or	r24, r25
    1b6a:	80 62       	ori	r24, 0x20	; 32
    1b6c:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_RISING_EDGE) {
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	88 30       	cpi	r24, 0x08	; 8
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <PWM_InitTimer2+0x86>
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	89 30       	cpi	r24, 0x09	; 9
    1b80:	51 f0       	breq	.+20     	; 0x1b96 <PWM_InitTimer2+0x86>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
    1b82:	a5 e4       	ldi	r26, 0x45	; 69
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e5 e4       	ldi	r30, 0x45	; 69
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	90 81       	ld	r25, Z
    1b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	89 2b       	or	r24, r25
    1b94:	8c 93       	st	X, r24
	}
	/* Set Duty Value in OCR2 Register */
	*TIMER2_CMP_REG = 0x00U;
    1b96:	e3 e4       	ldi	r30, 0x43	; 67
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	10 82       	st	Z, r1
	switch (Config_Ptr->State) {
    1b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba0:	83 81       	ldd	r24, Z+3	; 0x03
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <PWM_InitTimer2+0xae>
    1bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb6:	e1 30       	cpi	r30, 0x01	; 1
    1bb8:	f1 05       	cpc	r31, r1
    1bba:	91 f1       	breq	.+100    	; 0x1c20 <PWM_InitTimer2+0x110>
    1bbc:	66 c0       	rjmp	.+204    	; 0x1c8a <PWM_InitTimer2+0x17a>
		case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    1bbe:	03 e4       	ldi	r16, 0x43	; 67
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	80 85       	ldd	r24, Z+8	; 0x08
    1bc8:	48 2f       	mov	r20, r24
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	ca 01       	movw	r24, r20
    1bce:	9c 01       	movw	r18, r24
    1bd0:	22 0f       	add	r18, r18
    1bd2:	33 1f       	adc	r19, r19
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	96 95       	lsr	r25
    1bd8:	98 2f       	mov	r25, r24
    1bda:	88 27       	eor	r24, r24
    1bdc:	97 95       	ror	r25
    1bde:	87 95       	ror	r24
    1be0:	82 1b       	sub	r24, r18
    1be2:	93 0b       	sbc	r25, r19
    1be4:	84 0f       	add	r24, r20
    1be6:	95 1f       	adc	r25, r21
    1be8:	cc 01       	movw	r24, r24
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	48 ec       	ldi	r20, 0xC8	; 200
    1c04:	52 e4       	ldi	r21, 0x42	; 66
    1c06:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	80 83       	st	Z, r24
    1c1e:	35 c0       	rjmp	.+106    	; 0x1c8a <PWM_InitTimer2+0x17a>
		case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    1c20:	03 e4       	ldi	r16, 0x43	; 67
    1c22:	10 e0       	ldi	r17, 0x00	; 0
    1c24:	e9 81       	ldd	r30, Y+1	; 0x01
    1c26:	fa 81       	ldd	r31, Y+2	; 0x02
    1c28:	80 85       	ldd	r24, Z+8	; 0x08
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	aa 27       	eor	r26, r26
    1c30:	97 fd       	sbrc	r25, 7
    1c32:	a0 95       	com	r26
    1c34:	ba 2f       	mov	r27, r26
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1c3e:	9b 01       	movw	r18, r22
    1c40:	ac 01       	movw	r20, r24
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	88 ec       	ldi	r24, 0xC8	; 200
    1c48:	92 e4       	ldi	r25, 0x42	; 66
    1c4a:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	53 e4       	ldi	r21, 0x43	; 67
    1c5e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	48 ec       	ldi	r20, 0xC8	; 200
    1c70:	52 e4       	ldi	r21, 0x42	; 66
    1c72:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 83       	st	Z, r24
		default: break;
	}
	/* Clear TCNT2 Register Configurations */
	*TIMER2_CNTR_REG = 0x00U;
    1c8a:	e4 e4       	ldi	r30, 0x44	; 68
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	10 82       	st	Z, r1
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <PWMDrawer_Init>:
	{0x01, 0x11, 0x09, 0x1D, 0x09, 0x11, 0x00, 0x00},
	{0x10, 0x11, 0x12, 0x17, 0x12, 0x11, 0x00, 0x00},
	{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00}
};

void PWMDrawer_Init(void) {
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	#if GENERATE_PWM_FROM_SAME_MCU == 1
		GLCD_Init();
    1caa:	0e 94 3c 2c 	call	0x5878	; 0x5878 <GLCD_Init>
		GLCD_ClearDisplay();
    1cae:	0e 94 80 34 	call	0x6900	; 0x6900 <GLCD_ClearDisplay>
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
    1cb2:	8d ed       	ldi	r24, 0xDD	; 221
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PWM_Init>
		ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
    1cba:	8e ee       	ldi	r24, 0xEE	; 238
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <ICU_Init>
		GLCD_ClearDisplay();
		ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
	#else
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
	#endif
}
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <PWMDrawer_MeasureSignal>:

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	2f 97       	sbiw	r28, 0x0f	; 15
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	9a 87       	std	Y+10, r25	; 0x0a
    1cde:	89 87       	std	Y+9, r24	; 0x09
	ICU_DutyCycleType strLocal_Duty = {0, 0};
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	9c 87       	std	Y+12, r25	; 0x0c
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	e6 ee       	ldi	r30, 0xE6	; 230
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	fe 87       	std	Y+14, r31	; 0x0e
    1cee:	ed 87       	std	Y+13, r30	; 0x0d
    1cf0:	f8 e0       	ldi	r31, 0x08	; 8
    1cf2:	ff 87       	std	Y+15, r31	; 0x0f
    1cf4:	ed 85       	ldd	r30, Y+13	; 0x0d
    1cf6:	fe 85       	ldd	r31, Y+14	; 0x0e
    1cf8:	00 80       	ld	r0, Z
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	9e 87       	std	Y+14, r25	; 0x0e
    1d02:	8d 87       	std	Y+13, r24	; 0x0d
    1d04:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d06:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d08:	00 82       	st	Z, r0
    1d0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	9c 87       	std	Y+12, r25	; 0x0c
    1d12:	8b 87       	std	Y+11, r24	; 0x0b
    1d14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d16:	91 50       	subi	r25, 0x01	; 1
    1d18:	9f 87       	std	Y+15, r25	; 0x0f
    1d1a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d1c:	ee 23       	and	r30, r30
    1d1e:	51 f7       	brne	.-44     	; 0x1cf4 <PWMDrawer_MeasureSignal+0x2c>
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &strLocal_Duty);
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	68 e0       	ldi	r22, 0x08	; 8
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	9e 01       	movw	r18, r28
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	0e 94 88 22 	call	0x4510	; 0x4510 <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	af 81       	ldd	r26, Y+7	; 0x07
    1d38:	b8 85       	ldd	r27, Y+8	; 0x08
    1d3a:	e9 85       	ldd	r30, Y+9	; 0x09
    1d3c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d3e:	81 87       	std	Z+9, r24	; 0x09
    1d40:	92 87       	std	Z+10, r25	; 0x0a
    1d42:	a3 87       	std	Z+11, r26	; 0x0b
    1d44:	b4 87       	std	Z+12, r27	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d4e:	e9 85       	ldd	r30, Y+9	; 0x09
    1d50:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d52:	81 83       	std	Z+1, r24	; 0x01
    1d54:	92 83       	std	Z+2, r25	; 0x02
    1d56:	a3 83       	std	Z+3, r26	; 0x03
    1d58:	b4 83       	std	Z+4, r27	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	af 81       	ldd	r26, Y+7	; 0x07
    1d60:	b8 85       	ldd	r27, Y+8	; 0x08
    1d62:	29 81       	ldd	r18, Y+1	; 0x01
    1d64:	3a 81       	ldd	r19, Y+2	; 0x02
    1d66:	4b 81       	ldd	r20, Y+3	; 0x03
    1d68:	5c 81       	ldd	r21, Y+4	; 0x04
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	e9 85       	ldd	r30, Y+9	; 0x09
    1d78:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d7a:	85 83       	std	Z+5, r24	; 0x05
    1d7c:	96 83       	std	Z+6, r25	; 0x06
    1d7e:	a7 83       	std	Z+7, r26	; 0x07
    1d80:	b0 87       	std	Z+8, r27	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
    1d82:	e9 85       	ldd	r30, Y+9	; 0x09
    1d84:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d86:	21 85       	ldd	r18, Z+9	; 0x09
    1d88:	32 85       	ldd	r19, Z+10	; 0x0a
    1d8a:	43 85       	ldd	r20, Z+11	; 0x0b
    1d8c:	54 85       	ldd	r21, Z+12	; 0x0c
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	80 e8       	ldi	r24, 0x80	; 128
    1d94:	9f e3       	ldi	r25, 0x3F	; 63
    1d96:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	e9 85       	ldd	r30, Y+9	; 0x09
    1da0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1da2:	85 87       	std	Z+13, r24	; 0x0d
    1da4:	96 87       	std	Z+14, r25	; 0x0e
    1da6:	a7 87       	std	Z+15, r26	; 0x0f
    1da8:	b0 8b       	std	Z+16, r27	; 0x10
	Signal_Data_Ptr->Duty_Percent = (uint8)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
    1daa:	e9 85       	ldd	r30, Y+9	; 0x09
    1dac:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	92 81       	ldd	r25, Z+2	; 0x02
    1db2:	a3 81       	ldd	r26, Z+3	; 0x03
    1db4:	b4 81       	ldd	r27, Z+4	; 0x04
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	48 ec       	ldi	r20, 0xC8	; 200
    1dc0:	52 e4       	ldi	r21, 0x42	; 66
    1dc2:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	e9 85       	ldd	r30, Y+9	; 0x09
    1dcc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dce:	21 85       	ldd	r18, Z+9	; 0x09
    1dd0:	32 85       	ldd	r19, Z+10	; 0x0a
    1dd2:	43 85       	ldd	r20, Z+11	; 0x0b
    1dd4:	54 85       	ldd	r21, Z+12	; 0x0c
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	e9 85       	ldd	r30, Y+9	; 0x09
    1df0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1df2:	80 83       	st	Z, r24
}
    1df4:	2f 96       	adiw	r28, 0x0f	; 15
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, float32 Scale_ms) {
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	cd 55       	subi	r28, 0x5D	; 93
    1e10:	d0 40       	sbci	r29, 0x00	; 0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ff 96       	adiw	r30, 0x3f	; 63
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	fe 01       	movw	r30, r28
    1e26:	ef 5b       	subi	r30, 0xBF	; 191
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	40 83       	st	Z, r20
    1e2c:	51 83       	std	Z+1, r21	; 0x01
    1e2e:	62 83       	std	Z+2, r22	; 0x02
    1e30:	73 83       	std	Z+3, r23	; 0x03
	GLCD_ClearDisplay();
    1e32:	0e 94 80 34 	call	0x6900	; 0x6900 <GLCD_ClearDisplay>
	/* Display Signal Data (Frequency and Duty) Values */
	GLCD_GoToLine(0);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
	char txt1[15] = "Frequency=\0";
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	03 96       	adiw	r24, 0x03	; 3
    1e40:	27 96       	adiw	r28, 0x07	; 7
    1e42:	9f af       	std	Y+63, r25	; 0x3f
    1e44:	8e af       	std	Y+62, r24	; 0x3e
    1e46:	27 97       	sbiw	r28, 0x07	; 7
    1e48:	a0 e6       	ldi	r26, 0x60	; 96
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	29 96       	adiw	r28, 0x09	; 9
    1e4e:	bf af       	std	Y+63, r27	; 0x3f
    1e50:	ae af       	std	Y+62, r26	; 0x3e
    1e52:	29 97       	sbiw	r28, 0x09	; 9
    1e54:	bc e0       	ldi	r27, 0x0C	; 12
    1e56:	2a 96       	adiw	r28, 0x0a	; 10
    1e58:	bf af       	std	Y+63, r27	; 0x3f
    1e5a:	2a 97       	sbiw	r28, 0x0a	; 10
    1e5c:	29 96       	adiw	r28, 0x09	; 9
    1e5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e60:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e62:	29 97       	sbiw	r28, 0x09	; 9
    1e64:	00 80       	ld	r0, Z
    1e66:	29 96       	adiw	r28, 0x09	; 9
    1e68:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e6c:	29 97       	sbiw	r28, 0x09	; 9
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	29 96       	adiw	r28, 0x09	; 9
    1e72:	9f af       	std	Y+63, r25	; 0x3f
    1e74:	8e af       	std	Y+62, r24	; 0x3e
    1e76:	29 97       	sbiw	r28, 0x09	; 9
    1e78:	27 96       	adiw	r28, 0x07	; 7
    1e7a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e7c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e7e:	27 97       	sbiw	r28, 0x07	; 7
    1e80:	0c 92       	st	X, r0
    1e82:	27 96       	adiw	r28, 0x07	; 7
    1e84:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e86:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e88:	27 97       	sbiw	r28, 0x07	; 7
    1e8a:	31 96       	adiw	r30, 0x01	; 1
    1e8c:	27 96       	adiw	r28, 0x07	; 7
    1e8e:	ff af       	std	Y+63, r31	; 0x3f
    1e90:	ee af       	std	Y+62, r30	; 0x3e
    1e92:	27 97       	sbiw	r28, 0x07	; 7
    1e94:	2a 96       	adiw	r28, 0x0a	; 10
    1e96:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e98:	2a 97       	sbiw	r28, 0x0a	; 10
    1e9a:	f1 50       	subi	r31, 0x01	; 1
    1e9c:	2a 96       	adiw	r28, 0x0a	; 10
    1e9e:	ff af       	std	Y+63, r31	; 0x3f
    1ea0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ea2:	2a 96       	adiw	r28, 0x0a	; 10
    1ea4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ea6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ea8:	88 23       	and	r24, r24
    1eaa:	c1 f6       	brne	.-80     	; 0x1e5c <PWMDrawer_DrawSignal+0x56>
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	fe 01       	movw	r30, r28
    1eb0:	3f 96       	adiw	r30, 0x0f	; 15
    1eb2:	df 01       	movw	r26, r30
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	1d 92       	st	X+, r1
    1eb8:	9a 95       	dec	r25
    1eba:	e9 f7       	brne	.-6      	; 0x1eb6 <PWMDrawer_DrawSignal+0xb0>
	GLCD_DisplayString(txt1);
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	03 96       	adiw	r24, 0x03	; 3
    1ec0:	0e 94 34 33 	call	0x6668	; 0x6668 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ff 96       	adiw	r30, 0x3f	; 63
    1ec8:	01 90       	ld	r0, Z+
    1eca:	f0 81       	ld	r31, Z
    1ecc:	e0 2d       	mov	r30, r0
    1ece:	85 85       	ldd	r24, Z+13	; 0x0d
    1ed0:	96 85       	ldd	r25, Z+14	; 0x0e
    1ed2:	a7 85       	ldd	r26, Z+15	; 0x0f
    1ed4:	b0 89       	ldd	r27, Z+16	; 0x10
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 cf 33 	call	0x679e	; 0x679e <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
    1ede:	de 01       	movw	r26, r28
    1ee0:	52 96       	adiw	r26, 0x12	; 18
    1ee2:	2c 96       	adiw	r28, 0x0c	; 12
    1ee4:	bf af       	std	Y+63, r27	; 0x3f
    1ee6:	ae af       	std	Y+62, r26	; 0x3e
    1ee8:	2c 97       	sbiw	r28, 0x0c	; 12
    1eea:	ef e6       	ldi	r30, 0x6F	; 111
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	2e 96       	adiw	r28, 0x0e	; 14
    1ef0:	ff af       	std	Y+63, r31	; 0x3f
    1ef2:	ee af       	std	Y+62, r30	; 0x3e
    1ef4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ef6:	f5 e0       	ldi	r31, 0x05	; 5
    1ef8:	2f 96       	adiw	r28, 0x0f	; 15
    1efa:	ff af       	std	Y+63, r31	; 0x3f
    1efc:	2f 97       	sbiw	r28, 0x0f	; 15
    1efe:	2e 96       	adiw	r28, 0x0e	; 14
    1f00:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f02:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f04:	2e 97       	sbiw	r28, 0x0e	; 14
    1f06:	0c 90       	ld	r0, X
    1f08:	2e 96       	adiw	r28, 0x0e	; 14
    1f0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f0e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f10:	31 96       	adiw	r30, 0x01	; 1
    1f12:	2e 96       	adiw	r28, 0x0e	; 14
    1f14:	ff af       	std	Y+63, r31	; 0x3f
    1f16:	ee af       	std	Y+62, r30	; 0x3e
    1f18:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1a:	2c 96       	adiw	r28, 0x0c	; 12
    1f1c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f1e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f20:	2c 97       	sbiw	r28, 0x0c	; 12
    1f22:	0c 92       	st	X, r0
    1f24:	2c 96       	adiw	r28, 0x0c	; 12
    1f26:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f28:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f2a:	2c 97       	sbiw	r28, 0x0c	; 12
    1f2c:	31 96       	adiw	r30, 0x01	; 1
    1f2e:	2c 96       	adiw	r28, 0x0c	; 12
    1f30:	ff af       	std	Y+63, r31	; 0x3f
    1f32:	ee af       	std	Y+62, r30	; 0x3e
    1f34:	2c 97       	sbiw	r28, 0x0c	; 12
    1f36:	2f 96       	adiw	r28, 0x0f	; 15
    1f38:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f3a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f3c:	f1 50       	subi	r31, 0x01	; 1
    1f3e:	2f 96       	adiw	r28, 0x0f	; 15
    1f40:	ff af       	std	Y+63, r31	; 0x3f
    1f42:	2f 97       	sbiw	r28, 0x0f	; 15
    1f44:	2f 96       	adiw	r28, 0x0f	; 15
    1f46:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f48:	2f 97       	sbiw	r28, 0x0f	; 15
    1f4a:	88 23       	and	r24, r24
    1f4c:	c1 f6       	brne	.-80     	; 0x1efe <PWMDrawer_DrawSignal+0xf8>
	GLCD_DisplayString(txt2);
    1f4e:	ce 01       	movw	r24, r28
    1f50:	42 96       	adiw	r24, 0x12	; 18
    1f52:	0e 94 34 33 	call	0x6668	; 0x6668 <GLCD_DisplayString>

	GLCD_GoToLine(1);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
	char txt3[15] = "Duty=\0";
    1f5c:	de 01       	movw	r26, r28
    1f5e:	57 96       	adiw	r26, 0x17	; 23
    1f60:	61 96       	adiw	r28, 0x11	; 17
    1f62:	bf af       	std	Y+63, r27	; 0x3f
    1f64:	ae af       	std	Y+62, r26	; 0x3e
    1f66:	61 97       	sbiw	r28, 0x11	; 17
    1f68:	e5 e7       	ldi	r30, 0x75	; 117
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	63 96       	adiw	r28, 0x13	; 19
    1f6e:	ff af       	std	Y+63, r31	; 0x3f
    1f70:	ee af       	std	Y+62, r30	; 0x3e
    1f72:	63 97       	sbiw	r28, 0x13	; 19
    1f74:	f7 e0       	ldi	r31, 0x07	; 7
    1f76:	64 96       	adiw	r28, 0x14	; 20
    1f78:	ff af       	std	Y+63, r31	; 0x3f
    1f7a:	64 97       	sbiw	r28, 0x14	; 20
    1f7c:	63 96       	adiw	r28, 0x13	; 19
    1f7e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f80:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f82:	63 97       	sbiw	r28, 0x13	; 19
    1f84:	0c 90       	ld	r0, X
    1f86:	63 96       	adiw	r28, 0x13	; 19
    1f88:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f8c:	63 97       	sbiw	r28, 0x13	; 19
    1f8e:	31 96       	adiw	r30, 0x01	; 1
    1f90:	63 96       	adiw	r28, 0x13	; 19
    1f92:	ff af       	std	Y+63, r31	; 0x3f
    1f94:	ee af       	std	Y+62, r30	; 0x3e
    1f96:	63 97       	sbiw	r28, 0x13	; 19
    1f98:	61 96       	adiw	r28, 0x11	; 17
    1f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f9e:	61 97       	sbiw	r28, 0x11	; 17
    1fa0:	0c 92       	st	X, r0
    1fa2:	61 96       	adiw	r28, 0x11	; 17
    1fa4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fa6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fa8:	61 97       	sbiw	r28, 0x11	; 17
    1faa:	31 96       	adiw	r30, 0x01	; 1
    1fac:	61 96       	adiw	r28, 0x11	; 17
    1fae:	ff af       	std	Y+63, r31	; 0x3f
    1fb0:	ee af       	std	Y+62, r30	; 0x3e
    1fb2:	61 97       	sbiw	r28, 0x11	; 17
    1fb4:	64 96       	adiw	r28, 0x14	; 20
    1fb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fb8:	64 97       	sbiw	r28, 0x14	; 20
    1fba:	f1 50       	subi	r31, 0x01	; 1
    1fbc:	64 96       	adiw	r28, 0x14	; 20
    1fbe:	ff af       	std	Y+63, r31	; 0x3f
    1fc0:	64 97       	sbiw	r28, 0x14	; 20
    1fc2:	64 96       	adiw	r28, 0x14	; 20
    1fc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fc6:	64 97       	sbiw	r28, 0x14	; 20
    1fc8:	88 23       	and	r24, r24
    1fca:	c1 f6       	brne	.-80     	; 0x1f7c <PWMDrawer_DrawSignal+0x176>
    1fcc:	88 e0       	ldi	r24, 0x08	; 8
    1fce:	fe 01       	movw	r30, r28
    1fd0:	7e 96       	adiw	r30, 0x1e	; 30
    1fd2:	df 01       	movw	r26, r30
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	1d 92       	st	X+, r1
    1fd8:	9a 95       	dec	r25
    1fda:	e9 f7       	brne	.-6      	; 0x1fd6 <PWMDrawer_DrawSignal+0x1d0>
	GLCD_DisplayString(txt3);
    1fdc:	ce 01       	movw	r24, r28
    1fde:	47 96       	adiw	r24, 0x17	; 23
    1fe0:	0e 94 34 33 	call	0x6668	; 0x6668 <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ff 96       	adiw	r30, 0x3f	; 63
    1fe8:	01 90       	ld	r0, Z+
    1fea:	f0 81       	ld	r31, Z
    1fec:	e0 2d       	mov	r30, r0
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 50 33 	call	0x66a0	; 0x66a0 <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
    2000:	80 91 84 00 	lds	r24, 0x0084
    2004:	90 91 85 00 	lds	r25, 0x0085
    2008:	a0 91 86 00 	lds	r26, 0x0086
    200c:	b0 91 87 00 	lds	r27, 0x0087
    2010:	8e a3       	std	Y+38, r24	; 0x26
    2012:	9f a3       	std	Y+39, r25	; 0x27
    2014:	a8 a7       	std	Y+40, r26	; 0x28
    2016:	b9 a7       	std	Y+41, r27	; 0x29
    2018:	1a a6       	std	Y+42, r1	; 0x2a
	GLCD_DisplayString(txt4);
    201a:	ce 01       	movw	r24, r28
    201c:	86 96       	adiw	r24, 0x26	; 38
    201e:	0e 94 34 33 	call	0x6668	; 0x6668 <GLCD_DisplayString>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
    2022:	86 e0       	ldi	r24, 0x06	; 6
    2024:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
	uint8 pixel_width_count = 0;
    2028:	1a 82       	std	Y+2, r1	; 0x02
    202a:	7e c0       	rjmp	.+252    	; 0x2128 <PWMDrawer_DrawSignal+0x322>
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
    202c:	20 e4       	ldi	r18, 0x40	; 64
    202e:	30 e4       	ldi	r19, 0x40	; 64
    2030:	4e e7       	ldi	r20, 0x7E	; 126
    2032:	52 e0       	ldi	r21, 0x02	; 2
    2034:	62 e0       	ldi	r22, 0x02	; 2
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	8b 5f       	subi	r24, 0xFB	; 251
    2044:	8a 83       	std	Y+2, r24	; 0x02
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    2046:	19 82       	std	Y+1, r1	; 0x01
    2048:	10 c0       	rjmp	.+32     	; 0x206a <PWMDrawer_DrawSignal+0x264>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
    204a:	22 e0       	ldi	r18, 0x02	; 2
    204c:	32 e0       	ldi	r19, 0x02	; 2
    204e:	42 e0       	ldi	r20, 0x02	; 2
    2050:	52 e0       	ldi	r21, 0x02	; 2
    2052:	62 e0       	ldi	r22, 0x02	; 2
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	8b 5f       	subi	r24, 0xFB	; 251
    2062:	8a 83       	std	Y+2, r24	; 0x02
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	fe 01       	movw	r30, r28
    206c:	ff 96       	adiw	r30, 0x3f	; 63
    206e:	01 90       	ld	r0, Z+
    2070:	f0 81       	ld	r31, Z
    2072:	e0 2d       	mov	r30, r0
    2074:	81 81       	ldd	r24, Z+1	; 0x01
    2076:	92 81       	ldd	r25, Z+2	; 0x02
    2078:	a3 81       	ldd	r26, Z+3	; 0x03
    207a:	b4 81       	ldd	r27, Z+4	; 0x04
    207c:	fe 01       	movw	r30, r28
    207e:	ef 5b       	subi	r30, 0xBF	; 191
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	20 81       	ld	r18, Z
    2088:	31 81       	ldd	r19, Z+1	; 0x01
    208a:	42 81       	ldd	r20, Z+2	; 0x02
    208c:	53 81       	ldd	r21, Z+3	; 0x03
    208e:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	98 2f       	mov	r25, r24
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	89 17       	cp	r24, r25
    20a8:	80 f2       	brcs	.-96     	; 0x204a <PWMDrawer_DrawSignal+0x244>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
    20aa:	22 e0       	ldi	r18, 0x02	; 2
    20ac:	32 e0       	ldi	r19, 0x02	; 2
    20ae:	4e e7       	ldi	r20, 0x7E	; 126
    20b0:	50 e4       	ldi	r21, 0x40	; 64
    20b2:	60 e4       	ldi	r22, 0x40	; 64
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	8b 5f       	subi	r24, 0xFB	; 251
    20c2:	8a 83       	std	Y+2, r24	; 0x02
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    20c4:	19 82       	std	Y+1, r1	; 0x01
    20c6:	10 c0       	rjmp	.+32     	; 0x20e8 <PWMDrawer_DrawSignal+0x2e2>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
    20c8:	20 e4       	ldi	r18, 0x40	; 64
    20ca:	30 e4       	ldi	r19, 0x40	; 64
    20cc:	40 e4       	ldi	r20, 0x40	; 64
    20ce:	50 e4       	ldi	r21, 0x40	; 64
    20d0:	60 e4       	ldi	r22, 0x40	; 64
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	8b 5f       	subi	r24, 0xFB	; 251
    20e0:	8a 83       	std	Y+2, r24	; 0x02
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	fe 01       	movw	r30, r28
    20ea:	ff 96       	adiw	r30, 0x3f	; 63
    20ec:	01 90       	ld	r0, Z+
    20ee:	f0 81       	ld	r31, Z
    20f0:	e0 2d       	mov	r30, r0
    20f2:	85 81       	ldd	r24, Z+5	; 0x05
    20f4:	96 81       	ldd	r25, Z+6	; 0x06
    20f6:	a7 81       	ldd	r26, Z+7	; 0x07
    20f8:	b0 85       	ldd	r27, Z+8	; 0x08
    20fa:	fe 01       	movw	r30, r28
    20fc:	ef 5b       	subi	r30, 0xBF	; 191
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	20 81       	ld	r18, Z
    2106:	31 81       	ldd	r19, Z+1	; 0x01
    2108:	42 81       	ldd	r20, Z+2	; 0x02
    210a:	53 81       	ldd	r21, Z+3	; 0x03
    210c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	98 2f       	mov	r25, r24
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	89 17       	cp	r24, r25
    2126:	80 f2       	brcs	.-96     	; 0x20c8 <PWMDrawer_DrawSignal+0x2c2>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	88 37       	cpi	r24, 0x78	; 120
    212c:	08 f4       	brcc	.+2      	; 0x2130 <PWMDrawer_DrawSignal+0x32a>
    212e:	7e cf       	rjmp	.-260    	; 0x202c <PWMDrawer_DrawSignal+0x226>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
    2130:	85 e0       	ldi	r24, 0x05	; 5
    2132:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3e e3       	ldi	r19, 0x3E	; 62
    213a:	48 e0       	ldi	r20, 0x08	; 8
    213c:	5c e1       	ldi	r21, 0x1C	; 28
    213e:	6a e2       	ldi	r22, 0x2A	; 42
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    214a:	19 82       	std	Y+1, r1	; 0x01
    214c:	0d c0       	rjmp	.+26     	; 0x2168 <PWMDrawer_DrawSignal+0x362>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    214e:	28 e0       	ldi	r18, 0x08	; 8
    2150:	38 e0       	ldi	r19, 0x08	; 8
    2152:	48 e0       	ldi	r20, 0x08	; 8
    2154:	58 e0       	ldi	r21, 0x08	; 8
    2156:	68 e0       	ldi	r22, 0x08	; 8
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	fe 01       	movw	r30, r28
    216a:	ff 96       	adiw	r30, 0x3f	; 63
    216c:	01 90       	ld	r0, Z+
    216e:	f0 81       	ld	r31, Z
    2170:	e0 2d       	mov	r30, r0
    2172:	81 81       	ldd	r24, Z+1	; 0x01
    2174:	92 81       	ldd	r25, Z+2	; 0x02
    2176:	a3 81       	ldd	r26, Z+3	; 0x03
    2178:	b4 81       	ldd	r27, Z+4	; 0x04
    217a:	fe 01       	movw	r30, r28
    217c:	ef 5b       	subi	r30, 0xBF	; 191
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	20 81       	ld	r18, Z
    2186:	31 81       	ldd	r19, Z+1	; 0x01
    2188:	42 81       	ldd	r20, Z+2	; 0x02
    218a:	53 81       	ldd	r21, Z+3	; 0x03
    218c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	98 2f       	mov	r25, r24
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	89 17       	cp	r24, r25
    21a6:	98 f2       	brcs	.-90     	; 0x214e <PWMDrawer_DrawSignal+0x348>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    21a8:	28 e0       	ldi	r18, 0x08	; 8
    21aa:	38 e0       	ldi	r19, 0x08	; 8
    21ac:	48 e0       	ldi	r20, 0x08	; 8
    21ae:	58 e0       	ldi	r21, 0x08	; 8
    21b0:	68 e0       	ldi	r22, 0x08	; 8
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    21bc:	19 82       	std	Y+1, r1	; 0x01
    21be:	0d c0       	rjmp	.+26     	; 0x21da <PWMDrawer_DrawSignal+0x3d4>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    21c0:	28 e0       	ldi	r18, 0x08	; 8
    21c2:	38 e0       	ldi	r19, 0x08	; 8
    21c4:	48 e0       	ldi	r20, 0x08	; 8
    21c6:	58 e0       	ldi	r21, 0x08	; 8
    21c8:	68 e0       	ldi	r22, 0x08	; 8
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	fe 01       	movw	r30, r28
    21dc:	ff 96       	adiw	r30, 0x3f	; 63
    21de:	01 90       	ld	r0, Z+
    21e0:	f0 81       	ld	r31, Z
    21e2:	e0 2d       	mov	r30, r0
    21e4:	85 81       	ldd	r24, Z+5	; 0x05
    21e6:	96 81       	ldd	r25, Z+6	; 0x06
    21e8:	a7 81       	ldd	r26, Z+7	; 0x07
    21ea:	b0 85       	ldd	r27, Z+8	; 0x08
    21ec:	fe 01       	movw	r30, r28
    21ee:	ef 5b       	subi	r30, 0xBF	; 191
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	20 81       	ld	r18, Z
    21f8:	31 81       	ldd	r19, Z+1	; 0x01
    21fa:	42 81       	ldd	r20, Z+2	; 0x02
    21fc:	53 81       	ldd	r21, Z+3	; 0x03
    21fe:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	98 2f       	mov	r25, r24
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	89 17       	cp	r24, r25
    2218:	98 f2       	brcs	.-90     	; 0x21c0 <PWMDrawer_DrawSignal+0x3ba>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    221a:	2a e2       	ldi	r18, 0x2A	; 42
    221c:	3c e1       	ldi	r19, 0x1C	; 28
    221e:	48 e0       	ldi	r20, 0x08	; 8
    2220:	5e e3       	ldi	r21, 0x3E	; 62
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>

	/* Display Time Period Value */
	GLCD_GoToLine(4);
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
    2234:	de 01       	movw	r26, r28
    2236:	9b 96       	adiw	r26, 0x2b	; 43
    2238:	66 96       	adiw	r28, 0x16	; 22
    223a:	bf af       	std	Y+63, r27	; 0x3f
    223c:	ae af       	std	Y+62, r26	; 0x3e
    223e:	66 97       	sbiw	r28, 0x16	; 22
    2240:	e9 e8       	ldi	r30, 0x89	; 137
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	68 96       	adiw	r28, 0x18	; 24
    2246:	ff af       	std	Y+63, r31	; 0x3f
    2248:	ee af       	std	Y+62, r30	; 0x3e
    224a:	68 97       	sbiw	r28, 0x18	; 24
    224c:	f8 e0       	ldi	r31, 0x08	; 8
    224e:	69 96       	adiw	r28, 0x19	; 25
    2250:	ff af       	std	Y+63, r31	; 0x3f
    2252:	69 97       	sbiw	r28, 0x19	; 25
    2254:	68 96       	adiw	r28, 0x18	; 24
    2256:	ae ad       	ldd	r26, Y+62	; 0x3e
    2258:	bf ad       	ldd	r27, Y+63	; 0x3f
    225a:	68 97       	sbiw	r28, 0x18	; 24
    225c:	0c 90       	ld	r0, X
    225e:	68 96       	adiw	r28, 0x18	; 24
    2260:	ee ad       	ldd	r30, Y+62	; 0x3e
    2262:	ff ad       	ldd	r31, Y+63	; 0x3f
    2264:	68 97       	sbiw	r28, 0x18	; 24
    2266:	31 96       	adiw	r30, 0x01	; 1
    2268:	68 96       	adiw	r28, 0x18	; 24
    226a:	ff af       	std	Y+63, r31	; 0x3f
    226c:	ee af       	std	Y+62, r30	; 0x3e
    226e:	68 97       	sbiw	r28, 0x18	; 24
    2270:	66 96       	adiw	r28, 0x16	; 22
    2272:	ae ad       	ldd	r26, Y+62	; 0x3e
    2274:	bf ad       	ldd	r27, Y+63	; 0x3f
    2276:	66 97       	sbiw	r28, 0x16	; 22
    2278:	0c 92       	st	X, r0
    227a:	66 96       	adiw	r28, 0x16	; 22
    227c:	ee ad       	ldd	r30, Y+62	; 0x3e
    227e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2280:	66 97       	sbiw	r28, 0x16	; 22
    2282:	31 96       	adiw	r30, 0x01	; 1
    2284:	66 96       	adiw	r28, 0x16	; 22
    2286:	ff af       	std	Y+63, r31	; 0x3f
    2288:	ee af       	std	Y+62, r30	; 0x3e
    228a:	66 97       	sbiw	r28, 0x16	; 22
    228c:	69 96       	adiw	r28, 0x19	; 25
    228e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2290:	69 97       	sbiw	r28, 0x19	; 25
    2292:	f1 50       	subi	r31, 0x01	; 1
    2294:	69 96       	adiw	r28, 0x19	; 25
    2296:	ff af       	std	Y+63, r31	; 0x3f
    2298:	69 97       	sbiw	r28, 0x19	; 25
    229a:	69 96       	adiw	r28, 0x19	; 25
    229c:	8f ad       	ldd	r24, Y+63	; 0x3f
    229e:	69 97       	sbiw	r28, 0x19	; 25
    22a0:	88 23       	and	r24, r24
    22a2:	c1 f6       	brne	.-80     	; 0x2254 <PWMDrawer_DrawSignal+0x44e>
    22a4:	87 e0       	ldi	r24, 0x07	; 7
    22a6:	fe 01       	movw	r30, r28
    22a8:	f3 96       	adiw	r30, 0x33	; 51
    22aa:	df 01       	movw	r26, r30
    22ac:	98 2f       	mov	r25, r24
    22ae:	1d 92       	st	X+, r1
    22b0:	9a 95       	dec	r25
    22b2:	e9 f7       	brne	.-6      	; 0x22ae <PWMDrawer_DrawSignal+0x4a8>
	GLCD_DisplayString(txt5);
    22b4:	ce 01       	movw	r24, r28
    22b6:	8b 96       	adiw	r24, 0x2b	; 43
    22b8:	0e 94 34 33 	call	0x6668	; 0x6668 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
    22bc:	fe 01       	movw	r30, r28
    22be:	ff 96       	adiw	r30, 0x3f	; 63
    22c0:	01 90       	ld	r0, Z+
    22c2:	f0 81       	ld	r31, Z
    22c4:	e0 2d       	mov	r30, r0
    22c6:	81 85       	ldd	r24, Z+9	; 0x09
    22c8:	92 85       	ldd	r25, Z+10	; 0x0a
    22ca:	a3 85       	ldd	r26, Z+11	; 0x0b
    22cc:	b4 85       	ldd	r27, Z+12	; 0x0c
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 cf 33 	call	0x679e	; 0x679e <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
    22d6:	de 01       	movw	r26, r28
    22d8:	da 96       	adiw	r26, 0x3a	; 58
    22da:	6b 96       	adiw	r28, 0x1b	; 27
    22dc:	bf af       	std	Y+63, r27	; 0x3f
    22de:	ae af       	std	Y+62, r26	; 0x3e
    22e0:	6b 97       	sbiw	r28, 0x1b	; 27
    22e2:	e8 e9       	ldi	r30, 0x98	; 152
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	6d 96       	adiw	r28, 0x1d	; 29
    22e8:	ff af       	std	Y+63, r31	; 0x3f
    22ea:	ee af       	std	Y+62, r30	; 0x3e
    22ec:	6d 97       	sbiw	r28, 0x1d	; 29
    22ee:	f5 e0       	ldi	r31, 0x05	; 5
    22f0:	6e 96       	adiw	r28, 0x1e	; 30
    22f2:	ff af       	std	Y+63, r31	; 0x3f
    22f4:	6e 97       	sbiw	r28, 0x1e	; 30
    22f6:	6d 96       	adiw	r28, 0x1d	; 29
    22f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    22fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    22fc:	6d 97       	sbiw	r28, 0x1d	; 29
    22fe:	0c 90       	ld	r0, X
    2300:	6d 96       	adiw	r28, 0x1d	; 29
    2302:	ee ad       	ldd	r30, Y+62	; 0x3e
    2304:	ff ad       	ldd	r31, Y+63	; 0x3f
    2306:	6d 97       	sbiw	r28, 0x1d	; 29
    2308:	31 96       	adiw	r30, 0x01	; 1
    230a:	6d 96       	adiw	r28, 0x1d	; 29
    230c:	ff af       	std	Y+63, r31	; 0x3f
    230e:	ee af       	std	Y+62, r30	; 0x3e
    2310:	6d 97       	sbiw	r28, 0x1d	; 29
    2312:	6b 96       	adiw	r28, 0x1b	; 27
    2314:	ae ad       	ldd	r26, Y+62	; 0x3e
    2316:	bf ad       	ldd	r27, Y+63	; 0x3f
    2318:	6b 97       	sbiw	r28, 0x1b	; 27
    231a:	0c 92       	st	X, r0
    231c:	6b 96       	adiw	r28, 0x1b	; 27
    231e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2320:	ff ad       	ldd	r31, Y+63	; 0x3f
    2322:	6b 97       	sbiw	r28, 0x1b	; 27
    2324:	31 96       	adiw	r30, 0x01	; 1
    2326:	6b 96       	adiw	r28, 0x1b	; 27
    2328:	ff af       	std	Y+63, r31	; 0x3f
    232a:	ee af       	std	Y+62, r30	; 0x3e
    232c:	6b 97       	sbiw	r28, 0x1b	; 27
    232e:	6e 96       	adiw	r28, 0x1e	; 30
    2330:	ff ad       	ldd	r31, Y+63	; 0x3f
    2332:	6e 97       	sbiw	r28, 0x1e	; 30
    2334:	f1 50       	subi	r31, 0x01	; 1
    2336:	6e 96       	adiw	r28, 0x1e	; 30
    2338:	ff af       	std	Y+63, r31	; 0x3f
    233a:	6e 97       	sbiw	r28, 0x1e	; 30
    233c:	6e 96       	adiw	r28, 0x1e	; 30
    233e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2340:	6e 97       	sbiw	r28, 0x1e	; 30
    2342:	88 23       	and	r24, r24
    2344:	c1 f6       	brne	.-80     	; 0x22f6 <PWMDrawer_DrawSignal+0x4f0>
	GLCD_DisplayString(txt6);
    2346:	ce 01       	movw	r24, r28
    2348:	ca 96       	adiw	r24, 0x3a	; 58
    234a:	0e 94 34 33 	call	0x6668	; 0x6668 <GLCD_DisplayString>
    234e:	c3 5a       	subi	r28, 0xA3	; 163
    2350:	df 4f       	sbci	r29, 0xFF	; 255
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <LCD_Init>:
	#include "../GPT/GPT.h"
#else
	#include <util/delay.h>
#endif

void LCD_Init(void) {
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	#if LCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Init(gaStrGPT_Config);
	#endif
	
	/* Initialize DIO Pins */
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	62 e0       	ldi	r22, 0x02	; 2
    2378:	41 e0       	ldi	r20, 0x01	; 1
    237a:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_OUTPUT);
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
#if LCD_8BIT_DATA_LENGTH == 1
	/* 8-bit data mode */
	DIO_SetPortDirection(LCD_DATA_PORT, DIO_OUTPUT);
#else
	/* 4-bit data mode */
	DIO_SetHighHalfPortDirection(LCD_DATA_PORT, DIO_OUTPUT);
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	61 e0       	ldi	r22, 0x01	; 1
    238c:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <DIO_SetHighHalfPortDirection>
	LCD_SendInstruction(LCD_RETURN_HOME);
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_SendInstruction>
#endif
	/* Send Instruction to set function (data length, number of lines and font) */
	LCD_SendInstruction(LCD_FUNCTION_SET);
    2396:	88 e2       	ldi	r24, 0x28	; 40
    2398:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_SendInstruction>
	/* Turn on display and clear it */
	LCD_SendInstruction(LCD_DISPLAY_ON);
    239c:	8f e0       	ldi	r24, 0x0F	; 15
    239e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_SendInstruction>
	LCD_SendInstruction(LCD_CLEAR_DISPLAY);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_SendInstruction>
}
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LCD_SendInstruction>:

void LCD_SendInstruction(uint8 Instruction) {
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	c9 5a       	subi	r28, 0xA9	; 169
    23bc:	d0 40       	sbci	r29, 0x00	; 0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	fe 01       	movw	r30, r28
    23ca:	e7 55       	subi	r30, 0x57	; 87
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	80 83       	st	Z, r24
	/* Select Instruction Register */
	DIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_INSTRUCTION_REG);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(LCD_CTRL_PORT, LCD_RW_PIN, LCD_WRITE_MODE);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	62 e0       	ldi	r22, 0x02	; 2
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    23e4:	fe 01       	movw	r30, r28
    23e6:	eb 55       	subi	r30, 0x5B	; 91
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 e8       	ldi	r26, 0x80	; 128
    23f0:	bf e3       	ldi	r27, 0x3F	; 63
    23f2:	80 83       	st	Z, r24
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	a2 83       	std	Z+2, r26	; 0x02
    23f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23fa:	8e 01       	movw	r16, r28
    23fc:	0f 55       	subi	r16, 0x5F	; 95
    23fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2400:	fe 01       	movw	r30, r28
    2402:	eb 55       	subi	r30, 0x5B	; 91
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	2b ea       	ldi	r18, 0xAB	; 171
    2410:	3a ea       	ldi	r19, 0xAA	; 170
    2412:	4a ea       	ldi	r20, 0xAA	; 170
    2414:	50 e4       	ldi	r21, 0x40	; 64
    2416:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	f8 01       	movw	r30, r16
    2420:	80 83       	st	Z, r24
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	a2 83       	std	Z+2, r26	; 0x02
    2426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2428:	fe 01       	movw	r30, r28
    242a:	ef 55       	subi	r30, 0x5F	; 95
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	34 f4       	brge	.+12     	; 0x2452 <LCD_SendInstruction+0xa4>
		__ticks = 1;
    2446:	fe 01       	movw	r30, r28
    2448:	e0 56       	subi	r30, 0x60	; 96
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	80 83       	st	Z, r24
    2450:	e0 c0       	rjmp	.+448    	; 0x2612 <LCD_SendInstruction+0x264>
	else if (__tmp > 255)
    2452:	fe 01       	movw	r30, r28
    2454:	ef 55       	subi	r30, 0x5F	; 95
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	53 e4       	ldi	r21, 0x43	; 67
    2468:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	0c f0       	brlt	.+2      	; 0x2472 <LCD_SendInstruction+0xc4>
    2470:	c0 c0       	rjmp	.+384    	; 0x25f2 <LCD_SendInstruction+0x244>
	{
		_delay_ms(__us / 1000.0);
    2472:	fe 01       	movw	r30, r28
    2474:	eb 55       	subi	r30, 0x5B	; 91
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	54 e4       	ldi	r21, 0x44	; 68
    2488:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	fe 01       	movw	r30, r28
    2492:	e4 56       	subi	r30, 0x64	; 100
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 83       	st	Z, r24
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	a2 83       	std	Z+2, r26	; 0x02
    249c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	8e 01       	movw	r16, r28
    24a0:	08 56       	subi	r16, 0x68	; 104
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	e4 56       	subi	r30, 0x64	; 100
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a e7       	ldi	r20, 0x7A	; 122
    24b8:	55 e4       	ldi	r21, 0x45	; 69
    24ba:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	80 83       	st	Z, r24
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	a2 83       	std	Z+2, r26	; 0x02
    24ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24cc:	fe 01       	movw	r30, r28
    24ce:	e8 56       	subi	r30, 0x68	; 104
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	44 f4       	brge	.+16     	; 0x24fa <LCD_SendInstruction+0x14c>
		__ticks = 1;
    24ea:	fe 01       	movw	r30, r28
    24ec:	ea 56       	subi	r30, 0x6A	; 106
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	64 c0       	rjmp	.+200    	; 0x25c2 <LCD_SendInstruction+0x214>
	else if (__tmp > 65535)
    24fa:	fe 01       	movw	r30, r28
    24fc:	e8 56       	subi	r30, 0x68	; 104
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	0c f0       	brlt	.+2      	; 0x251a <LCD_SendInstruction+0x16c>
    2518:	43 c0       	rjmp	.+134    	; 0x25a0 <LCD_SendInstruction+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	fe 01       	movw	r30, r28
    251c:	e4 56       	subi	r30, 0x64	; 100
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e2       	ldi	r20, 0x20	; 32
    252e:	51 e4       	ldi	r21, 0x41	; 65
    2530:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8e 01       	movw	r16, r28
    253a:	0a 56       	subi	r16, 0x6A	; 106
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	f8 01       	movw	r30, r16
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
    2550:	1f c0       	rjmp	.+62     	; 0x2590 <LCD_SendInstruction+0x1e2>
    2552:	fe 01       	movw	r30, r28
    2554:	ec 56       	subi	r30, 0x6C	; 108
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2560:	fe 01       	movw	r30, r28
    2562:	ec 56       	subi	r30, 0x6C	; 108
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_SendInstruction+0x1bc>
    256e:	fe 01       	movw	r30, r28
    2570:	ec 56       	subi	r30, 0x6C	; 108
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	de 01       	movw	r26, r28
    257a:	aa 56       	subi	r26, 0x6A	; 106
    257c:	bf 4f       	sbci	r27, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	ea 56       	subi	r30, 0x6A	; 106
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	11 96       	adiw	r26, 0x01	; 1
    258c:	9c 93       	st	X, r25
    258e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	fe 01       	movw	r30, r28
    2592:	ea 56       	subi	r30, 0x6A	; 106
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	d1 f6       	brne	.-76     	; 0x2552 <LCD_SendInstruction+0x1a4>
    259e:	4b c0       	rjmp	.+150    	; 0x2636 <LCD_SendInstruction+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	8e 01       	movw	r16, r28
    25a2:	0a 56       	subi	r16, 0x6A	; 106
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	fe 01       	movw	r30, r28
    25a8:	e8 56       	subi	r30, 0x68	; 104
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	f8 01       	movw	r30, r16
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24
    25c2:	de 01       	movw	r26, r28
    25c4:	ae 56       	subi	r26, 0x6E	; 110
    25c6:	bf 4f       	sbci	r27, 0xFF	; 255
    25c8:	fe 01       	movw	r30, r28
    25ca:	ea 56       	subi	r30, 0x6A	; 106
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	11 96       	adiw	r26, 0x01	; 1
    25d4:	9c 93       	st	X, r25
    25d6:	8e 93       	st	-X, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	ee 56       	subi	r30, 0x6E	; 110
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_SendInstruction+0x234>
    25e6:	fe 01       	movw	r30, r28
    25e8:	ee 56       	subi	r30, 0x6E	; 110
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	22 c0       	rjmp	.+68     	; 0x2636 <LCD_SendInstruction+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25f2:	8e 01       	movw	r16, r28
    25f4:	00 56       	subi	r16, 0x60	; 96
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	ef 55       	subi	r30, 0x5F	; 95
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	f8 01       	movw	r30, r16
    2610:	80 83       	st	Z, r24
    2612:	de 01       	movw	r26, r28
    2614:	af 56       	subi	r26, 0x6F	; 111
    2616:	bf 4f       	sbci	r27, 0xFF	; 255
    2618:	fe 01       	movw	r30, r28
    261a:	e0 56       	subi	r30, 0x60	; 96
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2622:	fe 01       	movw	r30, r28
    2624:	ef 56       	subi	r30, 0x6F	; 111
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	8a 95       	dec	r24
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_SendInstruction+0x27c>
    262e:	fe 01       	movw	r30, r28
    2630:	ef 56       	subi	r30, 0x6F	; 111
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 83       	st	Z, r24
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
	/* Enable Pulse for Write Operation */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_HIGH);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    2640:	fe 01       	movw	r30, r28
    2642:	e3 57       	subi	r30, 0x73	; 115
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e8       	ldi	r26, 0x80	; 128
    264c:	bf e3       	ldi	r27, 0x3F	; 63
    264e:	80 83       	st	Z, r24
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	a2 83       	std	Z+2, r26	; 0x02
    2654:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2656:	8e 01       	movw	r16, r28
    2658:	07 57       	subi	r16, 0x77	; 119
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	e3 57       	subi	r30, 0x73	; 115
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	2b ea       	ldi	r18, 0xAB	; 171
    266c:	3a ea       	ldi	r19, 0xAA	; 170
    266e:	4a ea       	ldi	r20, 0xAA	; 170
    2670:	50 e4       	ldi	r21, 0x40	; 64
    2672:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	80 83       	st	Z, r24
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	a2 83       	std	Z+2, r26	; 0x02
    2682:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2684:	fe 01       	movw	r30, r28
    2686:	e7 57       	subi	r30, 0x77	; 119
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	82 81       	ldd	r24, Z+2	; 0x02
    2690:	93 81       	ldd	r25, Z+3	; 0x03
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	34 f4       	brge	.+12     	; 0x26ae <LCD_SendInstruction+0x300>
		__ticks = 1;
    26a2:	fe 01       	movw	r30, r28
    26a4:	e8 57       	subi	r30, 0x78	; 120
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 83       	st	Z, r24
    26ac:	e0 c0       	rjmp	.+448    	; 0x286e <LCD_SendInstruction+0x4c0>
	else if (__tmp > 255)
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 57       	subi	r30, 0x77	; 119
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	53 e4       	ldi	r21, 0x43	; 67
    26c4:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <LCD_SendInstruction+0x320>
    26cc:	c0 c0       	rjmp	.+384    	; 0x284e <LCD_SendInstruction+0x4a0>
	{
		_delay_ms(__us / 1000.0);
    26ce:	fe 01       	movw	r30, r28
    26d0:	e3 57       	subi	r30, 0x73	; 115
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a e7       	ldi	r20, 0x7A	; 122
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	fe 01       	movw	r30, r28
    26ee:	ec 57       	subi	r30, 0x7C	; 124
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 83       	st	Z, r24
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	a2 83       	std	Z+2, r26	; 0x02
    26f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	8e 01       	movw	r16, r28
    26fc:	00 58       	subi	r16, 0x80	; 128
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	ec 57       	subi	r30, 0x7C	; 124
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	55 e4       	ldi	r21, 0x45	; 69
    2716:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	80 83       	st	Z, r24
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	a2 83       	std	Z+2, r26	; 0x02
    2726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2728:	fe 01       	movw	r30, r28
    272a:	e0 58       	subi	r30, 0x80	; 128
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	44 f4       	brge	.+16     	; 0x2756 <LCD_SendInstruction+0x3a8>
		__ticks = 1;
    2746:	fe 01       	movw	r30, r28
    2748:	e2 58       	subi	r30, 0x82	; 130
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	64 c0       	rjmp	.+200    	; 0x281e <LCD_SendInstruction+0x470>
	else if (__tmp > 65535)
    2756:	fe 01       	movw	r30, r28
    2758:	e0 58       	subi	r30, 0x80	; 128
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	0c f0       	brlt	.+2      	; 0x2776 <LCD_SendInstruction+0x3c8>
    2774:	43 c0       	rjmp	.+134    	; 0x27fc <LCD_SendInstruction+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	fe 01       	movw	r30, r28
    2778:	ec 57       	subi	r30, 0x7C	; 124
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8e 01       	movw	r16, r28
    2796:	02 58       	subi	r16, 0x82	; 130
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	f8 01       	movw	r30, r16
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
    27ac:	1f c0       	rjmp	.+62     	; 0x27ec <LCD_SendInstruction+0x43e>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e4 58       	subi	r30, 0x84	; 132
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 e9       	ldi	r24, 0x90	; 144
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27bc:	fe 01       	movw	r30, r28
    27be:	e4 58       	subi	r30, 0x84	; 132
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_SendInstruction+0x418>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e4 58       	subi	r30, 0x84	; 132
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	de 01       	movw	r26, r28
    27d6:	a2 58       	subi	r26, 0x82	; 130
    27d8:	bf 4f       	sbci	r27, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	e2 58       	subi	r30, 0x82	; 130
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	11 96       	adiw	r26, 0x01	; 1
    27e8:	9c 93       	st	X, r25
    27ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e2 58       	subi	r30, 0x82	; 130
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	d1 f6       	brne	.-76     	; 0x27ae <LCD_SendInstruction+0x400>
    27fa:	4b c0       	rjmp	.+150    	; 0x2892 <LCD_SendInstruction+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	8e 01       	movw	r16, r28
    27fe:	02 58       	subi	r16, 0x82	; 130
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e0 58       	subi	r30, 0x80	; 128
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	de 01       	movw	r26, r28
    2820:	a6 58       	subi	r26, 0x86	; 134
    2822:	bf 4f       	sbci	r27, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	e2 58       	subi	r30, 0x82	; 130
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
    2834:	fe 01       	movw	r30, r28
    2836:	e6 58       	subi	r30, 0x86	; 134
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_SendInstruction+0x490>
    2842:	fe 01       	movw	r30, r28
    2844:	e6 58       	subi	r30, 0x86	; 134
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
    284c:	22 c0       	rjmp	.+68     	; 0x2892 <LCD_SendInstruction+0x4e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    284e:	8e 01       	movw	r16, r28
    2850:	08 57       	subi	r16, 0x78	; 120
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	e7 57       	subi	r30, 0x77	; 119
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	f8 01       	movw	r30, r16
    286c:	80 83       	st	Z, r24
    286e:	de 01       	movw	r26, r28
    2870:	a7 58       	subi	r26, 0x87	; 135
    2872:	bf 4f       	sbci	r27, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	e8 57       	subi	r30, 0x78	; 120
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    287e:	fe 01       	movw	r30, r28
    2880:	e7 58       	subi	r30, 0x87	; 135
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	8a 95       	dec	r24
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_SendInstruction+0x4d8>
    288a:	fe 01       	movw	r30, r28
    288c:	e7 58       	subi	r30, 0x87	; 135
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 83       	st	Z, r24
		_delay_us(1);
	#endif
#else
	/* 4 bit mode */
	/* Write Higher Half of Instruction */
	DIO_WriteHighHalfPort(LCD_DATA_PORT, (Instruction & 0xF0U));
    2892:	fe 01       	movw	r30, r28
    2894:	e7 55       	subi	r30, 0x57	; 87
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	98 2f       	mov	r25, r24
    289c:	90 7f       	andi	r25, 0xF0	; 240
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	69 2f       	mov	r22, r25
    28a2:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <DIO_WriteHighHalfPort>
    28a6:	fe 01       	movw	r30, r28
    28a8:	eb 58       	subi	r30, 0x8B	; 139
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e8       	ldi	r26, 0x80	; 128
    28b2:	bf e3       	ldi	r27, 0x3F	; 63
    28b4:	80 83       	st	Z, r24
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	a2 83       	std	Z+2, r26	; 0x02
    28ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28bc:	8e 01       	movw	r16, r28
    28be:	0f 58       	subi	r16, 0x8F	; 143
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	eb 58       	subi	r30, 0x8B	; 139
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	2b ea       	ldi	r18, 0xAB	; 171
    28d2:	3a ea       	ldi	r19, 0xAA	; 170
    28d4:	4a ea       	ldi	r20, 0xAA	; 170
    28d6:	50 e4       	ldi	r21, 0x40	; 64
    28d8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	f8 01       	movw	r30, r16
    28e2:	80 83       	st	Z, r24
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	a2 83       	std	Z+2, r26	; 0x02
    28e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ea:	fe 01       	movw	r30, r28
    28ec:	ef 58       	subi	r30, 0x8F	; 143
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	34 f4       	brge	.+12     	; 0x2914 <LCD_SendInstruction+0x566>
		__ticks = 1;
    2908:	fe 01       	movw	r30, r28
    290a:	e0 59       	subi	r30, 0x90	; 144
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	80 83       	st	Z, r24
    2912:	e0 c0       	rjmp	.+448    	; 0x2ad4 <LCD_SendInstruction+0x726>
	else if (__tmp > 255)
    2914:	fe 01       	movw	r30, r28
    2916:	ef 58       	subi	r30, 0x8F	; 143
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	53 e4       	ldi	r21, 0x43	; 67
    292a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	0c f0       	brlt	.+2      	; 0x2934 <LCD_SendInstruction+0x586>
    2932:	c0 c0       	rjmp	.+384    	; 0x2ab4 <LCD_SendInstruction+0x706>
	{
		_delay_ms(__us / 1000.0);
    2934:	fe 01       	movw	r30, r28
    2936:	eb 58       	subi	r30, 0x8B	; 139
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a e7       	ldi	r20, 0x7A	; 122
    2948:	54 e4       	ldi	r21, 0x44	; 68
    294a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	fe 01       	movw	r30, r28
    2954:	e4 59       	subi	r30, 0x94	; 148
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 83       	st	Z, r24
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	a2 83       	std	Z+2, r26	; 0x02
    295e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	8e 01       	movw	r16, r28
    2962:	08 59       	subi	r16, 0x98	; 152
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e4 59       	subi	r30, 0x94	; 148
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	55 e4       	ldi	r21, 0x45	; 69
    297c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	f8 01       	movw	r30, r16
    2986:	80 83       	st	Z, r24
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	a2 83       	std	Z+2, r26	; 0x02
    298c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    298e:	fe 01       	movw	r30, r28
    2990:	e8 59       	subi	r30, 0x98	; 152
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	44 f4       	brge	.+16     	; 0x29bc <LCD_SendInstruction+0x60e>
		__ticks = 1;
    29ac:	fe 01       	movw	r30, r28
    29ae:	ea 59       	subi	r30, 0x9A	; 154
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	64 c0       	rjmp	.+200    	; 0x2a84 <LCD_SendInstruction+0x6d6>
	else if (__tmp > 65535)
    29bc:	fe 01       	movw	r30, r28
    29be:	e8 59       	subi	r30, 0x98	; 152
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	0c f0       	brlt	.+2      	; 0x29dc <LCD_SendInstruction+0x62e>
    29da:	43 c0       	rjmp	.+134    	; 0x2a62 <LCD_SendInstruction+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29dc:	fe 01       	movw	r30, r28
    29de:	e4 59       	subi	r30, 0x94	; 148
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8e 01       	movw	r16, r28
    29fc:	0a 59       	subi	r16, 0x9A	; 154
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	1f c0       	rjmp	.+62     	; 0x2a52 <LCD_SendInstruction+0x6a4>
    2a14:	fe 01       	movw	r30, r28
    2a16:	ec 59       	subi	r30, 0x9C	; 156
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 e9       	ldi	r24, 0x90	; 144
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a22:	fe 01       	movw	r30, r28
    2a24:	ec 59       	subi	r30, 0x9C	; 156
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_SendInstruction+0x67e>
    2a30:	fe 01       	movw	r30, r28
    2a32:	ec 59       	subi	r30, 0x9C	; 156
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	de 01       	movw	r26, r28
    2a3c:	aa 59       	subi	r26, 0x9A	; 154
    2a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a40:	fe 01       	movw	r30, r28
    2a42:	ea 59       	subi	r30, 0x9A	; 154
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	9c 93       	st	X, r25
    2a50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a52:	fe 01       	movw	r30, r28
    2a54:	ea 59       	subi	r30, 0x9A	; 154
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	d1 f6       	brne	.-76     	; 0x2a14 <LCD_SendInstruction+0x666>
    2a60:	4b c0       	rjmp	.+150    	; 0x2af8 <LCD_SendInstruction+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	8e 01       	movw	r16, r28
    2a64:	0a 59       	subi	r16, 0x9A	; 154
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e8 59       	subi	r30, 0x98	; 152
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	f8 01       	movw	r30, r16
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
    2a84:	de 01       	movw	r26, r28
    2a86:	ae 59       	subi	r26, 0x9E	; 158
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ea 59       	subi	r30, 0x9A	; 154
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	11 96       	adiw	r26, 0x01	; 1
    2a96:	9c 93       	st	X, r25
    2a98:	8e 93       	st	-X, r24
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ee 59       	subi	r30, 0x9E	; 158
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <LCD_SendInstruction+0x6f6>
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ee 59       	subi	r30, 0x9E	; 158
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	80 83       	st	Z, r24
    2ab2:	22 c0       	rjmp	.+68     	; 0x2af8 <LCD_SendInstruction+0x74a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	00 59       	subi	r16, 0x90	; 144
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	ef 58       	subi	r30, 0x8F	; 143
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	60 81       	ld	r22, Z
    2ac2:	71 81       	ldd	r23, Z+1	; 0x01
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	80 83       	st	Z, r24
    2ad4:	de 01       	movw	r26, r28
    2ad6:	af 59       	subi	r26, 0x9F	; 159
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	e0 59       	subi	r30, 0x90	; 144
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ef 59       	subi	r30, 0x9F	; 159
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	8a 95       	dec	r24
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <LCD_SendInstruction+0x73e>
    2af0:	fe 01       	movw	r30, r28
    2af2:	ef 59       	subi	r30, 0x9F	; 159
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 83       	st	Z, r24
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
	/* bring down the enable pulse */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_LOW);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    2b02:	fe 01       	movw	r30, r28
    2b04:	e3 5a       	subi	r30, 0xA3	; 163
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e8       	ldi	r26, 0x80	; 128
    2b0e:	bf e3       	ldi	r27, 0x3F	; 63
    2b10:	80 83       	st	Z, r24
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	a2 83       	std	Z+2, r26	; 0x02
    2b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b18:	8e 01       	movw	r16, r28
    2b1a:	07 5a       	subi	r16, 0xA7	; 167
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e3 5a       	subi	r30, 0xA3	; 163
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	2b ea       	ldi	r18, 0xAB	; 171
    2b2e:	3a ea       	ldi	r19, 0xAA	; 170
    2b30:	4a ea       	ldi	r20, 0xAA	; 170
    2b32:	50 e4       	ldi	r21, 0x40	; 64
    2b34:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b46:	fe 01       	movw	r30, r28
    2b48:	e7 5a       	subi	r30, 0xA7	; 167
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	34 f4       	brge	.+12     	; 0x2b70 <LCD_SendInstruction+0x7c2>
		__ticks = 1;
    2b64:	fe 01       	movw	r30, r28
    2b66:	e8 5a       	subi	r30, 0xA8	; 168
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	80 83       	st	Z, r24
    2b6e:	e0 c0       	rjmp	.+448    	; 0x2d30 <LCD_SendInstruction+0x982>
	else if (__tmp > 255)
    2b70:	fe 01       	movw	r30, r28
    2b72:	e7 5a       	subi	r30, 0xA7	; 167
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	53 e4       	ldi	r21, 0x43	; 67
    2b86:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	0c f0       	brlt	.+2      	; 0x2b90 <LCD_SendInstruction+0x7e2>
    2b8e:	c0 c0       	rjmp	.+384    	; 0x2d10 <LCD_SendInstruction+0x962>
	{
		_delay_ms(__us / 1000.0);
    2b90:	fe 01       	movw	r30, r28
    2b92:	e3 5a       	subi	r30, 0xA3	; 163
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	4a e7       	ldi	r20, 0x7A	; 122
    2ba4:	54 e4       	ldi	r21, 0x44	; 68
    2ba6:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ec 5a       	subi	r30, 0xAC	; 172
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	00 5b       	subi	r16, 0xB0	; 176
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ec 5a       	subi	r30, 0xAC	; 172
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	55 e4       	ldi	r21, 0x45	; 69
    2bd8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	80 83       	st	Z, r24
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	a2 83       	std	Z+2, r26	; 0x02
    2be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e0 5b       	subi	r30, 0xB0	; 176
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	44 f4       	brge	.+16     	; 0x2c18 <LCD_SendInstruction+0x86a>
		__ticks = 1;
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e2 5b       	subi	r30, 0xB2	; 178
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	64 c0       	rjmp	.+200    	; 0x2ce0 <LCD_SendInstruction+0x932>
	else if (__tmp > 65535)
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e0 5b       	subi	r30, 0xB0	; 176
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <LCD_SendInstruction+0x88a>
    2c36:	43 c0       	rjmp	.+134    	; 0x2cbe <LCD_SendInstruction+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ec 5a       	subi	r30, 0xAC	; 172
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8e 01       	movw	r16, r28
    2c58:	02 5b       	subi	r16, 0xB2	; 178
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	f8 01       	movw	r30, r16
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	1f c0       	rjmp	.+62     	; 0x2cae <LCD_SendInstruction+0x900>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e4 5b       	subi	r30, 0xB4	; 180
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 e9       	ldi	r24, 0x90	; 144
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e4 5b       	subi	r30, 0xB4	; 180
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_SendInstruction+0x8da>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e4 5b       	subi	r30, 0xB4	; 180
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	de 01       	movw	r26, r28
    2c98:	a2 5b       	subi	r26, 0xB2	; 178
    2c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e2 5b       	subi	r30, 0xB2	; 178
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	11 96       	adiw	r26, 0x01	; 1
    2caa:	9c 93       	st	X, r25
    2cac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e2 5b       	subi	r30, 0xB2	; 178
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	d1 f6       	brne	.-76     	; 0x2c70 <LCD_SendInstruction+0x8c2>
    2cbc:	4b c0       	rjmp	.+150    	; 0x2d54 <LCD_SendInstruction+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	02 5b       	subi	r16, 0xB2	; 178
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e0 5b       	subi	r30, 0xB0	; 176
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	f8 01       	movw	r30, r16
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	de 01       	movw	r26, r28
    2ce2:	a6 5b       	subi	r26, 0xB6	; 182
    2ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e2 5b       	subi	r30, 0xB2	; 178
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	11 96       	adiw	r26, 0x01	; 1
    2cf2:	9c 93       	st	X, r25
    2cf4:	8e 93       	st	-X, r24
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e6 5b       	subi	r30, 0xB6	; 182
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_SendInstruction+0x952>
    2d04:	fe 01       	movw	r30, r28
    2d06:	e6 5b       	subi	r30, 0xB6	; 182
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	80 83       	st	Z, r24
    2d0e:	22 c0       	rjmp	.+68     	; 0x2d54 <LCD_SendInstruction+0x9a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d10:	8e 01       	movw	r16, r28
    2d12:	08 5a       	subi	r16, 0xA8	; 168
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	fe 01       	movw	r30, r28
    2d18:	e7 5a       	subi	r30, 0xA7	; 167
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	80 83       	st	Z, r24
    2d30:	de 01       	movw	r26, r28
    2d32:	a7 5b       	subi	r26, 0xB7	; 183
    2d34:	bf 4f       	sbci	r27, 0xFF	; 255
    2d36:	fe 01       	movw	r30, r28
    2d38:	e8 5a       	subi	r30, 0xA8	; 168
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d40:	fe 01       	movw	r30, r28
    2d42:	e7 5b       	subi	r30, 0xB7	; 183
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	8a 95       	dec	r24
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <LCD_SendInstruction+0x99a>
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e7 5b       	subi	r30, 0xB7	; 183
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 83       	st	Z, r24
	#else
		_delay_us(1);
	#endif

	/* Enable Pulse for Write Operation */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_HIGH);
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	eb 5b       	subi	r30, 0xBB	; 187
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 e8       	ldi	r26, 0x80	; 128
    2d6a:	bf e3       	ldi	r27, 0x3F	; 63
    2d6c:	80 83       	st	Z, r24
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	a2 83       	std	Z+2, r26	; 0x02
    2d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d74:	8e 01       	movw	r16, r28
    2d76:	0f 5b       	subi	r16, 0xBF	; 191
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	eb 5b       	subi	r30, 0xBB	; 187
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	2b ea       	ldi	r18, 0xAB	; 171
    2d8a:	3a ea       	ldi	r19, 0xAA	; 170
    2d8c:	4a ea       	ldi	r20, 0xAA	; 170
    2d8e:	50 e4       	ldi	r21, 0x40	; 64
    2d90:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	f8 01       	movw	r30, r16
    2d9a:	80 83       	st	Z, r24
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	a2 83       	std	Z+2, r26	; 0x02
    2da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2da2:	fe 01       	movw	r30, r28
    2da4:	ef 5b       	subi	r30, 0xBF	; 191
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	60 81       	ld	r22, Z
    2daa:	71 81       	ldd	r23, Z+1	; 0x01
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	93 81       	ldd	r25, Z+3	; 0x03
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e8       	ldi	r20, 0x80	; 128
    2db6:	5f e3       	ldi	r21, 0x3F	; 63
    2db8:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	34 f4       	brge	.+12     	; 0x2dcc <LCD_SendInstruction+0xa1e>
		__ticks = 1;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e0 5c       	subi	r30, 0xC0	; 192
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 83       	st	Z, r24
    2dca:	9d c0       	rjmp	.+314    	; 0x2f06 <LCD_SendInstruction+0xb58>
	else if (__tmp > 255)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ef 5b       	subi	r30, 0xBF	; 191
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4f e7       	ldi	r20, 0x7F	; 127
    2de0:	53 e4       	ldi	r21, 0x43	; 67
    2de2:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2de6:	18 16       	cp	r1, r24
    2de8:	0c f0       	brlt	.+2      	; 0x2dec <LCD_SendInstruction+0xa3e>
    2dea:	7e c0       	rjmp	.+252    	; 0x2ee8 <LCD_SendInstruction+0xb3a>
	{
		_delay_ms(__us / 1000.0);
    2dec:	fe 01       	movw	r30, r28
    2dee:	eb 5b       	subi	r30, 0xBB	; 187
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	4a e7       	ldi	r20, 0x7A	; 122
    2e00:	54 e4       	ldi	r21, 0x44	; 68
    2e02:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	8c af       	std	Y+60, r24	; 0x3c
    2e0c:	9d af       	std	Y+61, r25	; 0x3d
    2e0e:	ae af       	std	Y+62, r26	; 0x3e
    2e10:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e14:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a e7       	ldi	r20, 0x7A	; 122
    2e20:	55 e4       	ldi	r21, 0x45	; 69
    2e22:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	88 af       	std	Y+56, r24	; 0x38
    2e2c:	99 af       	std	Y+57, r25	; 0x39
    2e2e:	aa af       	std	Y+58, r26	; 0x3a
    2e30:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2e32:	68 ad       	ldd	r22, Y+56	; 0x38
    2e34:	79 ad       	ldd	r23, Y+57	; 0x39
    2e36:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e38:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <LCD_SendInstruction+0xaa6>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9f ab       	std	Y+55, r25	; 0x37
    2e50:	8e ab       	std	Y+54, r24	; 0x36
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <LCD_SendInstruction+0xb24>
	else if (__tmp > 65535)
    2e54:	68 ad       	ldd	r22, Y+56	; 0x38
    2e56:	79 ad       	ldd	r23, Y+57	; 0x39
    2e58:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <LCD_SendInstruction+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e6e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e70:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e72:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9f ab       	std	Y+55, r25	; 0x37
    2e92:	8e ab       	std	Y+54, r24	; 0x36
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <LCD_SendInstruction+0xb06>
    2e96:	80 e9       	ldi	r24, 0x90	; 144
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	9d ab       	std	Y+53, r25	; 0x35
    2e9c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e9e:	8c a9       	ldd	r24, Y+52	; 0x34
    2ea0:	9d a9       	ldd	r25, Y+53	; 0x35
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <LCD_SendInstruction+0xaf4>
    2ea6:	9d ab       	std	Y+53, r25	; 0x35
    2ea8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8e a9       	ldd	r24, Y+54	; 0x36
    2eac:	9f a9       	ldd	r25, Y+55	; 0x37
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9f ab       	std	Y+55, r25	; 0x37
    2eb2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8e a9       	ldd	r24, Y+54	; 0x36
    2eb6:	9f a9       	ldd	r25, Y+55	; 0x37
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <LCD_SendInstruction+0xae8>
    2ebc:	2d c0       	rjmp	.+90     	; 0x2f18 <LCD_SendInstruction+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	68 ad       	ldd	r22, Y+56	; 0x38
    2ec0:	79 ad       	ldd	r23, Y+57	; 0x39
    2ec2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ec4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ec6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9f ab       	std	Y+55, r25	; 0x37
    2ed0:	8e ab       	std	Y+54, r24	; 0x36
    2ed2:	8e a9       	ldd	r24, Y+54	; 0x36
    2ed4:	9f a9       	ldd	r25, Y+55	; 0x37
    2ed6:	9b ab       	std	Y+51, r25	; 0x33
    2ed8:	8a ab       	std	Y+50, r24	; 0x32
    2eda:	8a a9       	ldd	r24, Y+50	; 0x32
    2edc:	9b a9       	ldd	r25, Y+51	; 0x33
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <LCD_SendInstruction+0xb30>
    2ee2:	9b ab       	std	Y+51, r25	; 0x33
    2ee4:	8a ab       	std	Y+50, r24	; 0x32
    2ee6:	18 c0       	rjmp	.+48     	; 0x2f18 <LCD_SendInstruction+0xb6a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ef 5b       	subi	r30, 0xBF	; 191
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	fe 01       	movw	r30, r28
    2f00:	e0 5c       	subi	r30, 0xC0	; 192
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 83       	st	Z, r24
    2f06:	fe 01       	movw	r30, r28
    2f08:	e0 5c       	subi	r30, 0xC0	; 192
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f10:	89 a9       	ldd	r24, Y+49	; 0x31
    2f12:	8a 95       	dec	r24
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <LCD_SendInstruction+0xb64>
    2f16:	89 ab       	std	Y+49, r24	; 0x31
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
	/* Write Lower Half of Instruction */
	DIO_WriteHighHalfPort(LCD_DATA_PORT, ((Instruction & 0x0FU)<<4));
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e7 55       	subi	r30, 0x57	; 87
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	98 2f       	mov	r25, r24
    2f22:	92 95       	swap	r25
    2f24:	90 7f       	andi	r25, 0xF0	; 240
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	69 2f       	mov	r22, r25
    2f2a:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <DIO_WriteHighHalfPort>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a0 e8       	ldi	r26, 0x80	; 128
    2f34:	bf e3       	ldi	r27, 0x3F	; 63
    2f36:	8d a7       	std	Y+45, r24	; 0x2d
    2f38:	9e a7       	std	Y+46, r25	; 0x2e
    2f3a:	af a7       	std	Y+47, r26	; 0x2f
    2f3c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f40:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f44:	98 a9       	ldd	r25, Y+48	; 0x30
    2f46:	2b ea       	ldi	r18, 0xAB	; 171
    2f48:	3a ea       	ldi	r19, 0xAA	; 170
    2f4a:	4a ea       	ldi	r20, 0xAA	; 170
    2f4c:	50 e4       	ldi	r21, 0x40	; 64
    2f4e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	89 a7       	std	Y+41, r24	; 0x29
    2f58:	9a a7       	std	Y+42, r25	; 0x2a
    2f5a:	ab a7       	std	Y+43, r26	; 0x2b
    2f5c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	1c f4       	brge	.+6      	; 0x2f7c <LCD_SendInstruction+0xbce>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	88 a7       	std	Y+40, r24	; 0x28
    2f7a:	91 c0       	rjmp	.+290    	; 0x309e <LCD_SendInstruction+0xcf0>
	else if (__tmp > 255)
    2f7c:	69 a5       	ldd	r22, Y+41	; 0x29
    2f7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	53 e4       	ldi	r21, 0x43	; 67
    2f8c:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	0c f0       	brlt	.+2      	; 0x2f96 <LCD_SendInstruction+0xbe8>
    2f94:	7b c0       	rjmp	.+246    	; 0x308c <LCD_SendInstruction+0xcde>
	{
		_delay_ms(__us / 1000.0);
    2f96:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f98:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	4a e7       	ldi	r20, 0x7A	; 122
    2fa4:	54 e4       	ldi	r21, 0x44	; 68
    2fa6:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	8c a3       	std	Y+36, r24	; 0x24
    2fb0:	9d a3       	std	Y+37, r25	; 0x25
    2fb2:	ae a3       	std	Y+38, r26	; 0x26
    2fb4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	6c a1       	ldd	r22, Y+36	; 0x24
    2fb8:	7d a1       	ldd	r23, Y+37	; 0x25
    2fba:	8e a1       	ldd	r24, Y+38	; 0x26
    2fbc:	9f a1       	ldd	r25, Y+39	; 0x27
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4a e7       	ldi	r20, 0x7A	; 122
    2fc4:	55 e4       	ldi	r21, 0x45	; 69
    2fc6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	88 a3       	std	Y+32, r24	; 0x20
    2fd0:	99 a3       	std	Y+33, r25	; 0x21
    2fd2:	aa a3       	std	Y+34, r26	; 0x22
    2fd4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2fd6:	68 a1       	ldd	r22, Y+32	; 0x20
    2fd8:	79 a1       	ldd	r23, Y+33	; 0x21
    2fda:	8a a1       	ldd	r24, Y+34	; 0x22
    2fdc:	9b a1       	ldd	r25, Y+35	; 0x23
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e8       	ldi	r20, 0x80	; 128
    2fe4:	5f e3       	ldi	r21, 0x3F	; 63
    2fe6:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2fea:	88 23       	and	r24, r24
    2fec:	2c f4       	brge	.+10     	; 0x2ff8 <LCD_SendInstruction+0xc4a>
		__ticks = 1;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ff4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ff6:	3f c0       	rjmp	.+126    	; 0x3076 <LCD_SendInstruction+0xcc8>
	else if (__tmp > 65535)
    2ff8:	68 a1       	ldd	r22, Y+32	; 0x20
    2ffa:	79 a1       	ldd	r23, Y+33	; 0x21
    2ffc:	8a a1       	ldd	r24, Y+34	; 0x22
    2ffe:	9b a1       	ldd	r25, Y+35	; 0x23
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	3f ef       	ldi	r19, 0xFF	; 255
    3004:	4f e7       	ldi	r20, 0x7F	; 127
    3006:	57 e4       	ldi	r21, 0x47	; 71
    3008:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    300c:	18 16       	cp	r1, r24
    300e:	4c f5       	brge	.+82     	; 0x3062 <LCD_SendInstruction+0xcb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3010:	6c a1       	ldd	r22, Y+36	; 0x24
    3012:	7d a1       	ldd	r23, Y+37	; 0x25
    3014:	8e a1       	ldd	r24, Y+38	; 0x26
    3016:	9f a1       	ldd	r25, Y+39	; 0x27
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e2       	ldi	r20, 0x20	; 32
    301e:	51 e4       	ldi	r21, 0x41	; 65
    3020:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9f 8f       	std	Y+31, r25	; 0x1f
    3036:	8e 8f       	std	Y+30, r24	; 0x1e
    3038:	0f c0       	rjmp	.+30     	; 0x3058 <LCD_SendInstruction+0xcaa>
    303a:	80 e9       	ldi	r24, 0x90	; 144
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	9d 8f       	std	Y+29, r25	; 0x1d
    3040:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3042:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3044:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <LCD_SendInstruction+0xc98>
    304a:	9d 8f       	std	Y+29, r25	; 0x1d
    304c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3050:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	9f 8f       	std	Y+31, r25	; 0x1f
    3056:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    305a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	69 f7       	brne	.-38     	; 0x303a <LCD_SendInstruction+0xc8c>
    3060:	24 c0       	rjmp	.+72     	; 0x30aa <LCD_SendInstruction+0xcfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3062:	68 a1       	ldd	r22, Y+32	; 0x20
    3064:	79 a1       	ldd	r23, Y+33	; 0x21
    3066:	8a a1       	ldd	r24, Y+34	; 0x22
    3068:	9b a1       	ldd	r25, Y+35	; 0x23
    306a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9f 8f       	std	Y+31, r25	; 0x1f
    3074:	8e 8f       	std	Y+30, r24	; 0x1e
    3076:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3078:	9f 8d       	ldd	r25, Y+31	; 0x1f
    307a:	9b 8f       	std	Y+27, r25	; 0x1b
    307c:	8a 8f       	std	Y+26, r24	; 0x1a
    307e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3080:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <LCD_SendInstruction+0xcd4>
    3086:	9b 8f       	std	Y+27, r25	; 0x1b
    3088:	8a 8f       	std	Y+26, r24	; 0x1a
    308a:	0f c0       	rjmp	.+30     	; 0x30aa <LCD_SendInstruction+0xcfc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    308c:	69 a5       	ldd	r22, Y+41	; 0x29
    308e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3090:	8b a5       	ldd	r24, Y+43	; 0x2b
    3092:	9c a5       	ldd	r25, Y+44	; 0x2c
    3094:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	88 a7       	std	Y+40, r24	; 0x28
    309e:	88 a5       	ldd	r24, Y+40	; 0x28
    30a0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30a2:	89 8d       	ldd	r24, Y+25	; 0x19
    30a4:	8a 95       	dec	r24
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <LCD_SendInstruction+0xcf6>
    30a8:	89 8f       	std	Y+25, r24	; 0x19
	#else
		_delay_us(1);
	#endif
#endif
	/* bring down the enable pulse */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_LOW);
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a0 e8       	ldi	r26, 0x80	; 128
    30ba:	bf e3       	ldi	r27, 0x3F	; 63
    30bc:	8d 8b       	std	Y+21, r24	; 0x15
    30be:	9e 8b       	std	Y+22, r25	; 0x16
    30c0:	af 8b       	std	Y+23, r26	; 0x17
    30c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30c4:	6d 89       	ldd	r22, Y+21	; 0x15
    30c6:	7e 89       	ldd	r23, Y+22	; 0x16
    30c8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ca:	98 8d       	ldd	r25, Y+24	; 0x18
    30cc:	2b ea       	ldi	r18, 0xAB	; 171
    30ce:	3a ea       	ldi	r19, 0xAA	; 170
    30d0:	4a ea       	ldi	r20, 0xAA	; 170
    30d2:	50 e4       	ldi	r21, 0x40	; 64
    30d4:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	89 8b       	std	Y+17, r24	; 0x11
    30de:	9a 8b       	std	Y+18, r25	; 0x12
    30e0:	ab 8b       	std	Y+19, r26	; 0x13
    30e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30e4:	69 89       	ldd	r22, Y+17	; 0x11
    30e6:	7a 89       	ldd	r23, Y+18	; 0x12
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	1c f4       	brge	.+6      	; 0x3102 <LCD_SendInstruction+0xd54>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	88 8b       	std	Y+16, r24	; 0x10
    3100:	91 c0       	rjmp	.+290    	; 0x3224 <LCD_SendInstruction+0xe76>
	else if (__tmp > 255)
    3102:	69 89       	ldd	r22, Y+17	; 0x11
    3104:	7a 89       	ldd	r23, Y+18	; 0x12
    3106:	8b 89       	ldd	r24, Y+19	; 0x13
    3108:	9c 89       	ldd	r25, Y+20	; 0x14
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	53 e4       	ldi	r21, 0x43	; 67
    3112:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3116:	18 16       	cp	r1, r24
    3118:	0c f0       	brlt	.+2      	; 0x311c <LCD_SendInstruction+0xd6e>
    311a:	7b c0       	rjmp	.+246    	; 0x3212 <LCD_SendInstruction+0xe64>
	{
		_delay_ms(__us / 1000.0);
    311c:	6d 89       	ldd	r22, Y+21	; 0x15
    311e:	7e 89       	ldd	r23, Y+22	; 0x16
    3120:	8f 89       	ldd	r24, Y+23	; 0x17
    3122:	98 8d       	ldd	r25, Y+24	; 0x18
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	4a e7       	ldi	r20, 0x7A	; 122
    312a:	54 e4       	ldi	r21, 0x44	; 68
    312c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	8c 87       	std	Y+12, r24	; 0x0c
    3136:	9d 87       	std	Y+13, r25	; 0x0d
    3138:	ae 87       	std	Y+14, r26	; 0x0e
    313a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6c 85       	ldd	r22, Y+12	; 0x0c
    313e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3140:	8e 85       	ldd	r24, Y+14	; 0x0e
    3142:	9f 85       	ldd	r25, Y+15	; 0x0f
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a e7       	ldi	r20, 0x7A	; 122
    314a:	55 e4       	ldi	r21, 0x45	; 69
    314c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	88 87       	std	Y+8, r24	; 0x08
    3156:	99 87       	std	Y+9, r25	; 0x09
    3158:	aa 87       	std	Y+10, r26	; 0x0a
    315a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    315c:	68 85       	ldd	r22, Y+8	; 0x08
    315e:	79 85       	ldd	r23, Y+9	; 0x09
    3160:	8a 85       	ldd	r24, Y+10	; 0x0a
    3162:	9b 85       	ldd	r25, Y+11	; 0x0b
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <LCD_SendInstruction+0xdd0>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9f 83       	std	Y+7, r25	; 0x07
    317a:	8e 83       	std	Y+6, r24	; 0x06
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <LCD_SendInstruction+0xe4e>
	else if (__tmp > 65535)
    317e:	68 85       	ldd	r22, Y+8	; 0x08
    3180:	79 85       	ldd	r23, Y+9	; 0x09
    3182:	8a 85       	ldd	r24, Y+10	; 0x0a
    3184:	9b 85       	ldd	r25, Y+11	; 0x0b
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <LCD_SendInstruction+0xe3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6c 85       	ldd	r22, Y+12	; 0x0c
    3198:	7d 85       	ldd	r23, Y+13	; 0x0d
    319a:	8e 85       	ldd	r24, Y+14	; 0x0e
    319c:	9f 85       	ldd	r25, Y+15	; 0x0f
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9f 83       	std	Y+7, r25	; 0x07
    31bc:	8e 83       	std	Y+6, r24	; 0x06
    31be:	0f c0       	rjmp	.+30     	; 0x31de <LCD_SendInstruction+0xe30>
    31c0:	80 e9       	ldi	r24, 0x90	; 144
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	9d 83       	std	Y+5, r25	; 0x05
    31c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ca:	9d 81       	ldd	r25, Y+5	; 0x05
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <LCD_SendInstruction+0xe1e>
    31d0:	9d 83       	std	Y+5, r25	; 0x05
    31d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	8e 81       	ldd	r24, Y+6	; 0x06
    31d6:	9f 81       	ldd	r25, Y+7	; 0x07
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	9f 83       	std	Y+7, r25	; 0x07
    31dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	8e 81       	ldd	r24, Y+6	; 0x06
    31e0:	9f 81       	ldd	r25, Y+7	; 0x07
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <LCD_SendInstruction+0xe12>
    31e6:	24 c0       	rjmp	.+72     	; 0x3230 <LCD_SendInstruction+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	68 85       	ldd	r22, Y+8	; 0x08
    31ea:	79 85       	ldd	r23, Y+9	; 0x09
    31ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9f 83       	std	Y+7, r25	; 0x07
    31fa:	8e 83       	std	Y+6, r24	; 0x06
    31fc:	8e 81       	ldd	r24, Y+6	; 0x06
    31fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3200:	9b 83       	std	Y+3, r25	; 0x03
    3202:	8a 83       	std	Y+2, r24	; 0x02
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	9b 81       	ldd	r25, Y+3	; 0x03
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_SendInstruction+0xe5a>
    320c:	9b 83       	std	Y+3, r25	; 0x03
    320e:	8a 83       	std	Y+2, r24	; 0x02
    3210:	0f c0       	rjmp	.+30     	; 0x3230 <LCD_SendInstruction+0xe82>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3212:	69 89       	ldd	r22, Y+17	; 0x11
    3214:	7a 89       	ldd	r23, Y+18	; 0x12
    3216:	8b 89       	ldd	r24, Y+19	; 0x13
    3218:	9c 89       	ldd	r25, Y+20	; 0x14
    321a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	88 8b       	std	Y+16, r24	; 0x10
    3224:	88 89       	ldd	r24, Y+16	; 0x10
    3226:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	8a 95       	dec	r24
    322c:	f1 f7       	brne	.-4      	; 0x322a <LCD_SendInstruction+0xe7c>
    322e:	89 83       	std	Y+1, r24	; 0x01
	#if LCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
}
    3230:	c7 55       	subi	r28, 0x57	; 87
    3232:	df 4f       	sbci	r29, 0xFF	; 255
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	08 95       	ret

00003248 <LCD_SelectRowColumn>:

void LCD_SelectRowColumn(uint8 Row, uint8 Column) {
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <LCD_SelectRowColumn+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LCD_SelectRowColumn+0x8>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	8a 83       	std	Y+2, r24	; 0x02
    3258:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8Local_AddressInstruction = 0x00U;
    325a:	19 82       	std	Y+1, r1	; 0x01
	switch (Row) {
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	3d 83       	std	Y+5, r19	; 0x05
    3264:	2c 83       	std	Y+4, r18	; 0x04
    3266:	8c 81       	ldd	r24, Y+4	; 0x04
    3268:	9d 81       	ldd	r25, Y+5	; 0x05
    326a:	81 30       	cpi	r24, 0x01	; 1
    326c:	91 05       	cpc	r25, r1
    326e:	c9 f0       	breq	.+50     	; 0x32a2 <LCD_SelectRowColumn+0x5a>
    3270:	2c 81       	ldd	r18, Y+4	; 0x04
    3272:	3d 81       	ldd	r19, Y+5	; 0x05
    3274:	22 30       	cpi	r18, 0x02	; 2
    3276:	31 05       	cpc	r19, r1
    3278:	2c f4       	brge	.+10     	; 0x3284 <LCD_SelectRowColumn+0x3c>
    327a:	8c 81       	ldd	r24, Y+4	; 0x04
    327c:	9d 81       	ldd	r25, Y+5	; 0x05
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	61 f0       	breq	.+24     	; 0x329a <LCD_SelectRowColumn+0x52>
    3282:	1a c0       	rjmp	.+52     	; 0x32b8 <LCD_SelectRowColumn+0x70>
    3284:	2c 81       	ldd	r18, Y+4	; 0x04
    3286:	3d 81       	ldd	r19, Y+5	; 0x05
    3288:	22 30       	cpi	r18, 0x02	; 2
    328a:	31 05       	cpc	r19, r1
    328c:	71 f0       	breq	.+28     	; 0x32aa <LCD_SelectRowColumn+0x62>
    328e:	8c 81       	ldd	r24, Y+4	; 0x04
    3290:	9d 81       	ldd	r25, Y+5	; 0x05
    3292:	83 30       	cpi	r24, 0x03	; 3
    3294:	91 05       	cpc	r25, r1
    3296:	69 f0       	breq	.+26     	; 0x32b2 <LCD_SelectRowColumn+0x6a>
    3298:	0f c0       	rjmp	.+30     	; 0x32b8 <LCD_SelectRowColumn+0x70>
		case 0:
			u8Local_AddressInstruction = (LCD_DDRAM_PREFIX | LCD_1ST_LINE_ADDRESS_PREFIX | Column);
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	80 68       	ori	r24, 0x80	; 128
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	0b c0       	rjmp	.+22     	; 0x32b8 <LCD_SelectRowColumn+0x70>
			break;
		case 1:
			u8Local_AddressInstruction = (LCD_DDRAM_PREFIX | LCD_2ND_LINE_ADDRESS_PREFIX | Column);
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	80 6c       	ori	r24, 0xC0	; 192
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	07 c0       	rjmp	.+14     	; 0x32b8 <LCD_SelectRowColumn+0x70>
			break;
		case 2:
			u8Local_AddressInstruction = (LCD_DDRAM_PREFIX | LCD_3RD_LINE_ADDRESS_PREFIX | Column);
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	84 69       	ori	r24, 0x94	; 148
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <LCD_SelectRowColumn+0x70>
			break;
		case 3:
			u8Local_AddressInstruction = (LCD_DDRAM_PREFIX | LCD_4th_LINE_ADDRESS_PREFIX | Column);
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	84 6d       	ori	r24, 0xD4	; 212
    32b6:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
	LCD_SendInstruction(u8Local_AddressInstruction);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_SendInstruction>
}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <LCD_DisplayCharacter>:

void LCD_DisplayCharacter(char Data) {
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	c9 5a       	subi	r28, 0xA9	; 169
    32dc:	d0 40       	sbci	r29, 0x00	; 0
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	fe 01       	movw	r30, r28
    32ea:	e7 55       	subi	r30, 0x57	; 87
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 83       	st	Z, r24
	/* Select Instruction Register */
	DIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(LCD_CTRL_PORT, LCD_RW_PIN, LCD_WRITE_MODE);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	62 e0       	ldi	r22, 0x02	; 2
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    3304:	fe 01       	movw	r30, r28
    3306:	eb 55       	subi	r30, 0x5B	; 91
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	a0 e8       	ldi	r26, 0x80	; 128
    3310:	bf e3       	ldi	r27, 0x3F	; 63
    3312:	80 83       	st	Z, r24
    3314:	91 83       	std	Z+1, r25	; 0x01
    3316:	a2 83       	std	Z+2, r26	; 0x02
    3318:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    331a:	8e 01       	movw	r16, r28
    331c:	0f 55       	subi	r16, 0x5F	; 95
    331e:	1f 4f       	sbci	r17, 0xFF	; 255
    3320:	fe 01       	movw	r30, r28
    3322:	eb 55       	subi	r30, 0x5B	; 91
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	60 81       	ld	r22, Z
    3328:	71 81       	ldd	r23, Z+1	; 0x01
    332a:	82 81       	ldd	r24, Z+2	; 0x02
    332c:	93 81       	ldd	r25, Z+3	; 0x03
    332e:	2b ea       	ldi	r18, 0xAB	; 171
    3330:	3a ea       	ldi	r19, 0xAA	; 170
    3332:	4a ea       	ldi	r20, 0xAA	; 170
    3334:	50 e4       	ldi	r21, 0x40	; 64
    3336:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	f8 01       	movw	r30, r16
    3340:	80 83       	st	Z, r24
    3342:	91 83       	std	Z+1, r25	; 0x01
    3344:	a2 83       	std	Z+2, r26	; 0x02
    3346:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3348:	fe 01       	movw	r30, r28
    334a:	ef 55       	subi	r30, 0x5F	; 95
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	60 81       	ld	r22, Z
    3350:	71 81       	ldd	r23, Z+1	; 0x01
    3352:	82 81       	ldd	r24, Z+2	; 0x02
    3354:	93 81       	ldd	r25, Z+3	; 0x03
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	34 f4       	brge	.+12     	; 0x3372 <LCD_DisplayCharacter+0xa4>
		__ticks = 1;
    3366:	fe 01       	movw	r30, r28
    3368:	e0 56       	subi	r30, 0x60	; 96
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	80 83       	st	Z, r24
    3370:	e0 c0       	rjmp	.+448    	; 0x3532 <LCD_DisplayCharacter+0x264>
	else if (__tmp > 255)
    3372:	fe 01       	movw	r30, r28
    3374:	ef 55       	subi	r30, 0x5F	; 95
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4f e7       	ldi	r20, 0x7F	; 127
    3386:	53 e4       	ldi	r21, 0x43	; 67
    3388:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    338c:	18 16       	cp	r1, r24
    338e:	0c f0       	brlt	.+2      	; 0x3392 <LCD_DisplayCharacter+0xc4>
    3390:	c0 c0       	rjmp	.+384    	; 0x3512 <LCD_DisplayCharacter+0x244>
	{
		_delay_ms(__us / 1000.0);
    3392:	fe 01       	movw	r30, r28
    3394:	eb 55       	subi	r30, 0x5B	; 91
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	4a e7       	ldi	r20, 0x7A	; 122
    33a6:	54 e4       	ldi	r21, 0x44	; 68
    33a8:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	fe 01       	movw	r30, r28
    33b2:	e4 56       	subi	r30, 0x64	; 100
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 83       	st	Z, r24
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	a2 83       	std	Z+2, r26	; 0x02
    33bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33be:	8e 01       	movw	r16, r28
    33c0:	08 56       	subi	r16, 0x68	; 104
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	fe 01       	movw	r30, r28
    33c6:	e4 56       	subi	r30, 0x64	; 100
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a e7       	ldi	r20, 0x7A	; 122
    33d8:	55 e4       	ldi	r21, 0x45	; 69
    33da:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	80 83       	st	Z, r24
    33e6:	91 83       	std	Z+1, r25	; 0x01
    33e8:	a2 83       	std	Z+2, r26	; 0x02
    33ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ec:	fe 01       	movw	r30, r28
    33ee:	e8 56       	subi	r30, 0x68	; 104
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	44 f4       	brge	.+16     	; 0x341a <LCD_DisplayCharacter+0x14c>
		__ticks = 1;
    340a:	fe 01       	movw	r30, r28
    340c:	ea 56       	subi	r30, 0x6A	; 106
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	91 83       	std	Z+1, r25	; 0x01
    3416:	80 83       	st	Z, r24
    3418:	64 c0       	rjmp	.+200    	; 0x34e2 <LCD_DisplayCharacter+0x214>
	else if (__tmp > 65535)
    341a:	fe 01       	movw	r30, r28
    341c:	e8 56       	subi	r30, 0x68	; 104
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	60 81       	ld	r22, Z
    3422:	71 81       	ldd	r23, Z+1	; 0x01
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	93 81       	ldd	r25, Z+3	; 0x03
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	0c f0       	brlt	.+2      	; 0x343a <LCD_DisplayCharacter+0x16c>
    3438:	43 c0       	rjmp	.+134    	; 0x34c0 <LCD_DisplayCharacter+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343a:	fe 01       	movw	r30, r28
    343c:	e4 56       	subi	r30, 0x64	; 100
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	60 81       	ld	r22, Z
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	82 81       	ldd	r24, Z+2	; 0x02
    3446:	93 81       	ldd	r25, Z+3	; 0x03
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	8e 01       	movw	r16, r28
    345a:	0a 56       	subi	r16, 0x6A	; 106
    345c:	1f 4f       	sbci	r17, 0xFF	; 255
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	f8 01       	movw	r30, r16
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
    3470:	1f c0       	rjmp	.+62     	; 0x34b0 <LCD_DisplayCharacter+0x1e2>
    3472:	fe 01       	movw	r30, r28
    3474:	ec 56       	subi	r30, 0x6C	; 108
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 e9       	ldi	r24, 0x90	; 144
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3480:	fe 01       	movw	r30, r28
    3482:	ec 56       	subi	r30, 0x6C	; 108
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	80 81       	ld	r24, Z
    3488:	91 81       	ldd	r25, Z+1	; 0x01
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <LCD_DisplayCharacter+0x1bc>
    348e:	fe 01       	movw	r30, r28
    3490:	ec 56       	subi	r30, 0x6C	; 108
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3498:	de 01       	movw	r26, r28
    349a:	aa 56       	subi	r26, 0x6A	; 106
    349c:	bf 4f       	sbci	r27, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	ea 56       	subi	r30, 0x6A	; 106
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	11 96       	adiw	r26, 0x01	; 1
    34ac:	9c 93       	st	X, r25
    34ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	fe 01       	movw	r30, r28
    34b2:	ea 56       	subi	r30, 0x6A	; 106
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 81       	ld	r24, Z
    34b8:	91 81       	ldd	r25, Z+1	; 0x01
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	d1 f6       	brne	.-76     	; 0x3472 <LCD_DisplayCharacter+0x1a4>
    34be:	4b c0       	rjmp	.+150    	; 0x3556 <LCD_DisplayCharacter+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c0:	8e 01       	movw	r16, r28
    34c2:	0a 56       	subi	r16, 0x6A	; 106
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	fe 01       	movw	r30, r28
    34c8:	e8 56       	subi	r30, 0x68	; 104
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	f8 01       	movw	r30, r16
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
    34e2:	de 01       	movw	r26, r28
    34e4:	ae 56       	subi	r26, 0x6E	; 110
    34e6:	bf 4f       	sbci	r27, 0xFF	; 255
    34e8:	fe 01       	movw	r30, r28
    34ea:	ea 56       	subi	r30, 0x6A	; 106
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	11 96       	adiw	r26, 0x01	; 1
    34f4:	9c 93       	st	X, r25
    34f6:	8e 93       	st	-X, r24
    34f8:	fe 01       	movw	r30, r28
    34fa:	ee 56       	subi	r30, 0x6E	; 110
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 81       	ld	r24, Z
    3500:	91 81       	ldd	r25, Z+1	; 0x01
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <LCD_DisplayCharacter+0x234>
    3506:	fe 01       	movw	r30, r28
    3508:	ee 56       	subi	r30, 0x6E	; 110
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	91 83       	std	Z+1, r25	; 0x01
    350e:	80 83       	st	Z, r24
    3510:	22 c0       	rjmp	.+68     	; 0x3556 <LCD_DisplayCharacter+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3512:	8e 01       	movw	r16, r28
    3514:	00 56       	subi	r16, 0x60	; 96
    3516:	1f 4f       	sbci	r17, 0xFF	; 255
    3518:	fe 01       	movw	r30, r28
    351a:	ef 55       	subi	r30, 0x5F	; 95
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	60 81       	ld	r22, Z
    3520:	71 81       	ldd	r23, Z+1	; 0x01
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	93 81       	ldd	r25, Z+3	; 0x03
    3526:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	f8 01       	movw	r30, r16
    3530:	80 83       	st	Z, r24
    3532:	de 01       	movw	r26, r28
    3534:	af 56       	subi	r26, 0x6F	; 111
    3536:	bf 4f       	sbci	r27, 0xFF	; 255
    3538:	fe 01       	movw	r30, r28
    353a:	e0 56       	subi	r30, 0x60	; 96
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 81       	ld	r24, Z
    3540:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3542:	fe 01       	movw	r30, r28
    3544:	ef 56       	subi	r30, 0x6F	; 111
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	8a 95       	dec	r24
    354c:	f1 f7       	brne	.-4      	; 0x354a <LCD_DisplayCharacter+0x27c>
    354e:	fe 01       	movw	r30, r28
    3550:	ef 56       	subi	r30, 0x6F	; 111
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 83       	st	Z, r24
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
	/* Enable Pulse for Write Operation */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_HIGH);
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	41 e0       	ldi	r20, 0x01	; 1
    355c:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    3560:	fe 01       	movw	r30, r28
    3562:	e3 57       	subi	r30, 0x73	; 115
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	a0 e8       	ldi	r26, 0x80	; 128
    356c:	bf e3       	ldi	r27, 0x3F	; 63
    356e:	80 83       	st	Z, r24
    3570:	91 83       	std	Z+1, r25	; 0x01
    3572:	a2 83       	std	Z+2, r26	; 0x02
    3574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3576:	8e 01       	movw	r16, r28
    3578:	07 57       	subi	r16, 0x77	; 119
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	fe 01       	movw	r30, r28
    357e:	e3 57       	subi	r30, 0x73	; 115
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	2b ea       	ldi	r18, 0xAB	; 171
    358c:	3a ea       	ldi	r19, 0xAA	; 170
    358e:	4a ea       	ldi	r20, 0xAA	; 170
    3590:	50 e4       	ldi	r21, 0x40	; 64
    3592:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	f8 01       	movw	r30, r16
    359c:	80 83       	st	Z, r24
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	a2 83       	std	Z+2, r26	; 0x02
    35a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35a4:	fe 01       	movw	r30, r28
    35a6:	e7 57       	subi	r30, 0x77	; 119
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	60 81       	ld	r22, Z
    35ac:	71 81       	ldd	r23, Z+1	; 0x01
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	93 81       	ldd	r25, Z+3	; 0x03
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e8       	ldi	r20, 0x80	; 128
    35b8:	5f e3       	ldi	r21, 0x3F	; 63
    35ba:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    35be:	88 23       	and	r24, r24
    35c0:	34 f4       	brge	.+12     	; 0x35ce <LCD_DisplayCharacter+0x300>
		__ticks = 1;
    35c2:	fe 01       	movw	r30, r28
    35c4:	e8 57       	subi	r30, 0x78	; 120
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	80 83       	st	Z, r24
    35cc:	e0 c0       	rjmp	.+448    	; 0x378e <LCD_DisplayCharacter+0x4c0>
	else if (__tmp > 255)
    35ce:	fe 01       	movw	r30, r28
    35d0:	e7 57       	subi	r30, 0x77	; 119
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	53 e4       	ldi	r21, 0x43	; 67
    35e4:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	0c f0       	brlt	.+2      	; 0x35ee <LCD_DisplayCharacter+0x320>
    35ec:	c0 c0       	rjmp	.+384    	; 0x376e <LCD_DisplayCharacter+0x4a0>
	{
		_delay_ms(__us / 1000.0);
    35ee:	fe 01       	movw	r30, r28
    35f0:	e3 57       	subi	r30, 0x73	; 115
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a e7       	ldi	r20, 0x7A	; 122
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	fe 01       	movw	r30, r28
    360e:	ec 57       	subi	r30, 0x7C	; 124
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 83       	st	Z, r24
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	a2 83       	std	Z+2, r26	; 0x02
    3618:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361a:	8e 01       	movw	r16, r28
    361c:	00 58       	subi	r16, 0x80	; 128
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	fe 01       	movw	r30, r28
    3622:	ec 57       	subi	r30, 0x7C	; 124
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	4a e7       	ldi	r20, 0x7A	; 122
    3634:	55 e4       	ldi	r21, 0x45	; 69
    3636:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	f8 01       	movw	r30, r16
    3640:	80 83       	st	Z, r24
    3642:	91 83       	std	Z+1, r25	; 0x01
    3644:	a2 83       	std	Z+2, r26	; 0x02
    3646:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3648:	fe 01       	movw	r30, r28
    364a:	e0 58       	subi	r30, 0x80	; 128
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	60 81       	ld	r22, Z
    3650:	71 81       	ldd	r23, Z+1	; 0x01
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	93 81       	ldd	r25, Z+3	; 0x03
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e8       	ldi	r20, 0x80	; 128
    365c:	5f e3       	ldi	r21, 0x3F	; 63
    365e:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3662:	88 23       	and	r24, r24
    3664:	44 f4       	brge	.+16     	; 0x3676 <LCD_DisplayCharacter+0x3a8>
		__ticks = 1;
    3666:	fe 01       	movw	r30, r28
    3668:	e2 58       	subi	r30, 0x82	; 130
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	91 83       	std	Z+1, r25	; 0x01
    3672:	80 83       	st	Z, r24
    3674:	64 c0       	rjmp	.+200    	; 0x373e <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    3676:	fe 01       	movw	r30, r28
    3678:	e0 58       	subi	r30, 0x80	; 128
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	3f ef       	ldi	r19, 0xFF	; 255
    3688:	4f e7       	ldi	r20, 0x7F	; 127
    368a:	57 e4       	ldi	r21, 0x47	; 71
    368c:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3690:	18 16       	cp	r1, r24
    3692:	0c f0       	brlt	.+2      	; 0x3696 <LCD_DisplayCharacter+0x3c8>
    3694:	43 c0       	rjmp	.+134    	; 0x371c <LCD_DisplayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3696:	fe 01       	movw	r30, r28
    3698:	ec 57       	subi	r30, 0x7C	; 124
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	60 81       	ld	r22, Z
    369e:	71 81       	ldd	r23, Z+1	; 0x01
    36a0:	82 81       	ldd	r24, Z+2	; 0x02
    36a2:	93 81       	ldd	r25, Z+3	; 0x03
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	40 e2       	ldi	r20, 0x20	; 32
    36aa:	51 e4       	ldi	r21, 0x41	; 65
    36ac:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	8e 01       	movw	r16, r28
    36b6:	02 58       	subi	r16, 0x82	; 130
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	f8 01       	movw	r30, r16
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	80 83       	st	Z, r24
    36cc:	1f c0       	rjmp	.+62     	; 0x370c <LCD_DisplayCharacter+0x43e>
    36ce:	fe 01       	movw	r30, r28
    36d0:	e4 58       	subi	r30, 0x84	; 132
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	80 e9       	ldi	r24, 0x90	; 144
    36d6:	91 e0       	ldi	r25, 0x01	; 1
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36dc:	fe 01       	movw	r30, r28
    36de:	e4 58       	subi	r30, 0x84	; 132
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	91 81       	ldd	r25, Z+1	; 0x01
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <LCD_DisplayCharacter+0x418>
    36ea:	fe 01       	movw	r30, r28
    36ec:	e4 58       	subi	r30, 0x84	; 132
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f4:	de 01       	movw	r26, r28
    36f6:	a2 58       	subi	r26, 0x82	; 130
    36f8:	bf 4f       	sbci	r27, 0xFF	; 255
    36fa:	fe 01       	movw	r30, r28
    36fc:	e2 58       	subi	r30, 0x82	; 130
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	11 96       	adiw	r26, 0x01	; 1
    3708:	9c 93       	st	X, r25
    370a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370c:	fe 01       	movw	r30, r28
    370e:	e2 58       	subi	r30, 0x82	; 130
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	d1 f6       	brne	.-76     	; 0x36ce <LCD_DisplayCharacter+0x400>
    371a:	4b c0       	rjmp	.+150    	; 0x37b2 <LCD_DisplayCharacter+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    371c:	8e 01       	movw	r16, r28
    371e:	02 58       	subi	r16, 0x82	; 130
    3720:	1f 4f       	sbci	r17, 0xFF	; 255
    3722:	fe 01       	movw	r30, r28
    3724:	e0 58       	subi	r30, 0x80	; 128
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	60 81       	ld	r22, Z
    372a:	71 81       	ldd	r23, Z+1	; 0x01
    372c:	82 81       	ldd	r24, Z+2	; 0x02
    372e:	93 81       	ldd	r25, Z+3	; 0x03
    3730:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	f8 01       	movw	r30, r16
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	80 83       	st	Z, r24
    373e:	de 01       	movw	r26, r28
    3740:	a6 58       	subi	r26, 0x86	; 134
    3742:	bf 4f       	sbci	r27, 0xFF	; 255
    3744:	fe 01       	movw	r30, r28
    3746:	e2 58       	subi	r30, 0x82	; 130
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	11 96       	adiw	r26, 0x01	; 1
    3750:	9c 93       	st	X, r25
    3752:	8e 93       	st	-X, r24
    3754:	fe 01       	movw	r30, r28
    3756:	e6 58       	subi	r30, 0x86	; 134
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_DisplayCharacter+0x490>
    3762:	fe 01       	movw	r30, r28
    3764:	e6 58       	subi	r30, 0x86	; 134
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	80 83       	st	Z, r24
    376c:	22 c0       	rjmp	.+68     	; 0x37b2 <LCD_DisplayCharacter+0x4e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    376e:	8e 01       	movw	r16, r28
    3770:	08 57       	subi	r16, 0x78	; 120
    3772:	1f 4f       	sbci	r17, 0xFF	; 255
    3774:	fe 01       	movw	r30, r28
    3776:	e7 57       	subi	r30, 0x77	; 119
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	60 81       	ld	r22, Z
    377c:	71 81       	ldd	r23, Z+1	; 0x01
    377e:	82 81       	ldd	r24, Z+2	; 0x02
    3780:	93 81       	ldd	r25, Z+3	; 0x03
    3782:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	f8 01       	movw	r30, r16
    378c:	80 83       	st	Z, r24
    378e:	de 01       	movw	r26, r28
    3790:	a7 58       	subi	r26, 0x87	; 135
    3792:	bf 4f       	sbci	r27, 0xFF	; 255
    3794:	fe 01       	movw	r30, r28
    3796:	e8 57       	subi	r30, 0x78	; 120
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	80 81       	ld	r24, Z
    379c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    379e:	fe 01       	movw	r30, r28
    37a0:	e7 58       	subi	r30, 0x87	; 135
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 81       	ld	r24, Z
    37a6:	8a 95       	dec	r24
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <LCD_DisplayCharacter+0x4d8>
    37aa:	fe 01       	movw	r30, r28
    37ac:	e7 58       	subi	r30, 0x87	; 135
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 83       	st	Z, r24
		_delay_us(1);
	#endif
#else
	/* 4 bit mode */
	/* Write Higher Half of Instruction */
	DIO_WriteHighHalfPort(LCD_DATA_PORT, (Data & 0xF0U));
    37b2:	fe 01       	movw	r30, r28
    37b4:	e7 55       	subi	r30, 0x57	; 87
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	80 81       	ld	r24, Z
    37ba:	98 2f       	mov	r25, r24
    37bc:	90 7f       	andi	r25, 0xF0	; 240
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	69 2f       	mov	r22, r25
    37c2:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <DIO_WriteHighHalfPort>
    37c6:	fe 01       	movw	r30, r28
    37c8:	eb 58       	subi	r30, 0x8B	; 139
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e8       	ldi	r26, 0x80	; 128
    37d2:	bf e3       	ldi	r27, 0x3F	; 63
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37dc:	8e 01       	movw	r16, r28
    37de:	0f 58       	subi	r16, 0x8F	; 143
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	eb 58       	subi	r30, 0x8B	; 139
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	2b ea       	ldi	r18, 0xAB	; 171
    37f2:	3a ea       	ldi	r19, 0xAA	; 170
    37f4:	4a ea       	ldi	r20, 0xAA	; 170
    37f6:	50 e4       	ldi	r21, 0x40	; 64
    37f8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	f8 01       	movw	r30, r16
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	a2 83       	std	Z+2, r26	; 0x02
    3808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    380a:	fe 01       	movw	r30, r28
    380c:	ef 58       	subi	r30, 0x8F	; 143
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	34 f4       	brge	.+12     	; 0x3834 <LCD_DisplayCharacter+0x566>
		__ticks = 1;
    3828:	fe 01       	movw	r30, r28
    382a:	e0 59       	subi	r30, 0x90	; 144
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 83       	st	Z, r24
    3832:	e0 c0       	rjmp	.+448    	; 0x39f4 <LCD_DisplayCharacter+0x726>
	else if (__tmp > 255)
    3834:	fe 01       	movw	r30, r28
    3836:	ef 58       	subi	r30, 0x8F	; 143
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	60 81       	ld	r22, Z
    383c:	71 81       	ldd	r23, Z+1	; 0x01
    383e:	82 81       	ldd	r24, Z+2	; 0x02
    3840:	93 81       	ldd	r25, Z+3	; 0x03
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4f e7       	ldi	r20, 0x7F	; 127
    3848:	53 e4       	ldi	r21, 0x43	; 67
    384a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    384e:	18 16       	cp	r1, r24
    3850:	0c f0       	brlt	.+2      	; 0x3854 <LCD_DisplayCharacter+0x586>
    3852:	c0 c0       	rjmp	.+384    	; 0x39d4 <LCD_DisplayCharacter+0x706>
	{
		_delay_ms(__us / 1000.0);
    3854:	fe 01       	movw	r30, r28
    3856:	eb 58       	subi	r30, 0x8B	; 139
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	60 81       	ld	r22, Z
    385c:	71 81       	ldd	r23, Z+1	; 0x01
    385e:	82 81       	ldd	r24, Z+2	; 0x02
    3860:	93 81       	ldd	r25, Z+3	; 0x03
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4a e7       	ldi	r20, 0x7A	; 122
    3868:	54 e4       	ldi	r21, 0x44	; 68
    386a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	fe 01       	movw	r30, r28
    3874:	e4 59       	subi	r30, 0x94	; 148
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 83       	st	Z, r24
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	a2 83       	std	Z+2, r26	; 0x02
    387e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3880:	8e 01       	movw	r16, r28
    3882:	08 59       	subi	r16, 0x98	; 152
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	fe 01       	movw	r30, r28
    3888:	e4 59       	subi	r30, 0x94	; 148
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	4a e7       	ldi	r20, 0x7A	; 122
    389a:	55 e4       	ldi	r21, 0x45	; 69
    389c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	f8 01       	movw	r30, r16
    38a6:	80 83       	st	Z, r24
    38a8:	91 83       	std	Z+1, r25	; 0x01
    38aa:	a2 83       	std	Z+2, r26	; 0x02
    38ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ae:	fe 01       	movw	r30, r28
    38b0:	e8 59       	subi	r30, 0x98	; 152
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	44 f4       	brge	.+16     	; 0x38dc <LCD_DisplayCharacter+0x60e>
		__ticks = 1;
    38cc:	fe 01       	movw	r30, r28
    38ce:	ea 59       	subi	r30, 0x9A	; 154
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	91 83       	std	Z+1, r25	; 0x01
    38d8:	80 83       	st	Z, r24
    38da:	64 c0       	rjmp	.+200    	; 0x39a4 <LCD_DisplayCharacter+0x6d6>
	else if (__tmp > 65535)
    38dc:	fe 01       	movw	r30, r28
    38de:	e8 59       	subi	r30, 0x98	; 152
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	60 81       	ld	r22, Z
    38e4:	71 81       	ldd	r23, Z+1	; 0x01
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	4f e7       	ldi	r20, 0x7F	; 127
    38f0:	57 e4       	ldi	r21, 0x47	; 71
    38f2:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    38f6:	18 16       	cp	r1, r24
    38f8:	0c f0       	brlt	.+2      	; 0x38fc <LCD_DisplayCharacter+0x62e>
    38fa:	43 c0       	rjmp	.+134    	; 0x3982 <LCD_DisplayCharacter+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fc:	fe 01       	movw	r30, r28
    38fe:	e4 59       	subi	r30, 0x94	; 148
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e2       	ldi	r20, 0x20	; 32
    3910:	51 e4       	ldi	r21, 0x41	; 65
    3912:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	8e 01       	movw	r16, r28
    391c:	0a 59       	subi	r16, 0x9A	; 154
    391e:	1f 4f       	sbci	r17, 0xFF	; 255
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	f8 01       	movw	r30, r16
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
    3932:	1f c0       	rjmp	.+62     	; 0x3972 <LCD_DisplayCharacter+0x6a4>
    3934:	fe 01       	movw	r30, r28
    3936:	ec 59       	subi	r30, 0x9C	; 156
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 e9       	ldi	r24, 0x90	; 144
    393c:	91 e0       	ldi	r25, 0x01	; 1
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3942:	fe 01       	movw	r30, r28
    3944:	ec 59       	subi	r30, 0x9C	; 156
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <LCD_DisplayCharacter+0x67e>
    3950:	fe 01       	movw	r30, r28
    3952:	ec 59       	subi	r30, 0x9C	; 156
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395a:	de 01       	movw	r26, r28
    395c:	aa 59       	subi	r26, 0x9A	; 154
    395e:	bf 4f       	sbci	r27, 0xFF	; 255
    3960:	fe 01       	movw	r30, r28
    3962:	ea 59       	subi	r30, 0x9A	; 154
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	11 96       	adiw	r26, 0x01	; 1
    396e:	9c 93       	st	X, r25
    3970:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3972:	fe 01       	movw	r30, r28
    3974:	ea 59       	subi	r30, 0x9A	; 154
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	d1 f6       	brne	.-76     	; 0x3934 <LCD_DisplayCharacter+0x666>
    3980:	4b c0       	rjmp	.+150    	; 0x3a18 <LCD_DisplayCharacter+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	8e 01       	movw	r16, r28
    3984:	0a 59       	subi	r16, 0x9A	; 154
    3986:	1f 4f       	sbci	r17, 0xFF	; 255
    3988:	fe 01       	movw	r30, r28
    398a:	e8 59       	subi	r30, 0x98	; 152
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	60 81       	ld	r22, Z
    3990:	71 81       	ldd	r23, Z+1	; 0x01
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	f8 01       	movw	r30, r16
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	80 83       	st	Z, r24
    39a4:	de 01       	movw	r26, r28
    39a6:	ae 59       	subi	r26, 0x9E	; 158
    39a8:	bf 4f       	sbci	r27, 0xFF	; 255
    39aa:	fe 01       	movw	r30, r28
    39ac:	ea 59       	subi	r30, 0x9A	; 154
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	11 96       	adiw	r26, 0x01	; 1
    39b6:	9c 93       	st	X, r25
    39b8:	8e 93       	st	-X, r24
    39ba:	fe 01       	movw	r30, r28
    39bc:	ee 59       	subi	r30, 0x9E	; 158
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <LCD_DisplayCharacter+0x6f6>
    39c8:	fe 01       	movw	r30, r28
    39ca:	ee 59       	subi	r30, 0x9E	; 158
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	80 83       	st	Z, r24
    39d2:	22 c0       	rjmp	.+68     	; 0x3a18 <LCD_DisplayCharacter+0x74a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39d4:	8e 01       	movw	r16, r28
    39d6:	00 59       	subi	r16, 0x90	; 144
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	fe 01       	movw	r30, r28
    39dc:	ef 58       	subi	r30, 0x8F	; 143
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	f8 01       	movw	r30, r16
    39f2:	80 83       	st	Z, r24
    39f4:	de 01       	movw	r26, r28
    39f6:	af 59       	subi	r26, 0x9F	; 159
    39f8:	bf 4f       	sbci	r27, 0xFF	; 255
    39fa:	fe 01       	movw	r30, r28
    39fc:	e0 59       	subi	r30, 0x90	; 144
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 81       	ld	r24, Z
    3a02:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a04:	fe 01       	movw	r30, r28
    3a06:	ef 59       	subi	r30, 0x9F	; 159
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8a 95       	dec	r24
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <LCD_DisplayCharacter+0x73e>
    3a10:	fe 01       	movw	r30, r28
    3a12:	ef 59       	subi	r30, 0x9F	; 159
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 83       	st	Z, r24
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
	/* bring down the enable pulse */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_LOW);
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    3a22:	fe 01       	movw	r30, r28
    3a24:	e3 5a       	subi	r30, 0xA3	; 163
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	a0 e8       	ldi	r26, 0x80	; 128
    3a2e:	bf e3       	ldi	r27, 0x3F	; 63
    3a30:	80 83       	st	Z, r24
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	a2 83       	std	Z+2, r26	; 0x02
    3a36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a38:	8e 01       	movw	r16, r28
    3a3a:	07 5a       	subi	r16, 0xA7	; 167
    3a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e3 5a       	subi	r30, 0xA3	; 163
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	60 81       	ld	r22, Z
    3a46:	71 81       	ldd	r23, Z+1	; 0x01
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	93 81       	ldd	r25, Z+3	; 0x03
    3a4c:	2b ea       	ldi	r18, 0xAB	; 171
    3a4e:	3a ea       	ldi	r19, 0xAA	; 170
    3a50:	4a ea       	ldi	r20, 0xAA	; 170
    3a52:	50 e4       	ldi	r21, 0x40	; 64
    3a54:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	f8 01       	movw	r30, r16
    3a5e:	80 83       	st	Z, r24
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	a2 83       	std	Z+2, r26	; 0x02
    3a64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e7 5a       	subi	r30, 0xA7	; 167
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e8       	ldi	r20, 0x80	; 128
    3a7a:	5f e3       	ldi	r21, 0x3F	; 63
    3a7c:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3a80:	88 23       	and	r24, r24
    3a82:	34 f4       	brge	.+12     	; 0x3a90 <LCD_DisplayCharacter+0x7c2>
		__ticks = 1;
    3a84:	fe 01       	movw	r30, r28
    3a86:	e8 5a       	subi	r30, 0xA8	; 168
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	80 83       	st	Z, r24
    3a8e:	e0 c0       	rjmp	.+448    	; 0x3c50 <LCD_DisplayCharacter+0x982>
	else if (__tmp > 255)
    3a90:	fe 01       	movw	r30, r28
    3a92:	e7 5a       	subi	r30, 0xA7	; 167
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	60 81       	ld	r22, Z
    3a98:	71 81       	ldd	r23, Z+1	; 0x01
    3a9a:	82 81       	ldd	r24, Z+2	; 0x02
    3a9c:	93 81       	ldd	r25, Z+3	; 0x03
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	4f e7       	ldi	r20, 0x7F	; 127
    3aa4:	53 e4       	ldi	r21, 0x43	; 67
    3aa6:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3aaa:	18 16       	cp	r1, r24
    3aac:	0c f0       	brlt	.+2      	; 0x3ab0 <LCD_DisplayCharacter+0x7e2>
    3aae:	c0 c0       	rjmp	.+384    	; 0x3c30 <LCD_DisplayCharacter+0x962>
	{
		_delay_ms(__us / 1000.0);
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e3 5a       	subi	r30, 0xA3	; 163
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	60 81       	ld	r22, Z
    3ab8:	71 81       	ldd	r23, Z+1	; 0x01
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	93 81       	ldd	r25, Z+3	; 0x03
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	4a e7       	ldi	r20, 0x7A	; 122
    3ac4:	54 e4       	ldi	r21, 0x44	; 68
    3ac6:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	fe 01       	movw	r30, r28
    3ad0:	ec 5a       	subi	r30, 0xAC	; 172
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	80 83       	st	Z, r24
    3ad6:	91 83       	std	Z+1, r25	; 0x01
    3ad8:	a2 83       	std	Z+2, r26	; 0x02
    3ada:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3adc:	8e 01       	movw	r16, r28
    3ade:	00 5b       	subi	r16, 0xB0	; 176
    3ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	ec 5a       	subi	r30, 0xAC	; 172
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	4a e7       	ldi	r20, 0x7A	; 122
    3af6:	55 e4       	ldi	r21, 0x45	; 69
    3af8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	f8 01       	movw	r30, r16
    3b02:	80 83       	st	Z, r24
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	a2 83       	std	Z+2, r26	; 0x02
    3b08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e0 5b       	subi	r30, 0xB0	; 176
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	60 81       	ld	r22, Z
    3b12:	71 81       	ldd	r23, Z+1	; 0x01
    3b14:	82 81       	ldd	r24, Z+2	; 0x02
    3b16:	93 81       	ldd	r25, Z+3	; 0x03
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e8       	ldi	r20, 0x80	; 128
    3b1e:	5f e3       	ldi	r21, 0x3F	; 63
    3b20:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3b24:	88 23       	and	r24, r24
    3b26:	44 f4       	brge	.+16     	; 0x3b38 <LCD_DisplayCharacter+0x86a>
		__ticks = 1;
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e2 5b       	subi	r30, 0xB2	; 178
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	80 83       	st	Z, r24
    3b36:	64 c0       	rjmp	.+200    	; 0x3c00 <LCD_DisplayCharacter+0x932>
	else if (__tmp > 65535)
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e0 5b       	subi	r30, 0xB0	; 176
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	4f e7       	ldi	r20, 0x7F	; 127
    3b4c:	57 e4       	ldi	r21, 0x47	; 71
    3b4e:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	0c f0       	brlt	.+2      	; 0x3b58 <LCD_DisplayCharacter+0x88a>
    3b56:	43 c0       	rjmp	.+134    	; 0x3bde <LCD_DisplayCharacter+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b58:	fe 01       	movw	r30, r28
    3b5a:	ec 5a       	subi	r30, 0xAC	; 172
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e2       	ldi	r20, 0x20	; 32
    3b6c:	51 e4       	ldi	r21, 0x41	; 65
    3b6e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	8e 01       	movw	r16, r28
    3b78:	02 5b       	subi	r16, 0xB2	; 178
    3b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	f8 01       	movw	r30, r16
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    3b8e:	1f c0       	rjmp	.+62     	; 0x3bce <LCD_DisplayCharacter+0x900>
    3b90:	fe 01       	movw	r30, r28
    3b92:	e4 5b       	subi	r30, 0xB4	; 180
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 e9       	ldi	r24, 0x90	; 144
    3b98:	91 e0       	ldi	r25, 0x01	; 1
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	e4 5b       	subi	r30, 0xB4	; 180
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <LCD_DisplayCharacter+0x8da>
    3bac:	fe 01       	movw	r30, r28
    3bae:	e4 5b       	subi	r30, 0xB4	; 180
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb6:	de 01       	movw	r26, r28
    3bb8:	a2 5b       	subi	r26, 0xB2	; 178
    3bba:	bf 4f       	sbci	r27, 0xFF	; 255
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e2 5b       	subi	r30, 0xB2	; 178
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	80 81       	ld	r24, Z
    3bc4:	91 81       	ldd	r25, Z+1	; 0x01
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	11 96       	adiw	r26, 0x01	; 1
    3bca:	9c 93       	st	X, r25
    3bcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e2 5b       	subi	r30, 0xB2	; 178
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 81       	ld	r24, Z
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	d1 f6       	brne	.-76     	; 0x3b90 <LCD_DisplayCharacter+0x8c2>
    3bdc:	4b c0       	rjmp	.+150    	; 0x3c74 <LCD_DisplayCharacter+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bde:	8e 01       	movw	r16, r28
    3be0:	02 5b       	subi	r16, 0xB2	; 178
    3be2:	1f 4f       	sbci	r17, 0xFF	; 255
    3be4:	fe 01       	movw	r30, r28
    3be6:	e0 5b       	subi	r30, 0xB0	; 176
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	60 81       	ld	r22, Z
    3bec:	71 81       	ldd	r23, Z+1	; 0x01
    3bee:	82 81       	ldd	r24, Z+2	; 0x02
    3bf0:	93 81       	ldd	r25, Z+3	; 0x03
    3bf2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	f8 01       	movw	r30, r16
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	80 83       	st	Z, r24
    3c00:	de 01       	movw	r26, r28
    3c02:	a6 5b       	subi	r26, 0xB6	; 182
    3c04:	bf 4f       	sbci	r27, 0xFF	; 255
    3c06:	fe 01       	movw	r30, r28
    3c08:	e2 5b       	subi	r30, 0xB2	; 178
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	11 96       	adiw	r26, 0x01	; 1
    3c12:	9c 93       	st	X, r25
    3c14:	8e 93       	st	-X, r24
    3c16:	fe 01       	movw	r30, r28
    3c18:	e6 5b       	subi	r30, 0xB6	; 182
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	f1 f7       	brne	.-4      	; 0x3c20 <LCD_DisplayCharacter+0x952>
    3c24:	fe 01       	movw	r30, r28
    3c26:	e6 5b       	subi	r30, 0xB6	; 182
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	22 c0       	rjmp	.+68     	; 0x3c74 <LCD_DisplayCharacter+0x9a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c30:	8e 01       	movw	r16, r28
    3c32:	08 5a       	subi	r16, 0xA8	; 168
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	fe 01       	movw	r30, r28
    3c38:	e7 5a       	subi	r30, 0xA7	; 167
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	80 83       	st	Z, r24
    3c50:	de 01       	movw	r26, r28
    3c52:	a7 5b       	subi	r26, 0xB7	; 183
    3c54:	bf 4f       	sbci	r27, 0xFF	; 255
    3c56:	fe 01       	movw	r30, r28
    3c58:	e8 5a       	subi	r30, 0xA8	; 168
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	80 81       	ld	r24, Z
    3c5e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c60:	fe 01       	movw	r30, r28
    3c62:	e7 5b       	subi	r30, 0xB7	; 183
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	8a 95       	dec	r24
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <LCD_DisplayCharacter+0x99a>
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e7 5b       	subi	r30, 0xB7	; 183
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 83       	st	Z, r24
	#else
		_delay_us(1);
	#endif

	/* Enable Pulse for Write Operation */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_HIGH);
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	60 e0       	ldi	r22, 0x00	; 0
    3c78:	41 e0       	ldi	r20, 0x01	; 1
    3c7a:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    3c7e:	fe 01       	movw	r30, r28
    3c80:	eb 5b       	subi	r30, 0xBB	; 187
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	a0 e8       	ldi	r26, 0x80	; 128
    3c8a:	bf e3       	ldi	r27, 0x3F	; 63
    3c8c:	80 83       	st	Z, r24
    3c8e:	91 83       	std	Z+1, r25	; 0x01
    3c90:	a2 83       	std	Z+2, r26	; 0x02
    3c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c94:	8e 01       	movw	r16, r28
    3c96:	0f 5b       	subi	r16, 0xBF	; 191
    3c98:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	eb 5b       	subi	r30, 0xBB	; 187
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	60 81       	ld	r22, Z
    3ca2:	71 81       	ldd	r23, Z+1	; 0x01
    3ca4:	82 81       	ldd	r24, Z+2	; 0x02
    3ca6:	93 81       	ldd	r25, Z+3	; 0x03
    3ca8:	2b ea       	ldi	r18, 0xAB	; 171
    3caa:	3a ea       	ldi	r19, 0xAA	; 170
    3cac:	4a ea       	ldi	r20, 0xAA	; 170
    3cae:	50 e4       	ldi	r21, 0x40	; 64
    3cb0:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	f8 01       	movw	r30, r16
    3cba:	80 83       	st	Z, r24
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	a2 83       	std	Z+2, r26	; 0x02
    3cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	ef 5b       	subi	r30, 0xBF	; 191
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	60 81       	ld	r22, Z
    3cca:	71 81       	ldd	r23, Z+1	; 0x01
    3ccc:	82 81       	ldd	r24, Z+2	; 0x02
    3cce:	93 81       	ldd	r25, Z+3	; 0x03
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e8       	ldi	r20, 0x80	; 128
    3cd6:	5f e3       	ldi	r21, 0x3F	; 63
    3cd8:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3cdc:	88 23       	and	r24, r24
    3cde:	34 f4       	brge	.+12     	; 0x3cec <LCD_DisplayCharacter+0xa1e>
		__ticks = 1;
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e0 5c       	subi	r30, 0xC0	; 192
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 83       	st	Z, r24
    3cea:	9d c0       	rjmp	.+314    	; 0x3e26 <LCD_DisplayCharacter+0xb58>
	else if (__tmp > 255)
    3cec:	fe 01       	movw	r30, r28
    3cee:	ef 5b       	subi	r30, 0xBF	; 191
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	60 81       	ld	r22, Z
    3cf4:	71 81       	ldd	r23, Z+1	; 0x01
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	4f e7       	ldi	r20, 0x7F	; 127
    3d00:	53 e4       	ldi	r21, 0x43	; 67
    3d02:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3d06:	18 16       	cp	r1, r24
    3d08:	0c f0       	brlt	.+2      	; 0x3d0c <LCD_DisplayCharacter+0xa3e>
    3d0a:	7e c0       	rjmp	.+252    	; 0x3e08 <LCD_DisplayCharacter+0xb3a>
	{
		_delay_ms(__us / 1000.0);
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	eb 5b       	subi	r30, 0xBB	; 187
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	60 81       	ld	r22, Z
    3d14:	71 81       	ldd	r23, Z+1	; 0x01
    3d16:	82 81       	ldd	r24, Z+2	; 0x02
    3d18:	93 81       	ldd	r25, Z+3	; 0x03
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	4a e7       	ldi	r20, 0x7A	; 122
    3d20:	54 e4       	ldi	r21, 0x44	; 68
    3d22:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	8c af       	std	Y+60, r24	; 0x3c
    3d2c:	9d af       	std	Y+61, r25	; 0x3d
    3d2e:	ae af       	std	Y+62, r26	; 0x3e
    3d30:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d32:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d34:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d36:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d38:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	4a e7       	ldi	r20, 0x7A	; 122
    3d40:	55 e4       	ldi	r21, 0x45	; 69
    3d42:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	88 af       	std	Y+56, r24	; 0x38
    3d4c:	99 af       	std	Y+57, r25	; 0x39
    3d4e:	aa af       	std	Y+58, r26	; 0x3a
    3d50:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3d52:	68 ad       	ldd	r22, Y+56	; 0x38
    3d54:	79 ad       	ldd	r23, Y+57	; 0x39
    3d56:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d58:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e8       	ldi	r20, 0x80	; 128
    3d60:	5f e3       	ldi	r21, 0x3F	; 63
    3d62:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3d66:	88 23       	and	r24, r24
    3d68:	2c f4       	brge	.+10     	; 0x3d74 <LCD_DisplayCharacter+0xaa6>
		__ticks = 1;
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	9f ab       	std	Y+55, r25	; 0x37
    3d70:	8e ab       	std	Y+54, r24	; 0x36
    3d72:	3f c0       	rjmp	.+126    	; 0x3df2 <LCD_DisplayCharacter+0xb24>
	else if (__tmp > 65535)
    3d74:	68 ad       	ldd	r22, Y+56	; 0x38
    3d76:	79 ad       	ldd	r23, Y+57	; 0x39
    3d78:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d7a:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	3f ef       	ldi	r19, 0xFF	; 255
    3d80:	4f e7       	ldi	r20, 0x7F	; 127
    3d82:	57 e4       	ldi	r21, 0x47	; 71
    3d84:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3d88:	18 16       	cp	r1, r24
    3d8a:	4c f5       	brge	.+82     	; 0x3dde <LCD_DisplayCharacter+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d8e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d90:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d92:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e2       	ldi	r20, 0x20	; 32
    3d9a:	51 e4       	ldi	r21, 0x41	; 65
    3d9c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	9f ab       	std	Y+55, r25	; 0x37
    3db2:	8e ab       	std	Y+54, r24	; 0x36
    3db4:	0f c0       	rjmp	.+30     	; 0x3dd4 <LCD_DisplayCharacter+0xb06>
    3db6:	80 e9       	ldi	r24, 0x90	; 144
    3db8:	91 e0       	ldi	r25, 0x01	; 1
    3dba:	9d ab       	std	Y+53, r25	; 0x35
    3dbc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dbe:	8c a9       	ldd	r24, Y+52	; 0x34
    3dc0:	9d a9       	ldd	r25, Y+53	; 0x35
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <LCD_DisplayCharacter+0xaf4>
    3dc6:	9d ab       	std	Y+53, r25	; 0x35
    3dc8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dca:	8e a9       	ldd	r24, Y+54	; 0x36
    3dcc:	9f a9       	ldd	r25, Y+55	; 0x37
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	9f ab       	std	Y+55, r25	; 0x37
    3dd2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd4:	8e a9       	ldd	r24, Y+54	; 0x36
    3dd6:	9f a9       	ldd	r25, Y+55	; 0x37
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	69 f7       	brne	.-38     	; 0x3db6 <LCD_DisplayCharacter+0xae8>
    3ddc:	2d c0       	rjmp	.+90     	; 0x3e38 <LCD_DisplayCharacter+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dde:	68 ad       	ldd	r22, Y+56	; 0x38
    3de0:	79 ad       	ldd	r23, Y+57	; 0x39
    3de2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3de4:	9b ad       	ldd	r25, Y+59	; 0x3b
    3de6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	9f ab       	std	Y+55, r25	; 0x37
    3df0:	8e ab       	std	Y+54, r24	; 0x36
    3df2:	8e a9       	ldd	r24, Y+54	; 0x36
    3df4:	9f a9       	ldd	r25, Y+55	; 0x37
    3df6:	9b ab       	std	Y+51, r25	; 0x33
    3df8:	8a ab       	std	Y+50, r24	; 0x32
    3dfa:	8a a9       	ldd	r24, Y+50	; 0x32
    3dfc:	9b a9       	ldd	r25, Y+51	; 0x33
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	f1 f7       	brne	.-4      	; 0x3dfe <LCD_DisplayCharacter+0xb30>
    3e02:	9b ab       	std	Y+51, r25	; 0x33
    3e04:	8a ab       	std	Y+50, r24	; 0x32
    3e06:	18 c0       	rjmp	.+48     	; 0x3e38 <LCD_DisplayCharacter+0xb6a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e08:	fe 01       	movw	r30, r28
    3e0a:	ef 5b       	subi	r30, 0xBF	; 191
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	60 81       	ld	r22, Z
    3e10:	71 81       	ldd	r23, Z+1	; 0x01
    3e12:	82 81       	ldd	r24, Z+2	; 0x02
    3e14:	93 81       	ldd	r25, Z+3	; 0x03
    3e16:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e0 5c       	subi	r30, 0xC0	; 192
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 83       	st	Z, r24
    3e26:	fe 01       	movw	r30, r28
    3e28:	e0 5c       	subi	r30, 0xC0	; 192
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	80 81       	ld	r24, Z
    3e2e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e30:	89 a9       	ldd	r24, Y+49	; 0x31
    3e32:	8a 95       	dec	r24
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <LCD_DisplayCharacter+0xb64>
    3e36:	89 ab       	std	Y+49, r24	; 0x31
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
	/* Write Lower Half of Instruction */
	DIO_WriteHighHalfPort(LCD_DATA_PORT, ((Data & 0x0FU)<<4));
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e7 55       	subi	r30, 0x57	; 87
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 81       	ld	r24, Z
    3e40:	98 2f       	mov	r25, r24
    3e42:	92 95       	swap	r25
    3e44:	90 7f       	andi	r25, 0xF0	; 240
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	69 2f       	mov	r22, r25
    3e4a:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <DIO_WriteHighHalfPort>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	a0 e8       	ldi	r26, 0x80	; 128
    3e54:	bf e3       	ldi	r27, 0x3F	; 63
    3e56:	8d a7       	std	Y+45, r24	; 0x2d
    3e58:	9e a7       	std	Y+46, r25	; 0x2e
    3e5a:	af a7       	std	Y+47, r26	; 0x2f
    3e5c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e5e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e60:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e64:	98 a9       	ldd	r25, Y+48	; 0x30
    3e66:	2b ea       	ldi	r18, 0xAB	; 171
    3e68:	3a ea       	ldi	r19, 0xAA	; 170
    3e6a:	4a ea       	ldi	r20, 0xAA	; 170
    3e6c:	50 e4       	ldi	r21, 0x40	; 64
    3e6e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	89 a7       	std	Y+41, r24	; 0x29
    3e78:	9a a7       	std	Y+42, r25	; 0x2a
    3e7a:	ab a7       	std	Y+43, r26	; 0x2b
    3e7c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3e7e:	69 a5       	ldd	r22, Y+41	; 0x29
    3e80:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e82:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e84:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e8       	ldi	r20, 0x80	; 128
    3e8c:	5f e3       	ldi	r21, 0x3F	; 63
    3e8e:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3e92:	88 23       	and	r24, r24
    3e94:	1c f4       	brge	.+6      	; 0x3e9c <LCD_DisplayCharacter+0xbce>
		__ticks = 1;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	88 a7       	std	Y+40, r24	; 0x28
    3e9a:	91 c0       	rjmp	.+290    	; 0x3fbe <LCD_DisplayCharacter+0xcf0>
	else if (__tmp > 255)
    3e9c:	69 a5       	ldd	r22, Y+41	; 0x29
    3e9e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ea0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ea2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	4f e7       	ldi	r20, 0x7F	; 127
    3eaa:	53 e4       	ldi	r21, 0x43	; 67
    3eac:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3eb0:	18 16       	cp	r1, r24
    3eb2:	0c f0       	brlt	.+2      	; 0x3eb6 <LCD_DisplayCharacter+0xbe8>
    3eb4:	7b c0       	rjmp	.+246    	; 0x3fac <LCD_DisplayCharacter+0xcde>
	{
		_delay_ms(__us / 1000.0);
    3eb6:	6d a5       	ldd	r22, Y+45	; 0x2d
    3eb8:	7e a5       	ldd	r23, Y+46	; 0x2e
    3eba:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ebc:	98 a9       	ldd	r25, Y+48	; 0x30
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	4a e7       	ldi	r20, 0x7A	; 122
    3ec4:	54 e4       	ldi	r21, 0x44	; 68
    3ec6:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	8c a3       	std	Y+36, r24	; 0x24
    3ed0:	9d a3       	std	Y+37, r25	; 0x25
    3ed2:	ae a3       	std	Y+38, r26	; 0x26
    3ed4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed6:	6c a1       	ldd	r22, Y+36	; 0x24
    3ed8:	7d a1       	ldd	r23, Y+37	; 0x25
    3eda:	8e a1       	ldd	r24, Y+38	; 0x26
    3edc:	9f a1       	ldd	r25, Y+39	; 0x27
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	4a e7       	ldi	r20, 0x7A	; 122
    3ee4:	55 e4       	ldi	r21, 0x45	; 69
    3ee6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	88 a3       	std	Y+32, r24	; 0x20
    3ef0:	99 a3       	std	Y+33, r25	; 0x21
    3ef2:	aa a3       	std	Y+34, r26	; 0x22
    3ef4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3ef6:	68 a1       	ldd	r22, Y+32	; 0x20
    3ef8:	79 a1       	ldd	r23, Y+33	; 0x21
    3efa:	8a a1       	ldd	r24, Y+34	; 0x22
    3efc:	9b a1       	ldd	r25, Y+35	; 0x23
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e8       	ldi	r20, 0x80	; 128
    3f04:	5f e3       	ldi	r21, 0x3F	; 63
    3f06:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3f0a:	88 23       	and	r24, r24
    3f0c:	2c f4       	brge	.+10     	; 0x3f18 <LCD_DisplayCharacter+0xc4a>
		__ticks = 1;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	9f 8f       	std	Y+31, r25	; 0x1f
    3f14:	8e 8f       	std	Y+30, r24	; 0x1e
    3f16:	3f c0       	rjmp	.+126    	; 0x3f96 <LCD_DisplayCharacter+0xcc8>
	else if (__tmp > 65535)
    3f18:	68 a1       	ldd	r22, Y+32	; 0x20
    3f1a:	79 a1       	ldd	r23, Y+33	; 0x21
    3f1c:	8a a1       	ldd	r24, Y+34	; 0x22
    3f1e:	9b a1       	ldd	r25, Y+35	; 0x23
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	3f ef       	ldi	r19, 0xFF	; 255
    3f24:	4f e7       	ldi	r20, 0x7F	; 127
    3f26:	57 e4       	ldi	r21, 0x47	; 71
    3f28:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3f2c:	18 16       	cp	r1, r24
    3f2e:	4c f5       	brge	.+82     	; 0x3f82 <LCD_DisplayCharacter+0xcb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f30:	6c a1       	ldd	r22, Y+36	; 0x24
    3f32:	7d a1       	ldd	r23, Y+37	; 0x25
    3f34:	8e a1       	ldd	r24, Y+38	; 0x26
    3f36:	9f a1       	ldd	r25, Y+39	; 0x27
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e2       	ldi	r20, 0x20	; 32
    3f3e:	51 e4       	ldi	r21, 0x41	; 65
    3f40:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	bc 01       	movw	r22, r24
    3f4a:	cd 01       	movw	r24, r26
    3f4c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	9f 8f       	std	Y+31, r25	; 0x1f
    3f56:	8e 8f       	std	Y+30, r24	; 0x1e
    3f58:	0f c0       	rjmp	.+30     	; 0x3f78 <LCD_DisplayCharacter+0xcaa>
    3f5a:	80 e9       	ldi	r24, 0x90	; 144
    3f5c:	91 e0       	ldi	r25, 0x01	; 1
    3f5e:	9d 8f       	std	Y+29, r25	; 0x1d
    3f60:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	f1 f7       	brne	.-4      	; 0x3f66 <LCD_DisplayCharacter+0xc98>
    3f6a:	9d 8f       	std	Y+29, r25	; 0x1d
    3f6c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f70:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	9f 8f       	std	Y+31, r25	; 0x1f
    3f76:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	69 f7       	brne	.-38     	; 0x3f5a <LCD_DisplayCharacter+0xc8c>
    3f80:	24 c0       	rjmp	.+72     	; 0x3fca <LCD_DisplayCharacter+0xcfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f82:	68 a1       	ldd	r22, Y+32	; 0x20
    3f84:	79 a1       	ldd	r23, Y+33	; 0x21
    3f86:	8a a1       	ldd	r24, Y+34	; 0x22
    3f88:	9b a1       	ldd	r25, Y+35	; 0x23
    3f8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	9f 8f       	std	Y+31, r25	; 0x1f
    3f94:	8e 8f       	std	Y+30, r24	; 0x1e
    3f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f98:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f9a:	9b 8f       	std	Y+27, r25	; 0x1b
    3f9c:	8a 8f       	std	Y+26, r24	; 0x1a
    3f9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3fa0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	f1 f7       	brne	.-4      	; 0x3fa2 <LCD_DisplayCharacter+0xcd4>
    3fa6:	9b 8f       	std	Y+27, r25	; 0x1b
    3fa8:	8a 8f       	std	Y+26, r24	; 0x1a
    3faa:	0f c0       	rjmp	.+30     	; 0x3fca <LCD_DisplayCharacter+0xcfc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fac:	69 a5       	ldd	r22, Y+41	; 0x29
    3fae:	7a a5       	ldd	r23, Y+42	; 0x2a
    3fb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fb4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	88 a7       	std	Y+40, r24	; 0x28
    3fbe:	88 a5       	ldd	r24, Y+40	; 0x28
    3fc0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fc2:	89 8d       	ldd	r24, Y+25	; 0x19
    3fc4:	8a 95       	dec	r24
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <LCD_DisplayCharacter+0xcf6>
    3fc8:	89 8f       	std	Y+25, r24	; 0x19
	#else
		_delay_us(1);
	#endif
#endif
	/* bring down the enable pulse */
	DIO_WritePin(LCD_CTRL_PORT, LCD_ENABLE_PIN, DIO_LOW);
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	a0 e8       	ldi	r26, 0x80	; 128
    3fda:	bf e3       	ldi	r27, 0x3F	; 63
    3fdc:	8d 8b       	std	Y+21, r24	; 0x15
    3fde:	9e 8b       	std	Y+22, r25	; 0x16
    3fe0:	af 8b       	std	Y+23, r26	; 0x17
    3fe2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fea:	98 8d       	ldd	r25, Y+24	; 0x18
    3fec:	2b ea       	ldi	r18, 0xAB	; 171
    3fee:	3a ea       	ldi	r19, 0xAA	; 170
    3ff0:	4a ea       	ldi	r20, 0xAA	; 170
    3ff2:	50 e4       	ldi	r21, 0x40	; 64
    3ff4:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	89 8b       	std	Y+17, r24	; 0x11
    3ffe:	9a 8b       	std	Y+18, r25	; 0x12
    4000:	ab 8b       	std	Y+19, r26	; 0x13
    4002:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4004:	69 89       	ldd	r22, Y+17	; 0x11
    4006:	7a 89       	ldd	r23, Y+18	; 0x12
    4008:	8b 89       	ldd	r24, Y+19	; 0x13
    400a:	9c 89       	ldd	r25, Y+20	; 0x14
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e8       	ldi	r20, 0x80	; 128
    4012:	5f e3       	ldi	r21, 0x3F	; 63
    4014:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    4018:	88 23       	and	r24, r24
    401a:	1c f4       	brge	.+6      	; 0x4022 <LCD_DisplayCharacter+0xd54>
		__ticks = 1;
    401c:	81 e0       	ldi	r24, 0x01	; 1
    401e:	88 8b       	std	Y+16, r24	; 0x10
    4020:	91 c0       	rjmp	.+290    	; 0x4144 <LCD_DisplayCharacter+0xe76>
	else if (__tmp > 255)
    4022:	69 89       	ldd	r22, Y+17	; 0x11
    4024:	7a 89       	ldd	r23, Y+18	; 0x12
    4026:	8b 89       	ldd	r24, Y+19	; 0x13
    4028:	9c 89       	ldd	r25, Y+20	; 0x14
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	4f e7       	ldi	r20, 0x7F	; 127
    4030:	53 e4       	ldi	r21, 0x43	; 67
    4032:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    4036:	18 16       	cp	r1, r24
    4038:	0c f0       	brlt	.+2      	; 0x403c <LCD_DisplayCharacter+0xd6e>
    403a:	7b c0       	rjmp	.+246    	; 0x4132 <LCD_DisplayCharacter+0xe64>
	{
		_delay_ms(__us / 1000.0);
    403c:	6d 89       	ldd	r22, Y+21	; 0x15
    403e:	7e 89       	ldd	r23, Y+22	; 0x16
    4040:	8f 89       	ldd	r24, Y+23	; 0x17
    4042:	98 8d       	ldd	r25, Y+24	; 0x18
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	4a e7       	ldi	r20, 0x7A	; 122
    404a:	54 e4       	ldi	r21, 0x44	; 68
    404c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	8c 87       	std	Y+12, r24	; 0x0c
    4056:	9d 87       	std	Y+13, r25	; 0x0d
    4058:	ae 87       	std	Y+14, r26	; 0x0e
    405a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405c:	6c 85       	ldd	r22, Y+12	; 0x0c
    405e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4060:	8e 85       	ldd	r24, Y+14	; 0x0e
    4062:	9f 85       	ldd	r25, Y+15	; 0x0f
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	4a e7       	ldi	r20, 0x7A	; 122
    406a:	55 e4       	ldi	r21, 0x45	; 69
    406c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	88 87       	std	Y+8, r24	; 0x08
    4076:	99 87       	std	Y+9, r25	; 0x09
    4078:	aa 87       	std	Y+10, r26	; 0x0a
    407a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    407c:	68 85       	ldd	r22, Y+8	; 0x08
    407e:	79 85       	ldd	r23, Y+9	; 0x09
    4080:	8a 85       	ldd	r24, Y+10	; 0x0a
    4082:	9b 85       	ldd	r25, Y+11	; 0x0b
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	40 e8       	ldi	r20, 0x80	; 128
    408a:	5f e3       	ldi	r21, 0x3F	; 63
    408c:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    4090:	88 23       	and	r24, r24
    4092:	2c f4       	brge	.+10     	; 0x409e <LCD_DisplayCharacter+0xdd0>
		__ticks = 1;
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	9f 83       	std	Y+7, r25	; 0x07
    409a:	8e 83       	std	Y+6, r24	; 0x06
    409c:	3f c0       	rjmp	.+126    	; 0x411c <LCD_DisplayCharacter+0xe4e>
	else if (__tmp > 65535)
    409e:	68 85       	ldd	r22, Y+8	; 0x08
    40a0:	79 85       	ldd	r23, Y+9	; 0x09
    40a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	3f ef       	ldi	r19, 0xFF	; 255
    40aa:	4f e7       	ldi	r20, 0x7F	; 127
    40ac:	57 e4       	ldi	r21, 0x47	; 71
    40ae:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    40b2:	18 16       	cp	r1, r24
    40b4:	4c f5       	brge	.+82     	; 0x4108 <LCD_DisplayCharacter+0xe3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    40b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    40ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    40bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	40 e2       	ldi	r20, 0x20	; 32
    40c4:	51 e4       	ldi	r21, 0x41	; 65
    40c6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	bc 01       	movw	r22, r24
    40d0:	cd 01       	movw	r24, r26
    40d2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	9f 83       	std	Y+7, r25	; 0x07
    40dc:	8e 83       	std	Y+6, r24	; 0x06
    40de:	0f c0       	rjmp	.+30     	; 0x40fe <LCD_DisplayCharacter+0xe30>
    40e0:	80 e9       	ldi	r24, 0x90	; 144
    40e2:	91 e0       	ldi	r25, 0x01	; 1
    40e4:	9d 83       	std	Y+5, r25	; 0x05
    40e6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40e8:	8c 81       	ldd	r24, Y+4	; 0x04
    40ea:	9d 81       	ldd	r25, Y+5	; 0x05
    40ec:	01 97       	sbiw	r24, 0x01	; 1
    40ee:	f1 f7       	brne	.-4      	; 0x40ec <LCD_DisplayCharacter+0xe1e>
    40f0:	9d 83       	std	Y+5, r25	; 0x05
    40f2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f4:	8e 81       	ldd	r24, Y+6	; 0x06
    40f6:	9f 81       	ldd	r25, Y+7	; 0x07
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	9f 83       	std	Y+7, r25	; 0x07
    40fc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4100:	9f 81       	ldd	r25, Y+7	; 0x07
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	69 f7       	brne	.-38     	; 0x40e0 <LCD_DisplayCharacter+0xe12>
    4106:	24 c0       	rjmp	.+72     	; 0x4150 <LCD_DisplayCharacter+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4108:	68 85       	ldd	r22, Y+8	; 0x08
    410a:	79 85       	ldd	r23, Y+9	; 0x09
    410c:	8a 85       	ldd	r24, Y+10	; 0x0a
    410e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4110:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	9f 83       	std	Y+7, r25	; 0x07
    411a:	8e 83       	std	Y+6, r24	; 0x06
    411c:	8e 81       	ldd	r24, Y+6	; 0x06
    411e:	9f 81       	ldd	r25, Y+7	; 0x07
    4120:	9b 83       	std	Y+3, r25	; 0x03
    4122:	8a 83       	std	Y+2, r24	; 0x02
    4124:	8a 81       	ldd	r24, Y+2	; 0x02
    4126:	9b 81       	ldd	r25, Y+3	; 0x03
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <LCD_DisplayCharacter+0xe5a>
    412c:	9b 83       	std	Y+3, r25	; 0x03
    412e:	8a 83       	std	Y+2, r24	; 0x02
    4130:	0f c0       	rjmp	.+30     	; 0x4150 <LCD_DisplayCharacter+0xe82>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4132:	69 89       	ldd	r22, Y+17	; 0x11
    4134:	7a 89       	ldd	r23, Y+18	; 0x12
    4136:	8b 89       	ldd	r24, Y+19	; 0x13
    4138:	9c 89       	ldd	r25, Y+20	; 0x14
    413a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	88 8b       	std	Y+16, r24	; 0x10
    4144:	88 89       	ldd	r24, Y+16	; 0x10
    4146:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	8a 95       	dec	r24
    414c:	f1 f7       	brne	.-4      	; 0x414a <LCD_DisplayCharacter+0xe7c>
    414e:	89 83       	std	Y+1, r24	; 0x01
	#if LCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 1);
	#else
		_delay_us(1);
	#endif
}
    4150:	c7 55       	subi	r28, 0x57	; 87
    4152:	df 4f       	sbci	r29, 0xFF	; 255
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	f8 94       	cli
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	0f be       	out	0x3f, r0	; 63
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	1f 91       	pop	r17
    4164:	0f 91       	pop	r16
    4166:	08 95       	ret

00004168 <LCD_DisplayString>:

void LCD_DisplayString(char* Data) {
    4168:	df 93       	push	r29
    416a:	cf 93       	push	r28
    416c:	00 d0       	rcall	.+0      	; 0x416e <LCD_DisplayString+0x6>
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	9a 83       	std	Y+2, r25	; 0x02
    4174:	89 83       	std	Y+1, r24	; 0x01
    4176:	0a c0       	rjmp	.+20     	; 0x418c <LCD_DisplayString+0x24>
	while (*Data != '\0') {
		LCD_DisplayCharacter(*Data);
    4178:	e9 81       	ldd	r30, Y+1	; 0x01
    417a:	fa 81       	ldd	r31, Y+2	; 0x02
    417c:	80 81       	ld	r24, Z
    417e:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_DisplayCharacter>
		Data++;
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	9a 81       	ldd	r25, Y+2	; 0x02
    4186:	01 96       	adiw	r24, 0x01	; 1
    4188:	9a 83       	std	Y+2, r25	; 0x02
    418a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
	#endif
}

void LCD_DisplayString(char* Data) {
	while (*Data != '\0') {
    418c:	e9 81       	ldd	r30, Y+1	; 0x01
    418e:	fa 81       	ldd	r31, Y+2	; 0x02
    4190:	80 81       	ld	r24, Z
    4192:	88 23       	and	r24, r24
    4194:	89 f7       	brne	.-30     	; 0x4178 <LCD_DisplayString+0x10>
		LCD_DisplayCharacter(*Data);
		Data++;
	}
}
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	08 95       	ret

000041a0 <LCD_DisplayInteger>:

void LCD_DisplayInteger(sint16 Data) {
    41a0:	df 93       	push	r29
    41a2:	cf 93       	push	r28
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	2a 97       	sbiw	r28, 0x0a	; 10
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
    41b4:	9a 87       	std	Y+10, r25	; 0x0a
    41b6:	89 87       	std	Y+9, r24	; 0x09
	if (Data < 0) {
    41b8:	89 85       	ldd	r24, Y+9	; 0x09
    41ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    41bc:	99 23       	and	r25, r25
    41be:	54 f4       	brge	.+20     	; 0x41d4 <LCD_DisplayInteger+0x34>
		LCD_DisplayCharacter('-');
    41c0:	8d e2       	ldi	r24, 0x2D	; 45
    41c2:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_DisplayCharacter>
		Data = -1 * Data;
    41c6:	89 85       	ldd	r24, Y+9	; 0x09
    41c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ca:	90 95       	com	r25
    41cc:	81 95       	neg	r24
    41ce:	9f 4f       	sbci	r25, 0xFF	; 255
    41d0:	9a 87       	std	Y+10, r25	; 0x0a
    41d2:	89 87       	std	Y+9, r24	; 0x09
	}
	uint8 u8Local_Digit = 0U;
    41d4:	1b 82       	std	Y+3, r1	; 0x03
	char str_reversed[5] = "";
    41d6:	1c 82       	std	Y+4, r1	; 0x04
    41d8:	1d 82       	std	Y+5, r1	; 0x05
    41da:	1e 82       	std	Y+6, r1	; 0x06
    41dc:	1f 82       	std	Y+7, r1	; 0x07
    41de:	18 86       	std	Y+8, r1	; 0x08
	char* str_ptr = str_reversed;
    41e0:	ce 01       	movw	r24, r28
    41e2:	04 96       	adiw	r24, 0x04	; 4
    41e4:	9a 83       	std	Y+2, r25	; 0x02
    41e6:	89 83       	std	Y+1, r24	; 0x01
	do {
		u8Local_Digit = Data%10;
    41e8:	89 85       	ldd	r24, Y+9	; 0x09
    41ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ec:	2a e0       	ldi	r18, 0x0A	; 10
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	b9 01       	movw	r22, r18
    41f2:	0e 94 86 38 	call	0x710c	; 0x710c <__divmodhi4>
    41f6:	8b 83       	std	Y+3, r24	; 0x03
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
    41f8:	8b 81       	ldd	r24, Y+3	; 0x03
    41fa:	80 5d       	subi	r24, 0xD0	; 208
    41fc:	e9 81       	ldd	r30, Y+1	; 0x01
    41fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4200:	80 83       	st	Z, r24
		Data = Data/10;
    4202:	89 85       	ldd	r24, Y+9	; 0x09
    4204:	9a 85       	ldd	r25, Y+10	; 0x0a
    4206:	2a e0       	ldi	r18, 0x0A	; 10
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	b9 01       	movw	r22, r18
    420c:	0e 94 86 38 	call	0x710c	; 0x710c <__divmodhi4>
    4210:	cb 01       	movw	r24, r22
    4212:	9a 87       	std	Y+10, r25	; 0x0a
    4214:	89 87       	std	Y+9, r24	; 0x09
		str_ptr++;
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	01 96       	adiw	r24, 0x01	; 1
    421c:	9a 83       	std	Y+2, r25	; 0x02
    421e:	89 83       	std	Y+1, r24	; 0x01
	} while (Data > 0);
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	9a 85       	ldd	r25, Y+10	; 0x0a
    4224:	18 16       	cp	r1, r24
    4226:	19 06       	cpc	r1, r25
    4228:	fc f2       	brlt	.-66     	; 0x41e8 <LCD_DisplayInteger+0x48>
	do {
		str_ptr--;
    422a:	89 81       	ldd	r24, Y+1	; 0x01
    422c:	9a 81       	ldd	r25, Y+2	; 0x02
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	9a 83       	std	Y+2, r25	; 0x02
    4232:	89 83       	std	Y+1, r24	; 0x01
		LCD_DisplayCharacter(*str_ptr);
    4234:	e9 81       	ldd	r30, Y+1	; 0x01
    4236:	fa 81       	ldd	r31, Y+2	; 0x02
    4238:	80 81       	ld	r24, Z
    423a:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
    423e:	9e 01       	movw	r18, r28
    4240:	2c 5f       	subi	r18, 0xFC	; 252
    4242:	3f 4f       	sbci	r19, 0xFF	; 255
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	9a 81       	ldd	r25, Y+2	; 0x02
    4248:	82 17       	cp	r24, r18
    424a:	93 07       	cpc	r25, r19
    424c:	71 f7       	brne	.-36     	; 0x422a <LCD_DisplayInteger+0x8a>
}
    424e:	2a 96       	adiw	r28, 0x0a	; 10
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	f8 94       	cli
    4254:	de bf       	out	0x3e, r29	; 62
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <LCD_DisplayFloatingPointNumber>:

void LCD_DisplayFloatingPointNumber(float32 Data) {
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
    4270:	2c 97       	sbiw	r28, 0x0c	; 12
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	69 87       	std	Y+9, r22	; 0x09
    427e:	7a 87       	std	Y+10, r23	; 0x0a
    4280:	8b 87       	std	Y+11, r24	; 0x0b
    4282:	9c 87       	std	Y+12, r25	; 0x0c
	/* Will display only 3 Decimal Places */
	uint16 IntegerPart = (uint16)Data;
    4284:	69 85       	ldd	r22, Y+9	; 0x09
    4286:	7a 85       	ldd	r23, Y+10	; 0x0a
    4288:	8b 85       	ldd	r24, Y+11	; 0x0b
    428a:	9c 85       	ldd	r25, Y+12	; 0x0c
    428c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	98 87       	std	Y+8, r25	; 0x08
    4296:	8f 83       	std	Y+7, r24	; 0x07
	LCD_DisplayInteger(IntegerPart);
    4298:	8f 81       	ldd	r24, Y+7	; 0x07
    429a:	98 85       	ldd	r25, Y+8	; 0x08
    429c:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <LCD_DisplayInteger>
	LCD_DisplayCharacter('.');
    42a0:	8e e2       	ldi	r24, 0x2E	; 46
    42a2:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_DisplayCharacter>
	float32 DecimalPart = (Data - IntegerPart);
    42a6:	8f 81       	ldd	r24, Y+7	; 0x07
    42a8:	98 85       	ldd	r25, Y+8	; 0x08
    42aa:	cc 01       	movw	r24, r24
    42ac:	a0 e0       	ldi	r26, 0x00	; 0
    42ae:	b0 e0       	ldi	r27, 0x00	; 0
    42b0:	bc 01       	movw	r22, r24
    42b2:	cd 01       	movw	r24, r26
    42b4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    42b8:	9b 01       	movw	r18, r22
    42ba:	ac 01       	movw	r20, r24
    42bc:	69 85       	ldd	r22, Y+9	; 0x09
    42be:	7a 85       	ldd	r23, Y+10	; 0x0a
    42c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    42c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    42c4:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	8b 83       	std	Y+3, r24	; 0x03
    42ce:	9c 83       	std	Y+4, r25	; 0x04
    42d0:	ad 83       	std	Y+5, r26	; 0x05
    42d2:	be 83       	std	Y+6, r27	; 0x06
	uint8 Digit = 0;
    42d4:	1a 82       	std	Y+2, r1	; 0x02
	for (uint8 i = 0; i < 3; i++) {
    42d6:	19 82       	std	Y+1, r1	; 0x01
    42d8:	3f c0       	rjmp	.+126    	; 0x4358 <LCD_DisplayFloatingPointNumber+0xf8>
		Digit = (uint8)(DecimalPart * 10.0);
    42da:	6b 81       	ldd	r22, Y+3	; 0x03
    42dc:	7c 81       	ldd	r23, Y+4	; 0x04
    42de:	8d 81       	ldd	r24, Y+5	; 0x05
    42e0:	9e 81       	ldd	r25, Y+6	; 0x06
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e2       	ldi	r20, 0x20	; 32
    42e8:	51 e4       	ldi	r21, 0x41	; 65
    42ea:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	bc 01       	movw	r22, r24
    42f4:	cd 01       	movw	r24, r26
    42f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	8a 83       	std	Y+2, r24	; 0x02
		LCD_DisplayCharacter((char)(48+Digit));
    4300:	8a 81       	ldd	r24, Y+2	; 0x02
    4302:	80 5d       	subi	r24, 0xD0	; 208
    4304:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
    4308:	6b 81       	ldd	r22, Y+3	; 0x03
    430a:	7c 81       	ldd	r23, Y+4	; 0x04
    430c:	8d 81       	ldd	r24, Y+5	; 0x05
    430e:	9e 81       	ldd	r25, Y+6	; 0x06
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	40 e2       	ldi	r20, 0x20	; 32
    4316:	51 e4       	ldi	r21, 0x41	; 65
    4318:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	7c 01       	movw	r14, r24
    4322:	8d 01       	movw	r16, r26
    4324:	8a 81       	ldd	r24, Y+2	; 0x02
    4326:	88 2f       	mov	r24, r24
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	aa 27       	eor	r26, r26
    432c:	97 fd       	sbrc	r25, 7
    432e:	a0 95       	com	r26
    4330:	ba 2f       	mov	r27, r26
    4332:	bc 01       	movw	r22, r24
    4334:	cd 01       	movw	r24, r26
    4336:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    433a:	9b 01       	movw	r18, r22
    433c:	ac 01       	movw	r20, r24
    433e:	c8 01       	movw	r24, r16
    4340:	b7 01       	movw	r22, r14
    4342:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	8b 83       	std	Y+3, r24	; 0x03
    434c:	9c 83       	std	Y+4, r25	; 0x04
    434e:	ad 83       	std	Y+5, r26	; 0x05
    4350:	be 83       	std	Y+6, r27	; 0x06
	uint16 IntegerPart = (uint16)Data;
	LCD_DisplayInteger(IntegerPart);
	LCD_DisplayCharacter('.');
	float32 DecimalPart = (Data - IntegerPart);
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	8f 5f       	subi	r24, 0xFF	; 255
    4356:	89 83       	std	Y+1, r24	; 0x01
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	83 30       	cpi	r24, 0x03	; 3
    435c:	08 f4       	brcc	.+2      	; 0x4360 <LCD_DisplayFloatingPointNumber+0x100>
    435e:	bd cf       	rjmp	.-134    	; 0x42da <LCD_DisplayFloatingPointNumber+0x7a>
		Digit = (uint8)(DecimalPart * 10.0);
		LCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
    4360:	2c 96       	adiw	r28, 0x0c	; 12
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	1f 91       	pop	r17
    4372:	0f 91       	pop	r16
    4374:	ff 90       	pop	r15
    4376:	ef 90       	pop	r14
    4378:	08 95       	ret

0000437a <LCD_CreateSpecialCharacter>:

void LCD_CreateSpecialCharacter(char* Pattern, uint8 CGRAM_Location) {
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	00 d0       	rcall	.+0      	; 0x4380 <LCD_CreateSpecialCharacter+0x6>
    4380:	00 d0       	rcall	.+0      	; 0x4382 <LCD_CreateSpecialCharacter+0x8>
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	9b 83       	std	Y+3, r25	; 0x03
    4388:	8a 83       	std	Y+2, r24	; 0x02
    438a:	6c 83       	std	Y+4, r22	; 0x04
	/* Set CGRAM address. CGRAM stores each character sequence in 8 bytes. */
	LCD_SendInstruction((LCD_CGRAM_PREFIX + (CGRAM_Location*8U)));
    438c:	8c 81       	ldd	r24, Y+4	; 0x04
    438e:	88 2f       	mov	r24, r24
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	08 96       	adiw	r24, 0x08	; 8
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	88 0f       	add	r24, r24
    439a:	99 1f       	adc	r25, r25
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_SendInstruction>
	for (uint8 i = 0; i < 8; i++) {
    43a4:	19 82       	std	Y+1, r1	; 0x01
    43a6:	0e c0       	rjmp	.+28     	; 0x43c4 <LCD_CreateSpecialCharacter+0x4a>
		LCD_DisplayCharacter(Pattern[i]);
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	28 2f       	mov	r18, r24
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	8a 81       	ldd	r24, Y+2	; 0x02
    43b0:	9b 81       	ldd	r25, Y+3	; 0x03
    43b2:	fc 01       	movw	r30, r24
    43b4:	e2 0f       	add	r30, r18
    43b6:	f3 1f       	adc	r31, r19
    43b8:	80 81       	ld	r24, Z
    43ba:	0e 94 67 19 	call	0x32ce	; 0x32ce <LCD_DisplayCharacter>
}

void LCD_CreateSpecialCharacter(char* Pattern, uint8 CGRAM_Location) {
	/* Set CGRAM address. CGRAM stores each character sequence in 8 bytes. */
	LCD_SendInstruction((LCD_CGRAM_PREFIX + (CGRAM_Location*8U)));
	for (uint8 i = 0; i < 8; i++) {
    43be:	89 81       	ldd	r24, Y+1	; 0x01
    43c0:	8f 5f       	subi	r24, 0xFF	; 255
    43c2:	89 83       	std	Y+1, r24	; 0x01
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	88 30       	cpi	r24, 0x08	; 8
    43c8:	78 f3       	brcs	.-34     	; 0x43a8 <LCD_CreateSpecialCharacter+0x2e>
		LCD_DisplayCharacter(Pattern[i]);
	}
}
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	cf 91       	pop	r28
    43d4:	df 91       	pop	r29
    43d6:	08 95       	ret

000043d8 <ICU_Init>:
void ICU_GetDutyCycle_Timer1(uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr);

/************************************************************************/
/*					Functions Implementations                           */
/************************************************************************/
void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
    43d8:	df 93       	push	r29
    43da:	cf 93       	push	r28
    43dc:	00 d0       	rcall	.+0      	; 0x43de <ICU_Init+0x6>
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	9a 83       	std	Y+2, r25	; 0x02
    43e4:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Tmr_Channel) {
    43e6:	e9 81       	ldd	r30, Y+1	; 0x01
    43e8:	fa 81       	ldd	r31, Y+2	; 0x02
    43ea:	80 81       	ld	r24, Z
    43ec:	88 2f       	mov	r24, r24
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	00 97       	sbiw	r24, 0x00	; 0
    43f2:	21 f4       	brne	.+8      	; 0x43fc <ICU_Init+0x24>
		case ICU_TIMER_1: ICU_InitTimer1(Config_Ptr); break;
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
    43f6:	9a 81       	ldd	r25, Y+2	; 0x02
    43f8:	0e 94 a8 22 	call	0x4550	; 0x4550 <ICU_InitTimer1>
		default: break;
	}
}
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	cf 91       	pop	r28
    4402:	df 91       	pop	r29
    4404:	08 95       	ret

00004406 <ICU_SetTriggerEdge>:

void ICU_SetTriggerEdge(ICU_TimerChannelType Tmr_Channel, ICU_TriggerEdgeType Edge) {
    4406:	df 93       	push	r29
    4408:	cf 93       	push	r28
    440a:	00 d0       	rcall	.+0      	; 0x440c <ICU_SetTriggerEdge+0x6>
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
    4410:	89 83       	std	Y+1, r24	; 0x01
    4412:	6a 83       	std	Y+2, r22	; 0x02
	CLEAR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
    4414:	ae e4       	ldi	r26, 0x4E	; 78
    4416:	b0 e0       	ldi	r27, 0x00	; 0
    4418:	ee e4       	ldi	r30, 0x4E	; 78
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	80 81       	ld	r24, Z
    441e:	8f 7b       	andi	r24, 0xBF	; 191
    4420:	8c 93       	st	X, r24
	switch (Tmr_Channel) {
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	88 2f       	mov	r24, r24
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	00 97       	sbiw	r24, 0x00	; 0
    442a:	a1 f4       	brne	.+40     	; 0x4454 <ICU_SetTriggerEdge+0x4e>
		case ICU_TIMER_1: *TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT); break;
    442c:	ae e4       	ldi	r26, 0x4E	; 78
    442e:	b0 e0       	ldi	r27, 0x00	; 0
    4430:	ee e4       	ldi	r30, 0x4E	; 78
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	80 81       	ld	r24, Z
    4436:	28 2f       	mov	r18, r24
    4438:	8a 81       	ldd	r24, Y+2	; 0x02
    443a:	88 2f       	mov	r24, r24
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	00 24       	eor	r0, r0
    4440:	96 95       	lsr	r25
    4442:	87 95       	ror	r24
    4444:	07 94       	ror	r0
    4446:	96 95       	lsr	r25
    4448:	87 95       	ror	r24
    444a:	07 94       	ror	r0
    444c:	98 2f       	mov	r25, r24
    444e:	80 2d       	mov	r24, r0
    4450:	82 2b       	or	r24, r18
    4452:	8c 93       	st	X, r24
		default: break;
	}
}
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	cf 91       	pop	r28
    445a:	df 91       	pop	r29
    445c:	08 95       	ret

0000445e <ICU_ClearTimerValue>:

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
    445e:	df 93       	push	r29
    4460:	cf 93       	push	r28
    4462:	0f 92       	push	r0
    4464:	cd b7       	in	r28, 0x3d	; 61
    4466:	de b7       	in	r29, 0x3e	; 62
    4468:	89 83       	std	Y+1, r24	; 0x01
	switch (Tmr_Channel) {
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	88 2f       	mov	r24, r24
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	21 f4       	brne	.+8      	; 0x447c <ICU_ClearTimerValue+0x1e>
		case ICU_TIMER_1: *(uint16*)TIMER1_CNTR_REG_L = 0x0000U; break;
    4474:	ec e4       	ldi	r30, 0x4C	; 76
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	11 82       	std	Z+1, r1	; 0x01
    447a:	10 82       	st	Z, r1
		default: break;
	}
}
    447c:	0f 90       	pop	r0
    447e:	cf 91       	pop	r28
    4480:	df 91       	pop	r29
    4482:	08 95       	ret

00004484 <ICU_GetInputCaptureValue>:

uint16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
    4484:	df 93       	push	r29
    4486:	cf 93       	push	r28
    4488:	00 d0       	rcall	.+0      	; 0x448a <ICU_GetInputCaptureValue+0x6>
    448a:	0f 92       	push	r0
    448c:	cd b7       	in	r28, 0x3d	; 61
    448e:	de b7       	in	r29, 0x3e	; 62
    4490:	8b 83       	std	Y+3, r24	; 0x03
	uint16 u16Local_Value = 0U;
    4492:	1a 82       	std	Y+2, r1	; 0x02
    4494:	19 82       	std	Y+1, r1	; 0x01
	switch (Tmr_Channel) {
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	88 2f       	mov	r24, r24
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	00 97       	sbiw	r24, 0x00	; 0
    449e:	31 f4       	brne	.+12     	; 0x44ac <ICU_GetInputCaptureValue+0x28>
		case ICU_TIMER_1: u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);
    44a0:	e6 e4       	ldi	r30, 0x46	; 70
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	80 81       	ld	r24, Z
    44a6:	91 81       	ldd	r25, Z+1	; 0x01
    44a8:	9a 83       	std	Y+2, r25	; 0x02
    44aa:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
	return u16Local_Value;
    44ac:	89 81       	ldd	r24, Y+1	; 0x01
    44ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	08 95       	ret

000044bc <ICU_GetStatus>:

ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
    44bc:	df 93       	push	r29
    44be:	cf 93       	push	r28
    44c0:	00 d0       	rcall	.+0      	; 0x44c2 <ICU_GetStatus+0x6>
    44c2:	cd b7       	in	r28, 0x3d	; 61
    44c4:	de b7       	in	r29, 0x3e	; 62
    44c6:	89 83       	std	Y+1, r24	; 0x01
	switch (Tmr_Channel) {
    44c8:	89 81       	ldd	r24, Y+1	; 0x01
    44ca:	88 2f       	mov	r24, r24
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	c1 f4       	brne	.+48     	; 0x4502 <ICU_GetStatus+0x46>
		case ICU_TIMER_1: 
			if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
    44d2:	e8 e5       	ldi	r30, 0x58	; 88
    44d4:	f0 e0       	ldi	r31, 0x00	; 0
    44d6:	80 81       	ld	r24, Z
    44d8:	82 95       	swap	r24
    44da:	86 95       	lsr	r24
    44dc:	87 70       	andi	r24, 0x07	; 7
    44de:	88 2f       	mov	r24, r24
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	81 70       	andi	r24, 0x01	; 1
    44e4:	90 70       	andi	r25, 0x00	; 0
    44e6:	88 23       	and	r24, r24
    44e8:	51 f0       	breq	.+20     	; 0x44fe <ICU_GetStatus+0x42>
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
    44ea:	a8 e5       	ldi	r26, 0x58	; 88
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	e8 e5       	ldi	r30, 0x58	; 88
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	80 81       	ld	r24, Z
    44f4:	80 62       	ori	r24, 0x20	; 32
    44f6:	8c 93       	st	X, r24
				return ICU_EVENT_CATURED;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	8a 83       	std	Y+2, r24	; 0x02
    44fc:	03 c0       	rjmp	.+6      	; 0x4504 <ICU_GetStatus+0x48>
			} else {
				return ICU_RUNNING;
    44fe:	1a 82       	std	Y+2, r1	; 0x02
    4500:	01 c0       	rjmp	.+2      	; 0x4504 <ICU_GetStatus+0x48>
			}
		default: break;
	}
	return ICU_RUNNING;
    4502:	1a 82       	std	Y+2, r1	; 0x02
    4504:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4506:	0f 90       	pop	r0
    4508:	0f 90       	pop	r0
    450a:	cf 91       	pop	r28
    450c:	df 91       	pop	r29
    450e:	08 95       	ret

00004510 <ICU_GetDutyCycle>:

void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
    4510:	df 93       	push	r29
    4512:	cf 93       	push	r28
    4514:	00 d0       	rcall	.+0      	; 0x4516 <ICU_GetDutyCycle+0x6>
    4516:	00 d0       	rcall	.+0      	; 0x4518 <ICU_GetDutyCycle+0x8>
    4518:	0f 92       	push	r0
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	89 83       	std	Y+1, r24	; 0x01
    4520:	7b 83       	std	Y+3, r23	; 0x03
    4522:	6a 83       	std	Y+2, r22	; 0x02
    4524:	5d 83       	std	Y+5, r21	; 0x05
    4526:	4c 83       	std	Y+4, r20	; 0x04
	switch (Tmr_Channel) {
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	88 2f       	mov	r24, r24
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	39 f4       	brne	.+14     	; 0x4540 <ICU_GetDutyCycle+0x30>
		case ICU_TIMER_1:
			ICU_GetDutyCycle_Timer1(Prescale_Value, Duty_Ptr);
    4532:	8a 81       	ldd	r24, Y+2	; 0x02
    4534:	9b 81       	ldd	r25, Y+3	; 0x03
    4536:	2c 81       	ldd	r18, Y+4	; 0x04
    4538:	3d 81       	ldd	r19, Y+5	; 0x05
    453a:	b9 01       	movw	r22, r18
    453c:	0e 94 fe 22 	call	0x45fc	; 0x45fc <ICU_GetDutyCycle_Timer1>
			break;
		default: break;
	}
}
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <ICU_InitTimer1>:

/************************************************************************/
/*					Private Functions Implementations                   */
/************************************************************************/
void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr) {
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	00 d0       	rcall	.+0      	; 0x4556 <ICU_InitTimer1+0x6>
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
    455a:	9a 83       	std	Y+2, r25	; 0x02
    455c:	89 83       	std	Y+1, r24	; 0x01
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	CLEAR_BIT(*PORTD_DIR_REG, 6U);
    455e:	a1 e3       	ldi	r26, 0x31	; 49
    4560:	b0 e0       	ldi	r27, 0x00	; 0
    4562:	e1 e3       	ldi	r30, 0x31	; 49
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	8f 7b       	andi	r24, 0xBF	; 191
    456a:	8c 93       	st	X, r24
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
    456c:	ef e4       	ldi	r30, 0x4F	; 79
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	10 82       	st	Z, r1
	*TIMER1_CTRL_REG_B = 0x00U;
    4572:	ee e4       	ldi	r30, 0x4E	; 78
    4574:	f0 e0       	ldi	r31, 0x00	; 0
    4576:	10 82       	st	Z, r1
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
    4578:	ae e4       	ldi	r26, 0x4E	; 78
    457a:	b0 e0       	ldi	r27, 0x00	; 0
    457c:	ee e4       	ldi	r30, 0x4E	; 78
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	90 81       	ld	r25, Z
    4582:	e9 81       	ldd	r30, Y+1	; 0x01
    4584:	fa 81       	ldd	r31, Y+2	; 0x02
    4586:	81 81       	ldd	r24, Z+1	; 0x01
    4588:	89 2b       	or	r24, r25
    458a:	8c 93       	st	X, r24
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
    458c:	ae e4       	ldi	r26, 0x4E	; 78
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	ee e4       	ldi	r30, 0x4E	; 78
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	28 2f       	mov	r18, r24
    4598:	e9 81       	ldd	r30, Y+1	; 0x01
    459a:	fa 81       	ldd	r31, Y+2	; 0x02
    459c:	82 81       	ldd	r24, Z+2	; 0x02
    459e:	88 2f       	mov	r24, r24
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	00 24       	eor	r0, r0
    45a4:	96 95       	lsr	r25
    45a6:	87 95       	ror	r24
    45a8:	07 94       	ror	r0
    45aa:	96 95       	lsr	r25
    45ac:	87 95       	ror	r24
    45ae:	07 94       	ror	r0
    45b0:	98 2f       	mov	r25, r24
    45b2:	80 2d       	mov	r24, r0
    45b4:	82 2b       	or	r24, r18
    45b6:	8c 93       	st	X, r24
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
    45b8:	a9 e5       	ldi	r26, 0x59	; 89
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	e9 e5       	ldi	r30, 0x59	; 89
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	28 2f       	mov	r18, r24
    45c4:	e9 81       	ldd	r30, Y+1	; 0x01
    45c6:	fa 81       	ldd	r31, Y+2	; 0x02
    45c8:	83 81       	ldd	r24, Z+3	; 0x03
    45ca:	88 2f       	mov	r24, r24
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	88 0f       	add	r24, r24
    45d0:	99 1f       	adc	r25, r25
    45d2:	82 95       	swap	r24
    45d4:	92 95       	swap	r25
    45d6:	90 7f       	andi	r25, 0xF0	; 240
    45d8:	98 27       	eor	r25, r24
    45da:	80 7f       	andi	r24, 0xF0	; 240
    45dc:	98 27       	eor	r25, r24
    45de:	82 2b       	or	r24, r18
    45e0:	8c 93       	st	X, r24
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
    45e2:	ec e4       	ldi	r30, 0x4C	; 76
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	11 82       	std	Z+1, r1	; 0x01
    45e8:	10 82       	st	Z, r1
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
    45ea:	e6 e4       	ldi	r30, 0x46	; 70
    45ec:	f0 e0       	ldi	r31, 0x00	; 0
    45ee:	11 82       	std	Z+1, r1	; 0x01
    45f0:	10 82       	st	Z, r1
}
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	cf 91       	pop	r28
    45f8:	df 91       	pop	r29
    45fa:	08 95       	ret

000045fc <ICU_GetDutyCycle_Timer1>:

void ICU_GetDutyCycle_Timer1(uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
    45fc:	ef 92       	push	r14
    45fe:	ff 92       	push	r15
    4600:	0f 93       	push	r16
    4602:	1f 93       	push	r17
    4604:	df 93       	push	r29
    4606:	cf 93       	push	r28
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
    460c:	2c 97       	sbiw	r28, 0x0c	; 12
    460e:	0f b6       	in	r0, 0x3f	; 63
    4610:	f8 94       	cli
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	cd bf       	out	0x3d, r28	; 61
    4618:	9a 87       	std	Y+10, r25	; 0x0a
    461a:	89 87       	std	Y+9, r24	; 0x09
    461c:	7c 87       	std	Y+12, r23	; 0x0c
    461e:	6b 87       	std	Y+11, r22	; 0x0b
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    4620:	a8 e5       	ldi	r26, 0x58	; 88
    4622:	b0 e0       	ldi	r27, 0x00	; 0
    4624:	e8 e5       	ldi	r30, 0x58	; 88
    4626:	f0 e0       	ldi	r31, 0x00	; 0
    4628:	80 81       	ld	r24, Z
    462a:	80 62       	ori	r24, 0x20	; 32
    462c:	8c 93       	st	X, r24
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	61 e0       	ldi	r22, 0x01	; 1
    4632:	0e 94 03 22 	call	0x4406	; 0x4406 <ICU_SetTriggerEdge>
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	0e 94 5e 22 	call	0x44bc	; 0x44bc <ICU_GetStatus>
    463c:	88 23       	and	r24, r24
    463e:	d9 f3       	breq	.-10     	; 0x4636 <ICU_GetDutyCycle_Timer1+0x3a>
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
    4640:	1d 82       	std	Y+5, r1	; 0x05
    4642:	1e 82       	std	Y+6, r1	; 0x06
    4644:	1f 82       	std	Y+7, r1	; 0x07
    4646:	18 86       	std	Y+8, r1	; 0x08
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	0e 94 03 22 	call	0x4406	; 0x4406 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	0e 94 2f 22 	call	0x445e	; 0x445e <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    4656:	a8 e5       	ldi	r26, 0x58	; 88
    4658:	b0 e0       	ldi	r27, 0x00	; 0
    465a:	e8 e5       	ldi	r30, 0x58	; 88
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	80 81       	ld	r24, Z
    4660:	80 62       	ori	r24, 0x20	; 32
    4662:	8c 93       	st	X, r24
    4664:	1e c0       	rjmp	.+60     	; 0x46a2 <ICU_GetDutyCycle_Timer1+0xa6>
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
    4666:	e8 e5       	ldi	r30, 0x58	; 88
    4668:	f0 e0       	ldi	r31, 0x00	; 0
    466a:	80 81       	ld	r24, Z
    466c:	86 95       	lsr	r24
    466e:	86 95       	lsr	r24
    4670:	88 2f       	mov	r24, r24
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	81 70       	andi	r24, 0x01	; 1
    4676:	90 70       	andi	r25, 0x00	; 0
    4678:	88 23       	and	r24, r24
    467a:	99 f0       	breq	.+38     	; 0x46a2 <ICU_GetDutyCycle_Timer1+0xa6>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
    467c:	a8 e5       	ldi	r26, 0x58	; 88
    467e:	b0 e0       	ldi	r27, 0x00	; 0
    4680:	e8 e5       	ldi	r30, 0x58	; 88
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	80 81       	ld	r24, Z
    4686:	84 60       	ori	r24, 0x04	; 4
    4688:	8c 93       	st	X, r24
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
    468a:	8d 81       	ldd	r24, Y+5	; 0x05
    468c:	9e 81       	ldd	r25, Y+6	; 0x06
    468e:	af 81       	ldd	r26, Y+7	; 0x07
    4690:	b8 85       	ldd	r27, Y+8	; 0x08
    4692:	80 50       	subi	r24, 0x00	; 0
    4694:	90 40       	sbci	r25, 0x00	; 0
    4696:	af 4f       	sbci	r26, 0xFF	; 255
    4698:	bf 4f       	sbci	r27, 0xFF	; 255
    469a:	8d 83       	std	Y+5, r24	; 0x05
    469c:	9e 83       	std	Y+6, r25	; 0x06
    469e:	af 83       	std	Y+7, r26	; 0x07
    46a0:	b8 87       	std	Y+8, r27	; 0x08
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	0e 94 5e 22 	call	0x44bc	; 0x44bc <ICU_GetStatus>
    46a8:	88 23       	and	r24, r24
    46aa:	e9 f2       	breq	.-70     	; 0x4666 <ICU_GetDutyCycle_Timer1+0x6a>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	0e 94 42 22 	call	0x4484	; 0x4484 <ICU_GetInputCaptureValue>
    46b2:	9c 01       	movw	r18, r24
    46b4:	40 e0       	ldi	r20, 0x00	; 0
    46b6:	50 e0       	ldi	r21, 0x00	; 0
    46b8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ba:	9e 81       	ldd	r25, Y+6	; 0x06
    46bc:	af 81       	ldd	r26, Y+7	; 0x07
    46be:	b8 85       	ldd	r27, Y+8	; 0x08
    46c0:	82 0f       	add	r24, r18
    46c2:	93 1f       	adc	r25, r19
    46c4:	a4 1f       	adc	r26, r20
    46c6:	b5 1f       	adc	r27, r21
    46c8:	8d 83       	std	Y+5, r24	; 0x05
    46ca:	9e 83       	std	Y+6, r25	; 0x06
    46cc:	af 83       	std	Y+7, r26	; 0x07
    46ce:	b8 87       	std	Y+8, r27	; 0x08

	uint32 u32Local_OFF_Counts = 0U;
    46d0:	19 82       	std	Y+1, r1	; 0x01
    46d2:	1a 82       	std	Y+2, r1	; 0x02
    46d4:	1b 82       	std	Y+3, r1	; 0x03
    46d6:	1c 82       	std	Y+4, r1	; 0x04
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	61 e0       	ldi	r22, 0x01	; 1
    46dc:	0e 94 03 22 	call	0x4406	; 0x4406 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	0e 94 2f 22 	call	0x445e	; 0x445e <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    46e6:	a8 e5       	ldi	r26, 0x58	; 88
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	e8 e5       	ldi	r30, 0x58	; 88
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	80 81       	ld	r24, Z
    46f0:	80 62       	ori	r24, 0x20	; 32
    46f2:	8c 93       	st	X, r24
    46f4:	1e c0       	rjmp	.+60     	; 0x4732 <ICU_GetDutyCycle_Timer1+0x136>
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
    46f6:	e8 e5       	ldi	r30, 0x58	; 88
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	80 81       	ld	r24, Z
    46fc:	86 95       	lsr	r24
    46fe:	86 95       	lsr	r24
    4700:	88 2f       	mov	r24, r24
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	81 70       	andi	r24, 0x01	; 1
    4706:	90 70       	andi	r25, 0x00	; 0
    4708:	88 23       	and	r24, r24
    470a:	99 f0       	breq	.+38     	; 0x4732 <ICU_GetDutyCycle_Timer1+0x136>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
    470c:	a8 e5       	ldi	r26, 0x58	; 88
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	e8 e5       	ldi	r30, 0x58	; 88
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	84 60       	ori	r24, 0x04	; 4
    4718:	8c 93       	st	X, r24
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	9a 81       	ldd	r25, Y+2	; 0x02
    471e:	ab 81       	ldd	r26, Y+3	; 0x03
    4720:	bc 81       	ldd	r27, Y+4	; 0x04
    4722:	80 50       	subi	r24, 0x00	; 0
    4724:	90 40       	sbci	r25, 0x00	; 0
    4726:	af 4f       	sbci	r26, 0xFF	; 255
    4728:	bf 4f       	sbci	r27, 0xFF	; 255
    472a:	89 83       	std	Y+1, r24	; 0x01
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	ab 83       	std	Y+3, r26	; 0x03
    4730:	bc 83       	std	Y+4, r27	; 0x04
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	0e 94 5e 22 	call	0x44bc	; 0x44bc <ICU_GetStatus>
    4738:	88 23       	and	r24, r24
    473a:	e9 f2       	breq	.-70     	; 0x46f6 <ICU_GetDutyCycle_Timer1+0xfa>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	0e 94 42 22 	call	0x4484	; 0x4484 <ICU_GetInputCaptureValue>
    4742:	cc 01       	movw	r24, r24
    4744:	a0 e0       	ldi	r26, 0x00	; 0
    4746:	b0 e0       	ldi	r27, 0x00	; 0
    4748:	89 83       	std	Y+1, r24	; 0x01
    474a:	9a 83       	std	Y+2, r25	; 0x02
    474c:	ab 83       	std	Y+3, r26	; 0x03
    474e:	bc 83       	std	Y+4, r27	; 0x04

	/* Set counts */
	//strLocal_Duty.High_Time = u32Local_ON_Counts;
	//strLocal_Duty.Period_Time = u32Local_ON_Counts + u32Local_OFF_Counts;
	/* Convert these into milliseconds */
	Duty_Ptr->High_Time = (float32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
    4750:	89 85       	ldd	r24, Y+9	; 0x09
    4752:	9a 85       	ldd	r25, Y+10	; 0x0a
    4754:	cc 01       	movw	r24, r24
    4756:	a0 e0       	ldi	r26, 0x00	; 0
    4758:	b0 e0       	ldi	r27, 0x00	; 0
    475a:	2d 81       	ldd	r18, Y+5	; 0x05
    475c:	3e 81       	ldd	r19, Y+6	; 0x06
    475e:	4f 81       	ldd	r20, Y+7	; 0x07
    4760:	58 85       	ldd	r21, Y+8	; 0x08
    4762:	bc 01       	movw	r22, r24
    4764:	cd 01       	movw	r24, r26
    4766:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	bc 01       	movw	r22, r24
    477c:	cd 01       	movw	r24, r26
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	4a e7       	ldi	r20, 0x7A	; 122
    4784:	54 e4       	ldi	r21, 0x44	; 68
    4786:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    478a:	dc 01       	movw	r26, r24
    478c:	cb 01       	movw	r24, r22
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	34 e2       	ldi	r19, 0x24	; 36
    4796:	44 e7       	ldi	r20, 0x74	; 116
    4798:	5b e4       	ldi	r21, 0x4B	; 75
    479a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    47a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    47a6:	80 83       	st	Z, r24
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	a2 83       	std	Z+2, r26	; 0x02
    47ac:	b3 83       	std	Z+3, r27	; 0x03
	Duty_Ptr->Period_Time = (float32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
    47ae:	2d 81       	ldd	r18, Y+5	; 0x05
    47b0:	3e 81       	ldd	r19, Y+6	; 0x06
    47b2:	4f 81       	ldd	r20, Y+7	; 0x07
    47b4:	58 85       	ldd	r21, Y+8	; 0x08
    47b6:	89 81       	ldd	r24, Y+1	; 0x01
    47b8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ba:	ab 81       	ldd	r26, Y+3	; 0x03
    47bc:	bc 81       	ldd	r27, Y+4	; 0x04
    47be:	79 01       	movw	r14, r18
    47c0:	8a 01       	movw	r16, r20
    47c2:	e8 0e       	add	r14, r24
    47c4:	f9 1e       	adc	r15, r25
    47c6:	0a 1f       	adc	r16, r26
    47c8:	1b 1f       	adc	r17, r27
    47ca:	89 85       	ldd	r24, Y+9	; 0x09
    47cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ce:	9c 01       	movw	r18, r24
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	c8 01       	movw	r24, r16
    47d6:	b7 01       	movw	r22, r14
    47d8:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
    47e0:	bc 01       	movw	r22, r24
    47e2:	cd 01       	movw	r24, r26
    47e4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	bc 01       	movw	r22, r24
    47ee:	cd 01       	movw	r24, r26
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	4a e7       	ldi	r20, 0x7A	; 122
    47f6:	54 e4       	ldi	r21, 0x44	; 68
    47f8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	bc 01       	movw	r22, r24
    4802:	cd 01       	movw	r24, r26
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	34 e2       	ldi	r19, 0x24	; 36
    4808:	44 e7       	ldi	r20, 0x74	; 116
    480a:	5b e4       	ldi	r21, 0x4B	; 75
    480c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	eb 85       	ldd	r30, Y+11	; 0x0b
    4816:	fc 85       	ldd	r31, Y+12	; 0x0c
    4818:	84 83       	std	Z+4, r24	; 0x04
    481a:	95 83       	std	Z+5, r25	; 0x05
    481c:	a6 83       	std	Z+6, r26	; 0x06
    481e:	b7 83       	std	Z+7, r27	; 0x07
}
    4820:	2c 96       	adiw	r28, 0x0c	; 12
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	1f 91       	pop	r17
    4832:	0f 91       	pop	r16
    4834:	ff 90       	pop	r15
    4836:	ef 90       	pop	r14
    4838:	08 95       	ret

0000483a <GPT_Init>:
static void GPT_InitTimer2(const GPT_ConfigurationType* Config_Ptr);

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void GPT_Init(const GPT_ConfigurationType* Config_Arr_Ptr) {
    483a:	df 93       	push	r29
    483c:	cf 93       	push	r28
    483e:	00 d0       	rcall	.+0      	; 0x4840 <GPT_Init+0x6>
    4840:	00 d0       	rcall	.+0      	; 0x4842 <GPT_Init+0x8>
    4842:	0f 92       	push	r0
    4844:	cd b7       	in	r28, 0x3d	; 61
    4846:	de b7       	in	r29, 0x3e	; 62
    4848:	9b 83       	std	Y+3, r25	; 0x03
    484a:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < NUM_TIMERS_OPERATING; i++, Config_Arr_Ptr++) {
    484c:	19 82       	std	Y+1, r1	; 0x01
    484e:	2b c0       	rjmp	.+86     	; 0x48a6 <GPT_Init+0x6c>
		switch (Config_Arr_Ptr->Tmr_Channel) {
    4850:	ea 81       	ldd	r30, Y+2	; 0x02
    4852:	fb 81       	ldd	r31, Y+3	; 0x03
    4854:	80 81       	ld	r24, Z
    4856:	28 2f       	mov	r18, r24
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	3d 83       	std	Y+5, r19	; 0x05
    485c:	2c 83       	std	Y+4, r18	; 0x04
    485e:	8c 81       	ldd	r24, Y+4	; 0x04
    4860:	9d 81       	ldd	r25, Y+5	; 0x05
    4862:	81 30       	cpi	r24, 0x01	; 1
    4864:	91 05       	cpc	r25, r1
    4866:	71 f0       	breq	.+28     	; 0x4884 <GPT_Init+0x4a>
    4868:	2c 81       	ldd	r18, Y+4	; 0x04
    486a:	3d 81       	ldd	r19, Y+5	; 0x05
    486c:	22 30       	cpi	r18, 0x02	; 2
    486e:	31 05       	cpc	r19, r1
    4870:	71 f0       	breq	.+28     	; 0x488e <GPT_Init+0x54>
    4872:	8c 81       	ldd	r24, Y+4	; 0x04
    4874:	9d 81       	ldd	r25, Y+5	; 0x05
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	71 f4       	brne	.+28     	; 0x4896 <GPT_Init+0x5c>
			case GPT_TIMER_0: GPT_InitTimer0(Config_Arr_Ptr); break;
    487a:	8a 81       	ldd	r24, Y+2	; 0x02
    487c:	9b 81       	ldd	r25, Y+3	; 0x03
    487e:	0e 94 5e 24 	call	0x48bc	; 0x48bc <GPT_InitTimer0>
    4882:	09 c0       	rjmp	.+18     	; 0x4896 <GPT_Init+0x5c>
			case GPT_TIMER_1: GPT_InitTimer1(Config_Arr_Ptr); break;
    4884:	8a 81       	ldd	r24, Y+2	; 0x02
    4886:	9b 81       	ldd	r25, Y+3	; 0x03
    4888:	0e 94 ef 24 	call	0x49de	; 0x49de <GPT_InitTimer1>
    488c:	04 c0       	rjmp	.+8      	; 0x4896 <GPT_Init+0x5c>
			case GPT_TIMER_2: GPT_InitTimer2(Config_Arr_Ptr); break;
    488e:	8a 81       	ldd	r24, Y+2	; 0x02
    4890:	9b 81       	ldd	r25, Y+3	; 0x03
    4892:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <GPT_InitTimer2>

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void GPT_Init(const GPT_ConfigurationType* Config_Arr_Ptr) {
	for (uint8 i = 0; i < NUM_TIMERS_OPERATING; i++, Config_Arr_Ptr++) {
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	8f 5f       	subi	r24, 0xFF	; 255
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	8a 81       	ldd	r24, Y+2	; 0x02
    489e:	9b 81       	ldd	r25, Y+3	; 0x03
    48a0:	04 96       	adiw	r24, 0x04	; 4
    48a2:	9b 83       	std	Y+3, r25	; 0x03
    48a4:	8a 83       	std	Y+2, r24	; 0x02
    48a6:	89 81       	ldd	r24, Y+1	; 0x01
    48a8:	88 23       	and	r24, r24
    48aa:	91 f2       	breq	.-92     	; 0x4850 <GPT_Init+0x16>
			case GPT_TIMER_1: GPT_InitTimer1(Config_Arr_Ptr); break;
			case GPT_TIMER_2: GPT_InitTimer2(Config_Arr_Ptr); break;
			default: break;
		}
	}
}
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	08 95       	ret

000048bc <GPT_InitTimer0>:

static void GPT_InitTimer0(const GPT_ConfigurationType* Config_Ptr) {
    48bc:	df 93       	push	r29
    48be:	cf 93       	push	r28
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <GPT_InitTimer0+0x6>
    48c2:	00 d0       	rcall	.+0      	; 0x48c4 <GPT_InitTimer0+0x8>
    48c4:	00 d0       	rcall	.+0      	; 0x48c6 <GPT_InitTimer0+0xa>
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	9a 83       	std	Y+2, r25	; 0x02
    48cc:	89 83       	std	Y+1, r24	; 0x01
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
    48ce:	e3 e5       	ldi	r30, 0x53	; 83
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	10 82       	st	Z, r1
	/* Set Mode (Normal or CTC) */
	*TIMER0_CTRL_REG |= (Config_Ptr->Op_Mode);
    48d4:	a3 e5       	ldi	r26, 0x53	; 83
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	e3 e5       	ldi	r30, 0x53	; 83
    48da:	f0 e0       	ldi	r31, 0x00	; 0
    48dc:	90 81       	ld	r25, Z
    48de:	e9 81       	ldd	r30, Y+1	; 0x01
    48e0:	fa 81       	ldd	r31, Y+2	; 0x02
    48e2:	81 81       	ldd	r24, Z+1	; 0x01
    48e4:	89 2b       	or	r24, r25
    48e6:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    48e8:	e9 81       	ldd	r30, Y+1	; 0x01
    48ea:	fa 81       	ldd	r31, Y+2	; 0x02
    48ec:	82 81       	ldd	r24, Z+2	; 0x02
    48ee:	28 2f       	mov	r18, r24
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	3e 83       	std	Y+6, r19	; 0x06
    48f4:	2d 83       	std	Y+5, r18	; 0x05
    48f6:	8d 81       	ldd	r24, Y+5	; 0x05
    48f8:	9e 81       	ldd	r25, Y+6	; 0x06
    48fa:	84 30       	cpi	r24, 0x04	; 4
    48fc:	91 05       	cpc	r25, r1
    48fe:	f1 f0       	breq	.+60     	; 0x493c <GPT_InitTimer0+0x80>
    4900:	2d 81       	ldd	r18, Y+5	; 0x05
    4902:	3e 81       	ldd	r19, Y+6	; 0x06
    4904:	25 30       	cpi	r18, 0x05	; 5
    4906:	31 05       	cpc	r19, r1
    4908:	3c f4       	brge	.+14     	; 0x4918 <GPT_InitTimer0+0x5c>
    490a:	8d 81       	ldd	r24, Y+5	; 0x05
    490c:	9e 81       	ldd	r25, Y+6	; 0x06
    490e:	00 96       	adiw	r24, 0x00	; 0
    4910:	83 30       	cpi	r24, 0x03	; 3
    4912:	91 05       	cpc	r25, r1
    4914:	50 f5       	brcc	.+84     	; 0x496a <GPT_InitTimer0+0xae>
    4916:	07 c0       	rjmp	.+14     	; 0x4926 <GPT_InitTimer0+0x6a>
    4918:	8d 81       	ldd	r24, Y+5	; 0x05
    491a:	9e 81       	ldd	r25, Y+6	; 0x06
    491c:	06 97       	sbiw	r24, 0x06	; 6
    491e:	84 30       	cpi	r24, 0x04	; 4
    4920:	91 05       	cpc	r25, r1
    4922:	18 f5       	brcc	.+70     	; 0x496a <GPT_InitTimer0+0xae>
    4924:	17 c0       	rjmp	.+46     	; 0x4954 <GPT_InitTimer0+0x98>
		case GPT_TIMER_STOP:
		case GPT_PRESCALE_1:
		case GPT_PRESCALE_8:	
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    4926:	a3 e5       	ldi	r26, 0x53	; 83
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	e3 e5       	ldi	r30, 0x53	; 83
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	90 81       	ld	r25, Z
    4930:	e9 81       	ldd	r30, Y+1	; 0x01
    4932:	fa 81       	ldd	r31, Y+2	; 0x02
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	89 2b       	or	r24, r25
    4938:	8c 93       	st	X, r24
    493a:	17 c0       	rjmp	.+46     	; 0x496a <GPT_InitTimer0+0xae>
		case GPT_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
    493c:	a3 e5       	ldi	r26, 0x53	; 83
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	e3 e5       	ldi	r30, 0x53	; 83
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	90 81       	ld	r25, Z
    4946:	e9 81       	ldd	r30, Y+1	; 0x01
    4948:	fa 81       	ldd	r31, Y+2	; 0x02
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	81 50       	subi	r24, 0x01	; 1
    494e:	89 2b       	or	r24, r25
    4950:	8c 93       	st	X, r24
    4952:	0b c0       	rjmp	.+22     	; 0x496a <GPT_InitTimer0+0xae>
		case GPT_PRESCALE_256:
		case GPT_PRESCALE_1024:
		case GPT_EXT_CLK_FALLING_EDGE:
		case GPT_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    4954:	a3 e5       	ldi	r26, 0x53	; 83
    4956:	b0 e0       	ldi	r27, 0x00	; 0
    4958:	e3 e5       	ldi	r30, 0x53	; 83
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	90 81       	ld	r25, Z
    495e:	e9 81       	ldd	r30, Y+1	; 0x01
    4960:	fa 81       	ldd	r31, Y+2	; 0x02
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	82 50       	subi	r24, 0x02	; 2
    4966:	89 2b       	or	r24, r25
    4968:	8c 93       	st	X, r24
		default: break;
	}
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG &= (0xFCU);
    496a:	a9 e5       	ldi	r26, 0x59	; 89
    496c:	b0 e0       	ldi	r27, 0x00	; 0
    496e:	e9 e5       	ldi	r30, 0x59	; 89
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	80 81       	ld	r24, Z
    4974:	8c 7f       	andi	r24, 0xFC	; 252
    4976:	8c 93       	st	X, r24
	switch (Config_Ptr->Op_Mode) {
    4978:	e9 81       	ldd	r30, Y+1	; 0x01
    497a:	fa 81       	ldd	r31, Y+2	; 0x02
    497c:	81 81       	ldd	r24, Z+1	; 0x01
    497e:	28 2f       	mov	r18, r24
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	3c 83       	std	Y+4, r19	; 0x04
    4984:	2b 83       	std	Y+3, r18	; 0x03
    4986:	8b 81       	ldd	r24, Y+3	; 0x03
    4988:	9c 81       	ldd	r25, Y+4	; 0x04
    498a:	00 97       	sbiw	r24, 0x00	; 0
    498c:	31 f0       	breq	.+12     	; 0x499a <GPT_InitTimer0+0xde>
    498e:	2b 81       	ldd	r18, Y+3	; 0x03
    4990:	3c 81       	ldd	r19, Y+4	; 0x04
    4992:	21 30       	cpi	r18, 0x01	; 1
    4994:	31 05       	cpc	r19, r1
    4996:	59 f0       	breq	.+22     	; 0x49ae <GPT_InitTimer0+0xf2>
    4998:	19 c0       	rjmp	.+50     	; 0x49cc <GPT_InitTimer0+0x110>
		case GPT_NORMAL_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_OVF_INT_BIT);
    499a:	a9 e5       	ldi	r26, 0x59	; 89
    499c:	b0 e0       	ldi	r27, 0x00	; 0
    499e:	e9 e5       	ldi	r30, 0x59	; 89
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	90 81       	ld	r25, Z
    49a4:	e9 81       	ldd	r30, Y+1	; 0x01
    49a6:	fa 81       	ldd	r31, Y+2	; 0x02
    49a8:	83 81       	ldd	r24, Z+3	; 0x03
    49aa:	89 2b       	or	r24, r25
    49ac:	8c 93       	st	X, r24
		case GPT_CTC_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_CMP_INT_BIT);
    49ae:	a9 e5       	ldi	r26, 0x59	; 89
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	e9 e5       	ldi	r30, 0x59	; 89
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
    49b8:	28 2f       	mov	r18, r24
    49ba:	e9 81       	ldd	r30, Y+1	; 0x01
    49bc:	fa 81       	ldd	r31, Y+2	; 0x02
    49be:	83 81       	ldd	r24, Z+3	; 0x03
    49c0:	88 2f       	mov	r24, r24
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	88 0f       	add	r24, r24
    49c6:	99 1f       	adc	r25, r25
    49c8:	82 2b       	or	r24, r18
    49ca:	8c 93       	st	X, r24
		default: break;
	}
}
    49cc:	26 96       	adiw	r28, 0x06	; 6
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <GPT_InitTimer1>:

static void GPT_InitTimer1(const GPT_ConfigurationType* Config_Ptr) {
    49de:	df 93       	push	r29
    49e0:	cf 93       	push	r28
    49e2:	00 d0       	rcall	.+0      	; 0x49e4 <GPT_InitTimer1+0x6>
    49e4:	00 d0       	rcall	.+0      	; 0x49e6 <GPT_InitTimer1+0x8>
    49e6:	00 d0       	rcall	.+0      	; 0x49e8 <GPT_InitTimer1+0xa>
    49e8:	cd b7       	in	r28, 0x3d	; 61
    49ea:	de b7       	in	r29, 0x3e	; 62
    49ec:	9a 83       	std	Y+2, r25	; 0x02
    49ee:	89 83       	std	Y+1, r24	; 0x01
	/* Clear TCCR1A and TCCR1B Register Configurations */
	*TIMER1_CTRL_REG_A = 0x00U;
    49f0:	ef e4       	ldi	r30, 0x4F	; 79
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	10 82       	st	Z, r1
	*TIMER1_CTRL_REG_B = 0x00U;
    49f6:	ee e4       	ldi	r30, 0x4E	; 78
    49f8:	f0 e0       	ldi	r31, 0x00	; 0
    49fa:	10 82       	st	Z, r1
	/* Set Mode (Normal or CTC) */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Op_Mode);
    49fc:	ae e4       	ldi	r26, 0x4E	; 78
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	ee e4       	ldi	r30, 0x4E	; 78
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	90 81       	ld	r25, Z
    4a06:	e9 81       	ldd	r30, Y+1	; 0x01
    4a08:	fa 81       	ldd	r31, Y+2	; 0x02
    4a0a:	81 81       	ldd	r24, Z+1	; 0x01
    4a0c:	89 2b       	or	r24, r25
    4a0e:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    4a10:	e9 81       	ldd	r30, Y+1	; 0x01
    4a12:	fa 81       	ldd	r31, Y+2	; 0x02
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	28 2f       	mov	r18, r24
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	3e 83       	std	Y+6, r19	; 0x06
    4a1c:	2d 83       	std	Y+5, r18	; 0x05
    4a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a20:	9e 81       	ldd	r25, Y+6	; 0x06
    4a22:	84 30       	cpi	r24, 0x04	; 4
    4a24:	91 05       	cpc	r25, r1
    4a26:	f1 f0       	breq	.+60     	; 0x4a64 <GPT_InitTimer1+0x86>
    4a28:	2d 81       	ldd	r18, Y+5	; 0x05
    4a2a:	3e 81       	ldd	r19, Y+6	; 0x06
    4a2c:	25 30       	cpi	r18, 0x05	; 5
    4a2e:	31 05       	cpc	r19, r1
    4a30:	3c f4       	brge	.+14     	; 0x4a40 <GPT_InitTimer1+0x62>
    4a32:	8d 81       	ldd	r24, Y+5	; 0x05
    4a34:	9e 81       	ldd	r25, Y+6	; 0x06
    4a36:	00 96       	adiw	r24, 0x00	; 0
    4a38:	83 30       	cpi	r24, 0x03	; 3
    4a3a:	91 05       	cpc	r25, r1
    4a3c:	50 f5       	brcc	.+84     	; 0x4a92 <GPT_InitTimer1+0xb4>
    4a3e:	07 c0       	rjmp	.+14     	; 0x4a4e <GPT_InitTimer1+0x70>
    4a40:	8d 81       	ldd	r24, Y+5	; 0x05
    4a42:	9e 81       	ldd	r25, Y+6	; 0x06
    4a44:	06 97       	sbiw	r24, 0x06	; 6
    4a46:	84 30       	cpi	r24, 0x04	; 4
    4a48:	91 05       	cpc	r25, r1
    4a4a:	18 f5       	brcc	.+70     	; 0x4a92 <GPT_InitTimer1+0xb4>
    4a4c:	17 c0       	rjmp	.+46     	; 0x4a7c <GPT_InitTimer1+0x9e>
		case GPT_TIMER_STOP:
		case GPT_PRESCALE_1:
		case GPT_PRESCALE_8:
			*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
    4a4e:	ae e4       	ldi	r26, 0x4E	; 78
    4a50:	b0 e0       	ldi	r27, 0x00	; 0
    4a52:	ee e4       	ldi	r30, 0x4E	; 78
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	90 81       	ld	r25, Z
    4a58:	e9 81       	ldd	r30, Y+1	; 0x01
    4a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a5c:	82 81       	ldd	r24, Z+2	; 0x02
    4a5e:	89 2b       	or	r24, r25
    4a60:	8c 93       	st	X, r24
    4a62:	17 c0       	rjmp	.+46     	; 0x4a92 <GPT_InitTimer1+0xb4>
		case GPT_PRESCALE_64:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
    4a64:	ae e4       	ldi	r26, 0x4E	; 78
    4a66:	b0 e0       	ldi	r27, 0x00	; 0
    4a68:	ee e4       	ldi	r30, 0x4E	; 78
    4a6a:	f0 e0       	ldi	r31, 0x00	; 0
    4a6c:	90 81       	ld	r25, Z
    4a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a70:	fa 81       	ldd	r31, Y+2	; 0x02
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	81 50       	subi	r24, 0x01	; 1
    4a76:	89 2b       	or	r24, r25
    4a78:	8c 93       	st	X, r24
    4a7a:	0b c0       	rjmp	.+22     	; 0x4a92 <GPT_InitTimer1+0xb4>
		case GPT_PRESCALE_256:
		case GPT_PRESCALE_1024:
		case GPT_EXT_CLK_FALLING_EDGE:
		case GPT_EXT_CLK_RISING_EDGE:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
    4a7c:	ae e4       	ldi	r26, 0x4E	; 78
    4a7e:	b0 e0       	ldi	r27, 0x00	; 0
    4a80:	ee e4       	ldi	r30, 0x4E	; 78
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	90 81       	ld	r25, Z
    4a86:	e9 81       	ldd	r30, Y+1	; 0x01
    4a88:	fa 81       	ldd	r31, Y+2	; 0x02
    4a8a:	82 81       	ldd	r24, Z+2	; 0x02
    4a8c:	82 50       	subi	r24, 0x02	; 2
    4a8e:	89 2b       	or	r24, r25
    4a90:	8c 93       	st	X, r24
		default: break;
	}
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG &= (0xE3U);
    4a92:	a9 e5       	ldi	r26, 0x59	; 89
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	e9 e5       	ldi	r30, 0x59	; 89
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	80 81       	ld	r24, Z
    4a9c:	83 7e       	andi	r24, 0xE3	; 227
    4a9e:	8c 93       	st	X, r24
	switch (Config_Ptr->Op_Mode) {
    4aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    4aa4:	81 81       	ldd	r24, Z+1	; 0x01
    4aa6:	28 2f       	mov	r18, r24
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	3c 83       	std	Y+4, r19	; 0x04
    4aac:	2b 83       	std	Y+3, r18	; 0x03
    4aae:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab2:	00 97       	sbiw	r24, 0x00	; 0
    4ab4:	31 f0       	breq	.+12     	; 0x4ac2 <GPT_InitTimer1+0xe4>
    4ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    4ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    4aba:	21 30       	cpi	r18, 0x01	; 1
    4abc:	31 05       	cpc	r19, r1
    4abe:	91 f0       	breq	.+36     	; 0x4ae4 <GPT_InitTimer1+0x106>
    4ac0:	24 c0       	rjmp	.+72     	; 0x4b0a <GPT_InitTimer1+0x12c>
		case GPT_NORMAL_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_OVF_INT_BIT);
    4ac2:	a9 e5       	ldi	r26, 0x59	; 89
    4ac4:	b0 e0       	ldi	r27, 0x00	; 0
    4ac6:	e9 e5       	ldi	r30, 0x59	; 89
    4ac8:	f0 e0       	ldi	r31, 0x00	; 0
    4aca:	80 81       	ld	r24, Z
    4acc:	28 2f       	mov	r18, r24
    4ace:	e9 81       	ldd	r30, Y+1	; 0x01
    4ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ad2:	83 81       	ldd	r24, Z+3	; 0x03
    4ad4:	88 2f       	mov	r24, r24
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	88 0f       	add	r24, r24
    4ada:	99 1f       	adc	r25, r25
    4adc:	88 0f       	add	r24, r24
    4ade:	99 1f       	adc	r25, r25
    4ae0:	82 2b       	or	r24, r18
    4ae2:	8c 93       	st	X, r24
		case GPT_CTC_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_CMP_A_INT_BIT);
    4ae4:	a9 e5       	ldi	r26, 0x59	; 89
    4ae6:	b0 e0       	ldi	r27, 0x00	; 0
    4ae8:	e9 e5       	ldi	r30, 0x59	; 89
    4aea:	f0 e0       	ldi	r31, 0x00	; 0
    4aec:	80 81       	ld	r24, Z
    4aee:	28 2f       	mov	r18, r24
    4af0:	e9 81       	ldd	r30, Y+1	; 0x01
    4af2:	fa 81       	ldd	r31, Y+2	; 0x02
    4af4:	83 81       	ldd	r24, Z+3	; 0x03
    4af6:	88 2f       	mov	r24, r24
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	82 95       	swap	r24
    4afc:	92 95       	swap	r25
    4afe:	90 7f       	andi	r25, 0xF0	; 240
    4b00:	98 27       	eor	r25, r24
    4b02:	80 7f       	andi	r24, 0xF0	; 240
    4b04:	98 27       	eor	r25, r24
    4b06:	82 2b       	or	r24, r18
    4b08:	8c 93       	st	X, r24
		default: break;
	}
}
    4b0a:	26 96       	adiw	r28, 0x06	; 6
    4b0c:	0f b6       	in	r0, 0x3f	; 63
    4b0e:	f8 94       	cli
    4b10:	de bf       	out	0x3e, r29	; 62
    4b12:	0f be       	out	0x3f, r0	; 63
    4b14:	cd bf       	out	0x3d, r28	; 61
    4b16:	cf 91       	pop	r28
    4b18:	df 91       	pop	r29
    4b1a:	08 95       	ret

00004b1c <GPT_InitTimer2>:

static void GPT_InitTimer2(const GPT_ConfigurationType* Config_Ptr) {
    4b1c:	df 93       	push	r29
    4b1e:	cf 93       	push	r28
    4b20:	00 d0       	rcall	.+0      	; 0x4b22 <GPT_InitTimer2+0x6>
    4b22:	00 d0       	rcall	.+0      	; 0x4b24 <GPT_InitTimer2+0x8>
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
    4b28:	9a 83       	std	Y+2, r25	; 0x02
    4b2a:	89 83       	std	Y+1, r24	; 0x01
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
    4b2c:	e5 e4       	ldi	r30, 0x45	; 69
    4b2e:	f0 e0       	ldi	r31, 0x00	; 0
    4b30:	10 82       	st	Z, r1
	/* Set Mode (Normal or CTC) */
	*TIMER2_CTRL_REG |= (Config_Ptr->Op_Mode);
    4b32:	a5 e4       	ldi	r26, 0x45	; 69
    4b34:	b0 e0       	ldi	r27, 0x00	; 0
    4b36:	e5 e4       	ldi	r30, 0x45	; 69
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	90 81       	ld	r25, Z
    4b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    4b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    4b40:	81 81       	ldd	r24, Z+1	; 0x01
    4b42:	89 2b       	or	r24, r25
    4b44:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != GPT_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != GPT_EXT_CLK_RISING_EDGE) {
    4b46:	e9 81       	ldd	r30, Y+1	; 0x01
    4b48:	fa 81       	ldd	r31, Y+2	; 0x02
    4b4a:	82 81       	ldd	r24, Z+2	; 0x02
    4b4c:	88 30       	cpi	r24, 0x08	; 8
    4b4e:	79 f0       	breq	.+30     	; 0x4b6e <GPT_InitTimer2+0x52>
    4b50:	e9 81       	ldd	r30, Y+1	; 0x01
    4b52:	fa 81       	ldd	r31, Y+2	; 0x02
    4b54:	82 81       	ldd	r24, Z+2	; 0x02
    4b56:	89 30       	cpi	r24, 0x09	; 9
    4b58:	51 f0       	breq	.+20     	; 0x4b6e <GPT_InitTimer2+0x52>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
    4b5a:	a5 e4       	ldi	r26, 0x45	; 69
    4b5c:	b0 e0       	ldi	r27, 0x00	; 0
    4b5e:	e5 e4       	ldi	r30, 0x45	; 69
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	90 81       	ld	r25, Z
    4b64:	e9 81       	ldd	r30, Y+1	; 0x01
    4b66:	fa 81       	ldd	r31, Y+2	; 0x02
    4b68:	82 81       	ldd	r24, Z+2	; 0x02
    4b6a:	89 2b       	or	r24, r25
    4b6c:	8c 93       	st	X, r24
	}
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG &= (0x3FU);
    4b6e:	a9 e5       	ldi	r26, 0x59	; 89
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	e9 e5       	ldi	r30, 0x59	; 89
    4b74:	f0 e0       	ldi	r31, 0x00	; 0
    4b76:	80 81       	ld	r24, Z
    4b78:	8f 73       	andi	r24, 0x3F	; 63
    4b7a:	8c 93       	st	X, r24
	switch (Config_Ptr->Op_Mode) {
    4b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    4b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    4b80:	81 81       	ldd	r24, Z+1	; 0x01
    4b82:	28 2f       	mov	r18, r24
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	3c 83       	std	Y+4, r19	; 0x04
    4b88:	2b 83       	std	Y+3, r18	; 0x03
    4b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b8e:	00 97       	sbiw	r24, 0x00	; 0
    4b90:	31 f0       	breq	.+12     	; 0x4b9e <GPT_InitTimer2+0x82>
    4b92:	2b 81       	ldd	r18, Y+3	; 0x03
    4b94:	3c 81       	ldd	r19, Y+4	; 0x04
    4b96:	21 30       	cpi	r18, 0x01	; 1
    4b98:	31 05       	cpc	r19, r1
    4b9a:	b9 f0       	breq	.+46     	; 0x4bca <GPT_InitTimer2+0xae>
    4b9c:	28 c0       	rjmp	.+80     	; 0x4bee <GPT_InitTimer2+0xd2>
		case GPT_NORMAL_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_OVF_INT_BIT);
    4b9e:	a9 e5       	ldi	r26, 0x59	; 89
    4ba0:	b0 e0       	ldi	r27, 0x00	; 0
    4ba2:	e9 e5       	ldi	r30, 0x59	; 89
    4ba4:	f0 e0       	ldi	r31, 0x00	; 0
    4ba6:	80 81       	ld	r24, Z
    4ba8:	28 2f       	mov	r18, r24
    4baa:	e9 81       	ldd	r30, Y+1	; 0x01
    4bac:	fa 81       	ldd	r31, Y+2	; 0x02
    4bae:	83 81       	ldd	r24, Z+3	; 0x03
    4bb0:	88 2f       	mov	r24, r24
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	00 24       	eor	r0, r0
    4bb6:	96 95       	lsr	r25
    4bb8:	87 95       	ror	r24
    4bba:	07 94       	ror	r0
    4bbc:	96 95       	lsr	r25
    4bbe:	87 95       	ror	r24
    4bc0:	07 94       	ror	r0
    4bc2:	98 2f       	mov	r25, r24
    4bc4:	80 2d       	mov	r24, r0
    4bc6:	82 2b       	or	r24, r18
    4bc8:	8c 93       	st	X, r24
		case GPT_CTC_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_CMP_INT_BIT);
    4bca:	a9 e5       	ldi	r26, 0x59	; 89
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	e9 e5       	ldi	r30, 0x59	; 89
    4bd0:	f0 e0       	ldi	r31, 0x00	; 0
    4bd2:	80 81       	ld	r24, Z
    4bd4:	28 2f       	mov	r18, r24
    4bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    4bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    4bda:	83 81       	ldd	r24, Z+3	; 0x03
    4bdc:	88 2f       	mov	r24, r24
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	96 95       	lsr	r25
    4be2:	98 2f       	mov	r25, r24
    4be4:	88 27       	eor	r24, r24
    4be6:	97 95       	ror	r25
    4be8:	87 95       	ror	r24
    4bea:	82 2b       	or	r24, r18
    4bec:	8c 93       	st	X, r24
		default: break;
	}
}
    4bee:	0f 90       	pop	r0
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0
    4bf6:	cf 91       	pop	r28
    4bf8:	df 91       	pop	r29
    4bfa:	08 95       	ret

00004bfc <GPT_Delay_us>:

void GPT_Delay_us(const GPT_ConfigurationType* Config_Ptr, uint16 Delay_Time_us) {
    4bfc:	df 93       	push	r29
    4bfe:	cf 93       	push	r28
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	60 97       	sbiw	r28, 0x10	; 16
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	f8 94       	cli
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	9c 83       	std	Y+4, r25	; 0x04
    4c12:	8b 83       	std	Y+3, r24	; 0x03
    4c14:	7e 83       	std	Y+6, r23	; 0x06
    4c16:	6d 83       	std	Y+5, r22	; 0x05
	// Delay_Time_us = 10^6 * Prescale * Num_Counts / F_CPU
	uint16 Tmr_Counts = 0U;
    4c18:	1a 82       	std	Y+2, r1	; 0x02
    4c1a:	19 82       	std	Y+1, r1	; 0x01
	switch (Config_Ptr->Clk_Prescale) {
    4c1c:	eb 81       	ldd	r30, Y+3	; 0x03
    4c1e:	fc 81       	ldd	r31, Y+4	; 0x04
    4c20:	82 81       	ldd	r24, Z+2	; 0x02
    4c22:	28 2f       	mov	r18, r24
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	38 8b       	std	Y+16, r19	; 0x10
    4c28:	2f 87       	std	Y+15, r18	; 0x0f
    4c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c2c:	98 89       	ldd	r25, Y+16	; 0x10
    4c2e:	84 30       	cpi	r24, 0x04	; 4
    4c30:	91 05       	cpc	r25, r1
    4c32:	09 f4       	brne	.+2      	; 0x4c36 <GPT_Delay_us+0x3a>
    4c34:	a2 c0       	rjmp	.+324    	; 0x4d7a <GPT_Delay_us+0x17e>
    4c36:	2f 85       	ldd	r18, Y+15	; 0x0f
    4c38:	38 89       	ldd	r19, Y+16	; 0x10
    4c3a:	25 30       	cpi	r18, 0x05	; 5
    4c3c:	31 05       	cpc	r19, r1
    4c3e:	94 f4       	brge	.+36     	; 0x4c64 <GPT_Delay_us+0x68>
    4c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c42:	98 89       	ldd	r25, Y+16	; 0x10
    4c44:	82 30       	cpi	r24, 0x02	; 2
    4c46:	91 05       	cpc	r25, r1
    4c48:	09 f4       	brne	.+2      	; 0x4c4c <GPT_Delay_us+0x50>
    4c4a:	47 c0       	rjmp	.+142    	; 0x4cda <GPT_Delay_us+0xde>
    4c4c:	2f 85       	ldd	r18, Y+15	; 0x0f
    4c4e:	38 89       	ldd	r19, Y+16	; 0x10
    4c50:	23 30       	cpi	r18, 0x03	; 3
    4c52:	31 05       	cpc	r19, r1
    4c54:	0c f0       	brlt	.+2      	; 0x4c58 <GPT_Delay_us+0x5c>
    4c56:	69 c0       	rjmp	.+210    	; 0x4d2a <GPT_Delay_us+0x12e>
    4c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c5a:	98 89       	ldd	r25, Y+16	; 0x10
    4c5c:	81 30       	cpi	r24, 0x01	; 1
    4c5e:	91 05       	cpc	r25, r1
    4c60:	a1 f0       	breq	.+40     	; 0x4c8a <GPT_Delay_us+0x8e>
    4c62:	2a c1       	rjmp	.+596    	; 0x4eb8 <GPT_Delay_us+0x2bc>
    4c64:	2f 85       	ldd	r18, Y+15	; 0x0f
    4c66:	38 89       	ldd	r19, Y+16	; 0x10
    4c68:	26 30       	cpi	r18, 0x06	; 6
    4c6a:	31 05       	cpc	r19, r1
    4c6c:	09 f4       	brne	.+2      	; 0x4c70 <GPT_Delay_us+0x74>
    4c6e:	d5 c0       	rjmp	.+426    	; 0x4e1a <GPT_Delay_us+0x21e>
    4c70:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c72:	98 89       	ldd	r25, Y+16	; 0x10
    4c74:	86 30       	cpi	r24, 0x06	; 6
    4c76:	91 05       	cpc	r25, r1
    4c78:	0c f4       	brge	.+2      	; 0x4c7c <GPT_Delay_us+0x80>
    4c7a:	a7 c0       	rjmp	.+334    	; 0x4dca <GPT_Delay_us+0x1ce>
    4c7c:	2f 85       	ldd	r18, Y+15	; 0x0f
    4c7e:	38 89       	ldd	r19, Y+16	; 0x10
    4c80:	27 30       	cpi	r18, 0x07	; 7
    4c82:	31 05       	cpc	r19, r1
    4c84:	09 f4       	brne	.+2      	; 0x4c88 <GPT_Delay_us+0x8c>
    4c86:	f1 c0       	rjmp	.+482    	; 0x4e6a <GPT_Delay_us+0x26e>
    4c88:	17 c1       	rjmp	.+558    	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_1:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (1.0 * 1000000UL)); break;
    4c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8e:	cc 01       	movw	r24, r24
    4c90:	a0 e0       	ldi	r26, 0x00	; 0
    4c92:	b0 e0       	ldi	r27, 0x00	; 0
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	34 e2       	ldi	r19, 0x24	; 36
    4c98:	44 ef       	ldi	r20, 0xF4	; 244
    4c9a:	50 e0       	ldi	r21, 0x00	; 0
    4c9c:	bc 01       	movw	r22, r24
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	bc 01       	movw	r22, r24
    4caa:	cd 01       	movw	r24, r26
    4cac:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	bc 01       	movw	r22, r24
    4cb6:	cd 01       	movw	r24, r26
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	34 e2       	ldi	r19, 0x24	; 36
    4cbc:	44 e7       	ldi	r20, 0x74	; 116
    4cbe:	59 e4       	ldi	r21, 0x49	; 73
    4cc0:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	bc 01       	movw	r22, r24
    4cca:	cd 01       	movw	r24, r26
    4ccc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	9a 83       	std	Y+2, r25	; 0x02
    4cd6:	89 83       	std	Y+1, r24	; 0x01
    4cd8:	ef c0       	rjmp	.+478    	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_8:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (8.0 * 1000000UL)); break;
    4cda:	8d 81       	ldd	r24, Y+5	; 0x05
    4cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cde:	cc 01       	movw	r24, r24
    4ce0:	a0 e0       	ldi	r26, 0x00	; 0
    4ce2:	b0 e0       	ldi	r27, 0x00	; 0
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	34 e2       	ldi	r19, 0x24	; 36
    4ce8:	44 ef       	ldi	r20, 0xF4	; 244
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	bc 01       	movw	r22, r24
    4cee:	cd 01       	movw	r24, r26
    4cf0:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	bc 01       	movw	r22, r24
    4cfa:	cd 01       	movw	r24, r26
    4cfc:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4d00:	dc 01       	movw	r26, r24
    4d02:	cb 01       	movw	r24, r22
    4d04:	bc 01       	movw	r22, r24
    4d06:	cd 01       	movw	r24, r26
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	34 e2       	ldi	r19, 0x24	; 36
    4d0c:	44 ef       	ldi	r20, 0xF4	; 244
    4d0e:	5a e4       	ldi	r21, 0x4A	; 74
    4d10:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	bc 01       	movw	r22, r24
    4d1a:	cd 01       	movw	r24, r26
    4d1c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	9a 83       	std	Y+2, r25	; 0x02
    4d26:	89 83       	std	Y+1, r24	; 0x01
    4d28:	c7 c0       	rjmp	.+398    	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_32:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (32.0 * 1000000UL)); break;
    4d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2e:	cc 01       	movw	r24, r24
    4d30:	a0 e0       	ldi	r26, 0x00	; 0
    4d32:	b0 e0       	ldi	r27, 0x00	; 0
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	34 e2       	ldi	r19, 0x24	; 36
    4d38:	44 ef       	ldi	r20, 0xF4	; 244
    4d3a:	50 e0       	ldi	r21, 0x00	; 0
    4d3c:	bc 01       	movw	r22, r24
    4d3e:	cd 01       	movw	r24, r26
    4d40:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4d44:	dc 01       	movw	r26, r24
    4d46:	cb 01       	movw	r24, r22
    4d48:	bc 01       	movw	r22, r24
    4d4a:	cd 01       	movw	r24, r26
    4d4c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4d50:	dc 01       	movw	r26, r24
    4d52:	cb 01       	movw	r24, r22
    4d54:	bc 01       	movw	r22, r24
    4d56:	cd 01       	movw	r24, r26
    4d58:	20 e0       	ldi	r18, 0x00	; 0
    4d5a:	34 e2       	ldi	r19, 0x24	; 36
    4d5c:	44 ef       	ldi	r20, 0xF4	; 244
    4d5e:	5b e4       	ldi	r21, 0x4B	; 75
    4d60:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	bc 01       	movw	r22, r24
    4d6a:	cd 01       	movw	r24, r26
    4d6c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4d70:	dc 01       	movw	r26, r24
    4d72:	cb 01       	movw	r24, r22
    4d74:	9a 83       	std	Y+2, r25	; 0x02
    4d76:	89 83       	std	Y+1, r24	; 0x01
    4d78:	9f c0       	rjmp	.+318    	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_64:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (64.0 * 1000000UL)); break;
    4d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d7e:	cc 01       	movw	r24, r24
    4d80:	a0 e0       	ldi	r26, 0x00	; 0
    4d82:	b0 e0       	ldi	r27, 0x00	; 0
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	34 e2       	ldi	r19, 0x24	; 36
    4d88:	44 ef       	ldi	r20, 0xF4	; 244
    4d8a:	50 e0       	ldi	r21, 0x00	; 0
    4d8c:	bc 01       	movw	r22, r24
    4d8e:	cd 01       	movw	r24, r26
    4d90:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4d94:	dc 01       	movw	r26, r24
    4d96:	cb 01       	movw	r24, r22
    4d98:	bc 01       	movw	r22, r24
    4d9a:	cd 01       	movw	r24, r26
    4d9c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	bc 01       	movw	r22, r24
    4da6:	cd 01       	movw	r24, r26
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	34 e2       	ldi	r19, 0x24	; 36
    4dac:	44 e7       	ldi	r20, 0x74	; 116
    4dae:	5c e4       	ldi	r21, 0x4C	; 76
    4db0:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	bc 01       	movw	r22, r24
    4dba:	cd 01       	movw	r24, r26
    4dbc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	9a 83       	std	Y+2, r25	; 0x02
    4dc6:	89 83       	std	Y+1, r24	; 0x01
    4dc8:	77 c0       	rjmp	.+238    	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_128:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (128.0 * 1000000UL)); break;
    4dca:	8d 81       	ldd	r24, Y+5	; 0x05
    4dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    4dce:	cc 01       	movw	r24, r24
    4dd0:	a0 e0       	ldi	r26, 0x00	; 0
    4dd2:	b0 e0       	ldi	r27, 0x00	; 0
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	34 e2       	ldi	r19, 0x24	; 36
    4dd8:	44 ef       	ldi	r20, 0xF4	; 244
    4dda:	50 e0       	ldi	r21, 0x00	; 0
    4ddc:	bc 01       	movw	r22, r24
    4dde:	cd 01       	movw	r24, r26
    4de0:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4de4:	dc 01       	movw	r26, r24
    4de6:	cb 01       	movw	r24, r22
    4de8:	bc 01       	movw	r22, r24
    4dea:	cd 01       	movw	r24, r26
    4dec:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	bc 01       	movw	r22, r24
    4df6:	cd 01       	movw	r24, r26
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	34 e2       	ldi	r19, 0x24	; 36
    4dfc:	44 ef       	ldi	r20, 0xF4	; 244
    4dfe:	5c e4       	ldi	r21, 0x4C	; 76
    4e00:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	bc 01       	movw	r22, r24
    4e0a:	cd 01       	movw	r24, r26
    4e0c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e10:	dc 01       	movw	r26, r24
    4e12:	cb 01       	movw	r24, r22
    4e14:	9a 83       	std	Y+2, r25	; 0x02
    4e16:	89 83       	std	Y+1, r24	; 0x01
    4e18:	4f c0       	rjmp	.+158    	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_256:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (256.0 * 1000000UL)); break;
    4e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e1e:	cc 01       	movw	r24, r24
    4e20:	a0 e0       	ldi	r26, 0x00	; 0
    4e22:	b0 e0       	ldi	r27, 0x00	; 0
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	34 e2       	ldi	r19, 0x24	; 36
    4e28:	44 ef       	ldi	r20, 0xF4	; 244
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	bc 01       	movw	r22, r24
    4e2e:	cd 01       	movw	r24, r26
    4e30:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4e34:	dc 01       	movw	r26, r24
    4e36:	cb 01       	movw	r24, r22
    4e38:	bc 01       	movw	r22, r24
    4e3a:	cd 01       	movw	r24, r26
    4e3c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4e40:	dc 01       	movw	r26, r24
    4e42:	cb 01       	movw	r24, r22
    4e44:	bc 01       	movw	r22, r24
    4e46:	cd 01       	movw	r24, r26
    4e48:	20 e0       	ldi	r18, 0x00	; 0
    4e4a:	34 e2       	ldi	r19, 0x24	; 36
    4e4c:	44 e7       	ldi	r20, 0x74	; 116
    4e4e:	5d e4       	ldi	r21, 0x4D	; 77
    4e50:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4e54:	dc 01       	movw	r26, r24
    4e56:	cb 01       	movw	r24, r22
    4e58:	bc 01       	movw	r22, r24
    4e5a:	cd 01       	movw	r24, r26
    4e5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	9a 83       	std	Y+2, r25	; 0x02
    4e66:	89 83       	std	Y+1, r24	; 0x01
    4e68:	27 c0       	rjmp	.+78     	; 0x4eb8 <GPT_Delay_us+0x2bc>
		case GPT_PRESCALE_1024: Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (1024.0 * 1000000UL)); break;
    4e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6e:	cc 01       	movw	r24, r24
    4e70:	a0 e0       	ldi	r26, 0x00	; 0
    4e72:	b0 e0       	ldi	r27, 0x00	; 0
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	34 e2       	ldi	r19, 0x24	; 36
    4e78:	44 ef       	ldi	r20, 0xF4	; 244
    4e7a:	50 e0       	ldi	r21, 0x00	; 0
    4e7c:	bc 01       	movw	r22, r24
    4e7e:	cd 01       	movw	r24, r26
    4e80:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    4e84:	dc 01       	movw	r26, r24
    4e86:	cb 01       	movw	r24, r22
    4e88:	bc 01       	movw	r22, r24
    4e8a:	cd 01       	movw	r24, r26
    4e8c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	bc 01       	movw	r22, r24
    4e96:	cd 01       	movw	r24, r26
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	34 e2       	ldi	r19, 0x24	; 36
    4e9c:	44 e7       	ldi	r20, 0x74	; 116
    4e9e:	5e e4       	ldi	r21, 0x4E	; 78
    4ea0:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	bc 01       	movw	r22, r24
    4eaa:	cd 01       	movw	r24, r26
    4eac:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	9a 83       	std	Y+2, r25	; 0x02
    4eb6:	89 83       	std	Y+1, r24	; 0x01
		default:break;
	}
	switch (Config_Ptr->Tmr_Channel) {
    4eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    4eba:	fc 81       	ldd	r31, Y+4	; 0x04
    4ebc:	80 81       	ld	r24, Z
    4ebe:	28 2f       	mov	r18, r24
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	3e 87       	std	Y+14, r19	; 0x0e
    4ec4:	2d 87       	std	Y+13, r18	; 0x0d
    4ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eca:	81 30       	cpi	r24, 0x01	; 1
    4ecc:	91 05       	cpc	r25, r1
    4ece:	09 f4       	brne	.+2      	; 0x4ed2 <GPT_Delay_us+0x2d6>
    4ed0:	6b c0       	rjmp	.+214    	; 0x4fa8 <GPT_Delay_us+0x3ac>
    4ed2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ed4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ed6:	22 30       	cpi	r18, 0x02	; 2
    4ed8:	31 05       	cpc	r19, r1
    4eda:	09 f4       	brne	.+2      	; 0x4ede <GPT_Delay_us+0x2e2>
    4edc:	f3 c0       	rjmp	.+486    	; 0x50c4 <GPT_Delay_us+0x4c8>
    4ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <GPT_Delay_us+0x2ec>
    4ee6:	5b c1       	rjmp	.+694    	; 0x519e <GPT_Delay_us+0x5a2>
		case GPT_TIMER_0:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xFCU);
    4ee8:	a9 e5       	ldi	r26, 0x59	; 89
    4eea:	b0 e0       	ldi	r27, 0x00	; 0
    4eec:	e9 e5       	ldi	r30, 0x59	; 89
    4eee:	f0 e0       	ldi	r31, 0x00	; 0
    4ef0:	80 81       	ld	r24, Z
    4ef2:	8c 7f       	andi	r24, 0xFC	; 252
    4ef4:	8c 93       	st	X, r24
		switch (Config_Ptr->Op_Mode) {
    4ef6:	eb 81       	ldd	r30, Y+3	; 0x03
    4ef8:	fc 81       	ldd	r31, Y+4	; 0x04
    4efa:	81 81       	ldd	r24, Z+1	; 0x01
    4efc:	28 2f       	mov	r18, r24
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	3c 87       	std	Y+12, r19	; 0x0c
    4f02:	2b 87       	std	Y+11, r18	; 0x0b
    4f04:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f06:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f08:	00 97       	sbiw	r24, 0x00	; 0
    4f0a:	71 f1       	breq	.+92     	; 0x4f68 <GPT_Delay_us+0x36c>
    4f0c:	2b 85       	ldd	r18, Y+11	; 0x0b
    4f0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4f10:	21 30       	cpi	r18, 0x01	; 1
    4f12:	31 05       	cpc	r19, r1
    4f14:	09 f0       	breq	.+2      	; 0x4f18 <GPT_Delay_us+0x31c>
    4f16:	43 c1       	rjmp	.+646    	; 0x519e <GPT_Delay_us+0x5a2>
			case GPT_CTC_MODE:
				*TIMER0_CMP_REG = (uint8)Tmr_Counts;
    4f18:	ec e5       	ldi	r30, 0x5C	; 92
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	89 81       	ldd	r24, Y+1	; 0x01
    4f1e:	80 83       	st	Z, r24
				*TIMER0_CNTR_REG = 0x00U;
    4f20:	e2 e5       	ldi	r30, 0x52	; 82
    4f22:	f0 e0       	ldi	r31, 0x00	; 0
    4f24:	10 82       	st	Z, r1
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT) == 0) ;
    4f26:	e8 e5       	ldi	r30, 0x58	; 88
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	80 81       	ld	r24, Z
    4f2c:	86 95       	lsr	r24
    4f2e:	88 2f       	mov	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	81 70       	andi	r24, 0x01	; 1
    4f34:	90 70       	andi	r25, 0x00	; 0
    4f36:	00 97       	sbiw	r24, 0x00	; 0
    4f38:	b1 f3       	breq	.-20     	; 0x4f26 <GPT_Delay_us+0x32a>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT);
    4f3a:	a8 e5       	ldi	r26, 0x58	; 88
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	e8 e5       	ldi	r30, 0x58	; 88
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	82 60       	ori	r24, 0x02	; 2
    4f46:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_CMP_INT_BIT);
    4f48:	a9 e5       	ldi	r26, 0x59	; 89
    4f4a:	b0 e0       	ldi	r27, 0x00	; 0
    4f4c:	e9 e5       	ldi	r30, 0x59	; 89
    4f4e:	f0 e0       	ldi	r31, 0x00	; 0
    4f50:	80 81       	ld	r24, Z
    4f52:	28 2f       	mov	r18, r24
    4f54:	eb 81       	ldd	r30, Y+3	; 0x03
    4f56:	fc 81       	ldd	r31, Y+4	; 0x04
    4f58:	83 81       	ldd	r24, Z+3	; 0x03
    4f5a:	88 2f       	mov	r24, r24
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	88 0f       	add	r24, r24
    4f60:	99 1f       	adc	r25, r25
    4f62:	82 2b       	or	r24, r18
    4f64:	8c 93       	st	X, r24
    4f66:	1b c1       	rjmp	.+566    	; 0x519e <GPT_Delay_us+0x5a2>
				return;
			case GPT_NORMAL_MODE:
				*TIMER0_CNTR_REG = 256-(uint8)(Tmr_Counts);
    4f68:	e2 e5       	ldi	r30, 0x52	; 82
    4f6a:	f0 e0       	ldi	r31, 0x00	; 0
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	81 95       	neg	r24
    4f70:	80 83       	st	Z, r24
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT) == 0) ;
    4f72:	e8 e5       	ldi	r30, 0x58	; 88
    4f74:	f0 e0       	ldi	r31, 0x00	; 0
    4f76:	80 81       	ld	r24, Z
    4f78:	88 2f       	mov	r24, r24
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	81 70       	andi	r24, 0x01	; 1
    4f7e:	90 70       	andi	r25, 0x00	; 0
    4f80:	00 97       	sbiw	r24, 0x00	; 0
    4f82:	b9 f3       	breq	.-18     	; 0x4f72 <GPT_Delay_us+0x376>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT);
    4f84:	a8 e5       	ldi	r26, 0x58	; 88
    4f86:	b0 e0       	ldi	r27, 0x00	; 0
    4f88:	e8 e5       	ldi	r30, 0x58	; 88
    4f8a:	f0 e0       	ldi	r31, 0x00	; 0
    4f8c:	80 81       	ld	r24, Z
    4f8e:	81 60       	ori	r24, 0x01	; 1
    4f90:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_OVF_INT_BIT);
    4f92:	a9 e5       	ldi	r26, 0x59	; 89
    4f94:	b0 e0       	ldi	r27, 0x00	; 0
    4f96:	e9 e5       	ldi	r30, 0x59	; 89
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	90 81       	ld	r25, Z
    4f9c:	eb 81       	ldd	r30, Y+3	; 0x03
    4f9e:	fc 81       	ldd	r31, Y+4	; 0x04
    4fa0:	83 81       	ldd	r24, Z+3	; 0x03
    4fa2:	89 2b       	or	r24, r25
    4fa4:	8c 93       	st	X, r24
    4fa6:	fb c0       	rjmp	.+502    	; 0x519e <GPT_Delay_us+0x5a2>
			default:break;
		}
		break;
		case GPT_TIMER_1:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xC3U);
    4fa8:	a9 e5       	ldi	r26, 0x59	; 89
    4faa:	b0 e0       	ldi	r27, 0x00	; 0
    4fac:	e9 e5       	ldi	r30, 0x59	; 89
    4fae:	f0 e0       	ldi	r31, 0x00	; 0
    4fb0:	80 81       	ld	r24, Z
    4fb2:	83 7c       	andi	r24, 0xC3	; 195
    4fb4:	8c 93       	st	X, r24
		switch (Config_Ptr->Op_Mode) {
    4fb6:	eb 81       	ldd	r30, Y+3	; 0x03
    4fb8:	fc 81       	ldd	r31, Y+4	; 0x04
    4fba:	81 81       	ldd	r24, Z+1	; 0x01
    4fbc:	28 2f       	mov	r18, r24
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	3a 87       	std	Y+10, r19	; 0x0a
    4fc2:	29 87       	std	Y+9, r18	; 0x09
    4fc4:	89 85       	ldd	r24, Y+9	; 0x09
    4fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc8:	00 97       	sbiw	r24, 0x00	; 0
    4fca:	e9 f1       	breq	.+122    	; 0x5046 <GPT_Delay_us+0x44a>
    4fcc:	29 85       	ldd	r18, Y+9	; 0x09
    4fce:	3a 85       	ldd	r19, Y+10	; 0x0a
    4fd0:	21 30       	cpi	r18, 0x01	; 1
    4fd2:	31 05       	cpc	r19, r1
    4fd4:	09 f0       	breq	.+2      	; 0x4fd8 <GPT_Delay_us+0x3dc>
    4fd6:	e3 c0       	rjmp	.+454    	; 0x519e <GPT_Delay_us+0x5a2>
			case GPT_CTC_MODE:
				*TIMER1_CMP_A_REG_L = (uint8)(Tmr_Counts & 0x00FFU);
    4fd8:	ea e4       	ldi	r30, 0x4A	; 74
    4fda:	f0 e0       	ldi	r31, 0x00	; 0
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	80 83       	st	Z, r24
				*TIMER1_CMP_A_REG_H = (uint8)((Tmr_Counts & 0xFF00U)>>8);
    4fe0:	eb e4       	ldi	r30, 0x4B	; 75
    4fe2:	f0 e0       	ldi	r31, 0x00	; 0
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe8:	89 2f       	mov	r24, r25
    4fea:	99 27       	eor	r25, r25
    4fec:	80 83       	st	Z, r24
				*TIMER1_CNTR_REG_L = 0x00U;
    4fee:	ec e4       	ldi	r30, 0x4C	; 76
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	10 82       	st	Z, r1
				*TIMER1_CNTR_REG_H = 0x00U;
    4ff4:	ed e4       	ldi	r30, 0x4D	; 77
    4ff6:	f0 e0       	ldi	r31, 0x00	; 0
    4ff8:	10 82       	st	Z, r1
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT) == 0) ;
    4ffa:	e8 e5       	ldi	r30, 0x58	; 88
    4ffc:	f0 e0       	ldi	r31, 0x00	; 0
    4ffe:	80 81       	ld	r24, Z
    5000:	82 95       	swap	r24
    5002:	8f 70       	andi	r24, 0x0F	; 15
    5004:	88 2f       	mov	r24, r24
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	81 70       	andi	r24, 0x01	; 1
    500a:	90 70       	andi	r25, 0x00	; 0
    500c:	00 97       	sbiw	r24, 0x00	; 0
    500e:	a9 f3       	breq	.-22     	; 0x4ffa <GPT_Delay_us+0x3fe>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT);
    5010:	a8 e5       	ldi	r26, 0x58	; 88
    5012:	b0 e0       	ldi	r27, 0x00	; 0
    5014:	e8 e5       	ldi	r30, 0x58	; 88
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	80 81       	ld	r24, Z
    501a:	80 61       	ori	r24, 0x10	; 16
    501c:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_CMP_A_INT_BIT);
    501e:	a9 e5       	ldi	r26, 0x59	; 89
    5020:	b0 e0       	ldi	r27, 0x00	; 0
    5022:	e9 e5       	ldi	r30, 0x59	; 89
    5024:	f0 e0       	ldi	r31, 0x00	; 0
    5026:	80 81       	ld	r24, Z
    5028:	28 2f       	mov	r18, r24
    502a:	eb 81       	ldd	r30, Y+3	; 0x03
    502c:	fc 81       	ldd	r31, Y+4	; 0x04
    502e:	83 81       	ldd	r24, Z+3	; 0x03
    5030:	88 2f       	mov	r24, r24
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	82 95       	swap	r24
    5036:	92 95       	swap	r25
    5038:	90 7f       	andi	r25, 0xF0	; 240
    503a:	98 27       	eor	r25, r24
    503c:	80 7f       	andi	r24, 0xF0	; 240
    503e:	98 27       	eor	r25, r24
    5040:	82 2b       	or	r24, r18
    5042:	8c 93       	st	X, r24
    5044:	ac c0       	rjmp	.+344    	; 0x519e <GPT_Delay_us+0x5a2>
				return;
			case GPT_NORMAL_MODE:
				*TIMER1_CNTR_REG_L = (uint8)((65535-Tmr_Counts) & 0x00FFU);
    5046:	ec e4       	ldi	r30, 0x4C	; 76
    5048:	f0 e0       	ldi	r31, 0x00	; 0
    504a:	89 81       	ldd	r24, Y+1	; 0x01
    504c:	80 95       	com	r24
    504e:	80 83       	st	Z, r24
				*TIMER1_CNTR_REG_H = (uint8)((65535-Tmr_Counts)>>8);
    5050:	ed e4       	ldi	r30, 0x4D	; 77
    5052:	f0 e0       	ldi	r31, 0x00	; 0
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	9a 81       	ldd	r25, Y+2	; 0x02
    5058:	9c 01       	movw	r18, r24
    505a:	40 e0       	ldi	r20, 0x00	; 0
    505c:	50 e0       	ldi	r21, 0x00	; 0
    505e:	8f ef       	ldi	r24, 0xFF	; 255
    5060:	9f ef       	ldi	r25, 0xFF	; 255
    5062:	a0 e0       	ldi	r26, 0x00	; 0
    5064:	b0 e0       	ldi	r27, 0x00	; 0
    5066:	82 1b       	sub	r24, r18
    5068:	93 0b       	sbc	r25, r19
    506a:	a4 0b       	sbc	r26, r20
    506c:	b5 0b       	sbc	r27, r21
    506e:	89 2f       	mov	r24, r25
    5070:	9a 2f       	mov	r25, r26
    5072:	ab 2f       	mov	r26, r27
    5074:	bb 27       	eor	r27, r27
    5076:	a7 fd       	sbrc	r26, 7
    5078:	ba 95       	dec	r27
    507a:	80 83       	st	Z, r24
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT) == 0) ;
    507c:	e8 e5       	ldi	r30, 0x58	; 88
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	80 81       	ld	r24, Z
    5082:	86 95       	lsr	r24
    5084:	86 95       	lsr	r24
    5086:	88 2f       	mov	r24, r24
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	81 70       	andi	r24, 0x01	; 1
    508c:	90 70       	andi	r25, 0x00	; 0
    508e:	00 97       	sbiw	r24, 0x00	; 0
    5090:	a9 f3       	breq	.-22     	; 0x507c <GPT_Delay_us+0x480>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT);
    5092:	a8 e5       	ldi	r26, 0x58	; 88
    5094:	b0 e0       	ldi	r27, 0x00	; 0
    5096:	e8 e5       	ldi	r30, 0x58	; 88
    5098:	f0 e0       	ldi	r31, 0x00	; 0
    509a:	80 81       	ld	r24, Z
    509c:	84 60       	ori	r24, 0x04	; 4
    509e:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_OVF_INT_BIT);
    50a0:	a9 e5       	ldi	r26, 0x59	; 89
    50a2:	b0 e0       	ldi	r27, 0x00	; 0
    50a4:	e9 e5       	ldi	r30, 0x59	; 89
    50a6:	f0 e0       	ldi	r31, 0x00	; 0
    50a8:	80 81       	ld	r24, Z
    50aa:	28 2f       	mov	r18, r24
    50ac:	eb 81       	ldd	r30, Y+3	; 0x03
    50ae:	fc 81       	ldd	r31, Y+4	; 0x04
    50b0:	83 81       	ldd	r24, Z+3	; 0x03
    50b2:	88 2f       	mov	r24, r24
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	88 0f       	add	r24, r24
    50b8:	99 1f       	adc	r25, r25
    50ba:	88 0f       	add	r24, r24
    50bc:	99 1f       	adc	r25, r25
    50be:	82 2b       	or	r24, r18
    50c0:	8c 93       	st	X, r24
    50c2:	6d c0       	rjmp	.+218    	; 0x519e <GPT_Delay_us+0x5a2>
			default:break;
		}
		break;
		case GPT_TIMER_2:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0x3FU);
    50c4:	a9 e5       	ldi	r26, 0x59	; 89
    50c6:	b0 e0       	ldi	r27, 0x00	; 0
    50c8:	e9 e5       	ldi	r30, 0x59	; 89
    50ca:	f0 e0       	ldi	r31, 0x00	; 0
    50cc:	80 81       	ld	r24, Z
    50ce:	8f 73       	andi	r24, 0x3F	; 63
    50d0:	8c 93       	st	X, r24
		switch (Config_Ptr->Op_Mode) {
    50d2:	eb 81       	ldd	r30, Y+3	; 0x03
    50d4:	fc 81       	ldd	r31, Y+4	; 0x04
    50d6:	81 81       	ldd	r24, Z+1	; 0x01
    50d8:	28 2f       	mov	r18, r24
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	38 87       	std	Y+8, r19	; 0x08
    50de:	2f 83       	std	Y+7, r18	; 0x07
    50e0:	8f 81       	ldd	r24, Y+7	; 0x07
    50e2:	98 85       	ldd	r25, Y+8	; 0x08
    50e4:	00 97       	sbiw	r24, 0x00	; 0
    50e6:	61 f1       	breq	.+88     	; 0x5140 <GPT_Delay_us+0x544>
    50e8:	2f 81       	ldd	r18, Y+7	; 0x07
    50ea:	38 85       	ldd	r19, Y+8	; 0x08
    50ec:	21 30       	cpi	r18, 0x01	; 1
    50ee:	31 05       	cpc	r19, r1
    50f0:	09 f0       	breq	.+2      	; 0x50f4 <GPT_Delay_us+0x4f8>
    50f2:	55 c0       	rjmp	.+170    	; 0x519e <GPT_Delay_us+0x5a2>
			case GPT_CTC_MODE:
				*TIMER2_CMP_REG = (uint8)Tmr_Counts;
    50f4:	e3 e4       	ldi	r30, 0x43	; 67
    50f6:	f0 e0       	ldi	r31, 0x00	; 0
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	80 83       	st	Z, r24
				*TIMER2_CNTR_REG = 0x00U;
    50fc:	e4 e4       	ldi	r30, 0x44	; 68
    50fe:	f0 e0       	ldi	r31, 0x00	; 0
    5100:	10 82       	st	Z, r1
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT) == 0) ;
    5102:	e8 e5       	ldi	r30, 0x58	; 88
    5104:	f0 e0       	ldi	r31, 0x00	; 0
    5106:	80 81       	ld	r24, Z
    5108:	88 23       	and	r24, r24
    510a:	dc f7       	brge	.-10     	; 0x5102 <GPT_Delay_us+0x506>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT);
    510c:	a8 e5       	ldi	r26, 0x58	; 88
    510e:	b0 e0       	ldi	r27, 0x00	; 0
    5110:	e8 e5       	ldi	r30, 0x58	; 88
    5112:	f0 e0       	ldi	r31, 0x00	; 0
    5114:	80 81       	ld	r24, Z
    5116:	80 68       	ori	r24, 0x80	; 128
    5118:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_CMP_INT_BIT);
    511a:	a9 e5       	ldi	r26, 0x59	; 89
    511c:	b0 e0       	ldi	r27, 0x00	; 0
    511e:	e9 e5       	ldi	r30, 0x59	; 89
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	80 81       	ld	r24, Z
    5124:	28 2f       	mov	r18, r24
    5126:	eb 81       	ldd	r30, Y+3	; 0x03
    5128:	fc 81       	ldd	r31, Y+4	; 0x04
    512a:	83 81       	ldd	r24, Z+3	; 0x03
    512c:	88 2f       	mov	r24, r24
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	96 95       	lsr	r25
    5132:	98 2f       	mov	r25, r24
    5134:	88 27       	eor	r24, r24
    5136:	97 95       	ror	r25
    5138:	87 95       	ror	r24
    513a:	82 2b       	or	r24, r18
    513c:	8c 93       	st	X, r24
    513e:	2f c0       	rjmp	.+94     	; 0x519e <GPT_Delay_us+0x5a2>
				return;
			case GPT_NORMAL_MODE:
				*TIMER2_CNTR_REG = 256-(uint8)(Tmr_Counts);
    5140:	e4 e4       	ldi	r30, 0x44	; 68
    5142:	f0 e0       	ldi	r31, 0x00	; 0
    5144:	89 81       	ldd	r24, Y+1	; 0x01
    5146:	81 95       	neg	r24
    5148:	80 83       	st	Z, r24
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT) == 0) ;
    514a:	e8 e5       	ldi	r30, 0x58	; 88
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	80 81       	ld	r24, Z
    5150:	82 95       	swap	r24
    5152:	86 95       	lsr	r24
    5154:	86 95       	lsr	r24
    5156:	83 70       	andi	r24, 0x03	; 3
    5158:	88 2f       	mov	r24, r24
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	81 70       	andi	r24, 0x01	; 1
    515e:	90 70       	andi	r25, 0x00	; 0
    5160:	00 97       	sbiw	r24, 0x00	; 0
    5162:	99 f3       	breq	.-26     	; 0x514a <GPT_Delay_us+0x54e>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT);
    5164:	a8 e5       	ldi	r26, 0x58	; 88
    5166:	b0 e0       	ldi	r27, 0x00	; 0
    5168:	e8 e5       	ldi	r30, 0x58	; 88
    516a:	f0 e0       	ldi	r31, 0x00	; 0
    516c:	80 81       	ld	r24, Z
    516e:	80 64       	ori	r24, 0x40	; 64
    5170:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_OVF_INT_BIT);
    5172:	a9 e5       	ldi	r26, 0x59	; 89
    5174:	b0 e0       	ldi	r27, 0x00	; 0
    5176:	e9 e5       	ldi	r30, 0x59	; 89
    5178:	f0 e0       	ldi	r31, 0x00	; 0
    517a:	80 81       	ld	r24, Z
    517c:	28 2f       	mov	r18, r24
    517e:	eb 81       	ldd	r30, Y+3	; 0x03
    5180:	fc 81       	ldd	r31, Y+4	; 0x04
    5182:	83 81       	ldd	r24, Z+3	; 0x03
    5184:	88 2f       	mov	r24, r24
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	00 24       	eor	r0, r0
    518a:	96 95       	lsr	r25
    518c:	87 95       	ror	r24
    518e:	07 94       	ror	r0
    5190:	96 95       	lsr	r25
    5192:	87 95       	ror	r24
    5194:	07 94       	ror	r0
    5196:	98 2f       	mov	r25, r24
    5198:	80 2d       	mov	r24, r0
    519a:	82 2b       	or	r24, r18
    519c:	8c 93       	st	X, r24
			default:break;
		}
		break;
		default: break;
	}
}
    519e:	60 96       	adiw	r28, 0x10	; 16
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	f8 94       	cli
    51a4:	de bf       	out	0x3e, r29	; 62
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	cf 91       	pop	r28
    51ac:	df 91       	pop	r29
    51ae:	08 95       	ret

000051b0 <GPT_Delay_ms>:

void GPT_Delay_ms(const GPT_ConfigurationType* Config_Ptr, uint16 Delay_Time_ms) {
    51b0:	df 93       	push	r29
    51b2:	cf 93       	push	r28
    51b4:	cd b7       	in	r28, 0x3d	; 61
    51b6:	de b7       	in	r29, 0x3e	; 62
    51b8:	60 97       	sbiw	r28, 0x10	; 16
    51ba:	0f b6       	in	r0, 0x3f	; 63
    51bc:	f8 94       	cli
    51be:	de bf       	out	0x3e, r29	; 62
    51c0:	0f be       	out	0x3f, r0	; 63
    51c2:	cd bf       	out	0x3d, r28	; 61
    51c4:	9c 83       	std	Y+4, r25	; 0x04
    51c6:	8b 83       	std	Y+3, r24	; 0x03
    51c8:	7e 83       	std	Y+6, r23	; 0x06
    51ca:	6d 83       	std	Y+5, r22	; 0x05
	// Delay_Time_ms = 10^3 * Prescale * Num_Counts / F_CPU
	uint16 Tmr_Counts = 0U;
    51cc:	1a 82       	std	Y+2, r1	; 0x02
    51ce:	19 82       	std	Y+1, r1	; 0x01
	switch (Config_Ptr->Clk_Prescale) {
    51d0:	eb 81       	ldd	r30, Y+3	; 0x03
    51d2:	fc 81       	ldd	r31, Y+4	; 0x04
    51d4:	82 81       	ldd	r24, Z+2	; 0x02
    51d6:	28 2f       	mov	r18, r24
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	38 8b       	std	Y+16, r19	; 0x10
    51dc:	2f 87       	std	Y+15, r18	; 0x0f
    51de:	8f 85       	ldd	r24, Y+15	; 0x0f
    51e0:	98 89       	ldd	r25, Y+16	; 0x10
    51e2:	84 30       	cpi	r24, 0x04	; 4
    51e4:	91 05       	cpc	r25, r1
    51e6:	09 f4       	brne	.+2      	; 0x51ea <GPT_Delay_ms+0x3a>
    51e8:	a2 c0       	rjmp	.+324    	; 0x532e <GPT_Delay_ms+0x17e>
    51ea:	2f 85       	ldd	r18, Y+15	; 0x0f
    51ec:	38 89       	ldd	r19, Y+16	; 0x10
    51ee:	25 30       	cpi	r18, 0x05	; 5
    51f0:	31 05       	cpc	r19, r1
    51f2:	94 f4       	brge	.+36     	; 0x5218 <GPT_Delay_ms+0x68>
    51f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    51f6:	98 89       	ldd	r25, Y+16	; 0x10
    51f8:	82 30       	cpi	r24, 0x02	; 2
    51fa:	91 05       	cpc	r25, r1
    51fc:	09 f4       	brne	.+2      	; 0x5200 <GPT_Delay_ms+0x50>
    51fe:	47 c0       	rjmp	.+142    	; 0x528e <GPT_Delay_ms+0xde>
    5200:	2f 85       	ldd	r18, Y+15	; 0x0f
    5202:	38 89       	ldd	r19, Y+16	; 0x10
    5204:	23 30       	cpi	r18, 0x03	; 3
    5206:	31 05       	cpc	r19, r1
    5208:	0c f0       	brlt	.+2      	; 0x520c <GPT_Delay_ms+0x5c>
    520a:	69 c0       	rjmp	.+210    	; 0x52de <GPT_Delay_ms+0x12e>
    520c:	8f 85       	ldd	r24, Y+15	; 0x0f
    520e:	98 89       	ldd	r25, Y+16	; 0x10
    5210:	81 30       	cpi	r24, 0x01	; 1
    5212:	91 05       	cpc	r25, r1
    5214:	a1 f0       	breq	.+40     	; 0x523e <GPT_Delay_ms+0x8e>
    5216:	2a c1       	rjmp	.+596    	; 0x546c <GPT_Delay_ms+0x2bc>
    5218:	2f 85       	ldd	r18, Y+15	; 0x0f
    521a:	38 89       	ldd	r19, Y+16	; 0x10
    521c:	26 30       	cpi	r18, 0x06	; 6
    521e:	31 05       	cpc	r19, r1
    5220:	09 f4       	brne	.+2      	; 0x5224 <GPT_Delay_ms+0x74>
    5222:	d5 c0       	rjmp	.+426    	; 0x53ce <GPT_Delay_ms+0x21e>
    5224:	8f 85       	ldd	r24, Y+15	; 0x0f
    5226:	98 89       	ldd	r25, Y+16	; 0x10
    5228:	86 30       	cpi	r24, 0x06	; 6
    522a:	91 05       	cpc	r25, r1
    522c:	0c f4       	brge	.+2      	; 0x5230 <GPT_Delay_ms+0x80>
    522e:	a7 c0       	rjmp	.+334    	; 0x537e <GPT_Delay_ms+0x1ce>
    5230:	2f 85       	ldd	r18, Y+15	; 0x0f
    5232:	38 89       	ldd	r19, Y+16	; 0x10
    5234:	27 30       	cpi	r18, 0x07	; 7
    5236:	31 05       	cpc	r19, r1
    5238:	09 f4       	brne	.+2      	; 0x523c <GPT_Delay_ms+0x8c>
    523a:	f1 c0       	rjmp	.+482    	; 0x541e <GPT_Delay_ms+0x26e>
    523c:	17 c1       	rjmp	.+558    	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_1:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (1.0 * 1000UL)); break;
    523e:	8d 81       	ldd	r24, Y+5	; 0x05
    5240:	9e 81       	ldd	r25, Y+6	; 0x06
    5242:	cc 01       	movw	r24, r24
    5244:	a0 e0       	ldi	r26, 0x00	; 0
    5246:	b0 e0       	ldi	r27, 0x00	; 0
    5248:	20 e0       	ldi	r18, 0x00	; 0
    524a:	34 e2       	ldi	r19, 0x24	; 36
    524c:	44 ef       	ldi	r20, 0xF4	; 244
    524e:	50 e0       	ldi	r21, 0x00	; 0
    5250:	bc 01       	movw	r22, r24
    5252:	cd 01       	movw	r24, r26
    5254:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	bc 01       	movw	r22, r24
    525e:	cd 01       	movw	r24, r26
    5260:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	bc 01       	movw	r22, r24
    526a:	cd 01       	movw	r24, r26
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	4a e7       	ldi	r20, 0x7A	; 122
    5272:	54 e4       	ldi	r21, 0x44	; 68
    5274:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5278:	dc 01       	movw	r26, r24
    527a:	cb 01       	movw	r24, r22
    527c:	bc 01       	movw	r22, r24
    527e:	cd 01       	movw	r24, r26
    5280:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5284:	dc 01       	movw	r26, r24
    5286:	cb 01       	movw	r24, r22
    5288:	9a 83       	std	Y+2, r25	; 0x02
    528a:	89 83       	std	Y+1, r24	; 0x01
    528c:	ef c0       	rjmp	.+478    	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_8:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (8.0 * 1000UL)); break;
    528e:	8d 81       	ldd	r24, Y+5	; 0x05
    5290:	9e 81       	ldd	r25, Y+6	; 0x06
    5292:	cc 01       	movw	r24, r24
    5294:	a0 e0       	ldi	r26, 0x00	; 0
    5296:	b0 e0       	ldi	r27, 0x00	; 0
    5298:	20 e0       	ldi	r18, 0x00	; 0
    529a:	34 e2       	ldi	r19, 0x24	; 36
    529c:	44 ef       	ldi	r20, 0xF4	; 244
    529e:	50 e0       	ldi	r21, 0x00	; 0
    52a0:	bc 01       	movw	r22, r24
    52a2:	cd 01       	movw	r24, r26
    52a4:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	bc 01       	movw	r22, r24
    52ae:	cd 01       	movw	r24, r26
    52b0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    52b4:	dc 01       	movw	r26, r24
    52b6:	cb 01       	movw	r24, r22
    52b8:	bc 01       	movw	r22, r24
    52ba:	cd 01       	movw	r24, r26
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	4a ef       	ldi	r20, 0xFA	; 250
    52c2:	55 e4       	ldi	r21, 0x45	; 69
    52c4:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    52c8:	dc 01       	movw	r26, r24
    52ca:	cb 01       	movw	r24, r22
    52cc:	bc 01       	movw	r22, r24
    52ce:	cd 01       	movw	r24, r26
    52d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52d4:	dc 01       	movw	r26, r24
    52d6:	cb 01       	movw	r24, r22
    52d8:	9a 83       	std	Y+2, r25	; 0x02
    52da:	89 83       	std	Y+1, r24	; 0x01
    52dc:	c7 c0       	rjmp	.+398    	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_32:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (32.0 * 1000UL)); break;
    52de:	8d 81       	ldd	r24, Y+5	; 0x05
    52e0:	9e 81       	ldd	r25, Y+6	; 0x06
    52e2:	cc 01       	movw	r24, r24
    52e4:	a0 e0       	ldi	r26, 0x00	; 0
    52e6:	b0 e0       	ldi	r27, 0x00	; 0
    52e8:	20 e0       	ldi	r18, 0x00	; 0
    52ea:	34 e2       	ldi	r19, 0x24	; 36
    52ec:	44 ef       	ldi	r20, 0xF4	; 244
    52ee:	50 e0       	ldi	r21, 0x00	; 0
    52f0:	bc 01       	movw	r22, r24
    52f2:	cd 01       	movw	r24, r26
    52f4:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    52f8:	dc 01       	movw	r26, r24
    52fa:	cb 01       	movw	r24, r22
    52fc:	bc 01       	movw	r22, r24
    52fe:	cd 01       	movw	r24, r26
    5300:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	4a ef       	ldi	r20, 0xFA	; 250
    5312:	56 e4       	ldi	r21, 0x46	; 70
    5314:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	bc 01       	movw	r22, r24
    531e:	cd 01       	movw	r24, r26
    5320:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	9a 83       	std	Y+2, r25	; 0x02
    532a:	89 83       	std	Y+1, r24	; 0x01
    532c:	9f c0       	rjmp	.+318    	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_64:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (64.0 * 1000UL)); break;
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	cc 01       	movw	r24, r24
    5334:	a0 e0       	ldi	r26, 0x00	; 0
    5336:	b0 e0       	ldi	r27, 0x00	; 0
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	34 e2       	ldi	r19, 0x24	; 36
    533c:	44 ef       	ldi	r20, 0xF4	; 244
    533e:	50 e0       	ldi	r21, 0x00	; 0
    5340:	bc 01       	movw	r22, r24
    5342:	cd 01       	movw	r24, r26
    5344:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	bc 01       	movw	r22, r24
    534e:	cd 01       	movw	r24, r26
    5350:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    5354:	dc 01       	movw	r26, r24
    5356:	cb 01       	movw	r24, r22
    5358:	bc 01       	movw	r22, r24
    535a:	cd 01       	movw	r24, r26
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	4a e7       	ldi	r20, 0x7A	; 122
    5362:	57 e4       	ldi	r21, 0x47	; 71
    5364:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	bc 01       	movw	r22, r24
    536e:	cd 01       	movw	r24, r26
    5370:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	9a 83       	std	Y+2, r25	; 0x02
    537a:	89 83       	std	Y+1, r24	; 0x01
    537c:	77 c0       	rjmp	.+238    	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_128:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (128.0 * 1000UL)); break;
    537e:	8d 81       	ldd	r24, Y+5	; 0x05
    5380:	9e 81       	ldd	r25, Y+6	; 0x06
    5382:	cc 01       	movw	r24, r24
    5384:	a0 e0       	ldi	r26, 0x00	; 0
    5386:	b0 e0       	ldi	r27, 0x00	; 0
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	34 e2       	ldi	r19, 0x24	; 36
    538c:	44 ef       	ldi	r20, 0xF4	; 244
    538e:	50 e0       	ldi	r21, 0x00	; 0
    5390:	bc 01       	movw	r22, r24
    5392:	cd 01       	movw	r24, r26
    5394:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    5398:	dc 01       	movw	r26, r24
    539a:	cb 01       	movw	r24, r22
    539c:	bc 01       	movw	r22, r24
    539e:	cd 01       	movw	r24, r26
    53a0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    53a4:	dc 01       	movw	r26, r24
    53a6:	cb 01       	movw	r24, r22
    53a8:	bc 01       	movw	r22, r24
    53aa:	cd 01       	movw	r24, r26
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	4a ef       	ldi	r20, 0xFA	; 250
    53b2:	57 e4       	ldi	r21, 0x47	; 71
    53b4:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    53b8:	dc 01       	movw	r26, r24
    53ba:	cb 01       	movw	r24, r22
    53bc:	bc 01       	movw	r22, r24
    53be:	cd 01       	movw	r24, r26
    53c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53c4:	dc 01       	movw	r26, r24
    53c6:	cb 01       	movw	r24, r22
    53c8:	9a 83       	std	Y+2, r25	; 0x02
    53ca:	89 83       	std	Y+1, r24	; 0x01
    53cc:	4f c0       	rjmp	.+158    	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_256:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (256.0 * 1000UL)); break;
    53ce:	8d 81       	ldd	r24, Y+5	; 0x05
    53d0:	9e 81       	ldd	r25, Y+6	; 0x06
    53d2:	cc 01       	movw	r24, r24
    53d4:	a0 e0       	ldi	r26, 0x00	; 0
    53d6:	b0 e0       	ldi	r27, 0x00	; 0
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	34 e2       	ldi	r19, 0x24	; 36
    53dc:	44 ef       	ldi	r20, 0xF4	; 244
    53de:	50 e0       	ldi	r21, 0x00	; 0
    53e0:	bc 01       	movw	r22, r24
    53e2:	cd 01       	movw	r24, r26
    53e4:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	bc 01       	movw	r22, r24
    53ee:	cd 01       	movw	r24, r26
    53f0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    53f4:	dc 01       	movw	r26, r24
    53f6:	cb 01       	movw	r24, r22
    53f8:	bc 01       	movw	r22, r24
    53fa:	cd 01       	movw	r24, r26
    53fc:	20 e0       	ldi	r18, 0x00	; 0
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	4a e7       	ldi	r20, 0x7A	; 122
    5402:	58 e4       	ldi	r21, 0x48	; 72
    5404:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5408:	dc 01       	movw	r26, r24
    540a:	cb 01       	movw	r24, r22
    540c:	bc 01       	movw	r22, r24
    540e:	cd 01       	movw	r24, r26
    5410:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	9a 83       	std	Y+2, r25	; 0x02
    541a:	89 83       	std	Y+1, r24	; 0x01
    541c:	27 c0       	rjmp	.+78     	; 0x546c <GPT_Delay_ms+0x2bc>
		case GPT_PRESCALE_1024: Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (1024.0 * 1000UL)); break;
    541e:	8d 81       	ldd	r24, Y+5	; 0x05
    5420:	9e 81       	ldd	r25, Y+6	; 0x06
    5422:	cc 01       	movw	r24, r24
    5424:	a0 e0       	ldi	r26, 0x00	; 0
    5426:	b0 e0       	ldi	r27, 0x00	; 0
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	34 e2       	ldi	r19, 0x24	; 36
    542c:	44 ef       	ldi	r20, 0xF4	; 244
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	bc 01       	movw	r22, r24
    5432:	cd 01       	movw	r24, r26
    5434:	0e 94 67 38 	call	0x70ce	; 0x70ce <__mulsi3>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	bc 01       	movw	r22, r24
    543e:	cd 01       	movw	r24, r26
    5440:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    5444:	dc 01       	movw	r26, r24
    5446:	cb 01       	movw	r24, r22
    5448:	bc 01       	movw	r22, r24
    544a:	cd 01       	movw	r24, r26
    544c:	20 e0       	ldi	r18, 0x00	; 0
    544e:	30 e0       	ldi	r19, 0x00	; 0
    5450:	4a e7       	ldi	r20, 0x7A	; 122
    5452:	59 e4       	ldi	r21, 0x49	; 73
    5454:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	bc 01       	movw	r22, r24
    545e:	cd 01       	movw	r24, r26
    5460:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	9a 83       	std	Y+2, r25	; 0x02
    546a:	89 83       	std	Y+1, r24	; 0x01
		default:break;
	}
	switch (Config_Ptr->Tmr_Channel) {
    546c:	eb 81       	ldd	r30, Y+3	; 0x03
    546e:	fc 81       	ldd	r31, Y+4	; 0x04
    5470:	80 81       	ld	r24, Z
    5472:	28 2f       	mov	r18, r24
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	3e 87       	std	Y+14, r19	; 0x0e
    5478:	2d 87       	std	Y+13, r18	; 0x0d
    547a:	8d 85       	ldd	r24, Y+13	; 0x0d
    547c:	9e 85       	ldd	r25, Y+14	; 0x0e
    547e:	81 30       	cpi	r24, 0x01	; 1
    5480:	91 05       	cpc	r25, r1
    5482:	09 f4       	brne	.+2      	; 0x5486 <GPT_Delay_ms+0x2d6>
    5484:	6b c0       	rjmp	.+214    	; 0x555c <GPT_Delay_ms+0x3ac>
    5486:	2d 85       	ldd	r18, Y+13	; 0x0d
    5488:	3e 85       	ldd	r19, Y+14	; 0x0e
    548a:	22 30       	cpi	r18, 0x02	; 2
    548c:	31 05       	cpc	r19, r1
    548e:	09 f4       	brne	.+2      	; 0x5492 <GPT_Delay_ms+0x2e2>
    5490:	e6 c0       	rjmp	.+460    	; 0x565e <GPT_Delay_ms+0x4ae>
    5492:	8d 85       	ldd	r24, Y+13	; 0x0d
    5494:	9e 85       	ldd	r25, Y+14	; 0x0e
    5496:	00 97       	sbiw	r24, 0x00	; 0
    5498:	09 f0       	breq	.+2      	; 0x549c <GPT_Delay_ms+0x2ec>
    549a:	4e c1       	rjmp	.+668    	; 0x5738 <GPT_Delay_ms+0x588>
		case GPT_TIMER_0:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xFCU);
    549c:	a9 e5       	ldi	r26, 0x59	; 89
    549e:	b0 e0       	ldi	r27, 0x00	; 0
    54a0:	e9 e5       	ldi	r30, 0x59	; 89
    54a2:	f0 e0       	ldi	r31, 0x00	; 0
    54a4:	80 81       	ld	r24, Z
    54a6:	8c 7f       	andi	r24, 0xFC	; 252
    54a8:	8c 93       	st	X, r24
		switch (Config_Ptr->Op_Mode) {
    54aa:	eb 81       	ldd	r30, Y+3	; 0x03
    54ac:	fc 81       	ldd	r31, Y+4	; 0x04
    54ae:	81 81       	ldd	r24, Z+1	; 0x01
    54b0:	28 2f       	mov	r18, r24
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	3c 87       	std	Y+12, r19	; 0x0c
    54b6:	2b 87       	std	Y+11, r18	; 0x0b
    54b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    54ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    54bc:	00 97       	sbiw	r24, 0x00	; 0
    54be:	71 f1       	breq	.+92     	; 0x551c <GPT_Delay_ms+0x36c>
    54c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    54c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    54c4:	21 30       	cpi	r18, 0x01	; 1
    54c6:	31 05       	cpc	r19, r1
    54c8:	09 f0       	breq	.+2      	; 0x54cc <GPT_Delay_ms+0x31c>
    54ca:	36 c1       	rjmp	.+620    	; 0x5738 <GPT_Delay_ms+0x588>
			case GPT_CTC_MODE:
				*TIMER0_CMP_REG = (uint8)Tmr_Counts;
    54cc:	ec e5       	ldi	r30, 0x5C	; 92
    54ce:	f0 e0       	ldi	r31, 0x00	; 0
    54d0:	89 81       	ldd	r24, Y+1	; 0x01
    54d2:	80 83       	st	Z, r24
				*TIMER0_CNTR_REG = 0x00U;
    54d4:	e2 e5       	ldi	r30, 0x52	; 82
    54d6:	f0 e0       	ldi	r31, 0x00	; 0
    54d8:	10 82       	st	Z, r1
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT) == 0) ;
    54da:	e8 e5       	ldi	r30, 0x58	; 88
    54dc:	f0 e0       	ldi	r31, 0x00	; 0
    54de:	80 81       	ld	r24, Z
    54e0:	86 95       	lsr	r24
    54e2:	88 2f       	mov	r24, r24
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	81 70       	andi	r24, 0x01	; 1
    54e8:	90 70       	andi	r25, 0x00	; 0
    54ea:	00 97       	sbiw	r24, 0x00	; 0
    54ec:	b1 f3       	breq	.-20     	; 0x54da <GPT_Delay_ms+0x32a>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT);
    54ee:	a8 e5       	ldi	r26, 0x58	; 88
    54f0:	b0 e0       	ldi	r27, 0x00	; 0
    54f2:	e8 e5       	ldi	r30, 0x58	; 88
    54f4:	f0 e0       	ldi	r31, 0x00	; 0
    54f6:	80 81       	ld	r24, Z
    54f8:	82 60       	ori	r24, 0x02	; 2
    54fa:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_CMP_INT_BIT);
    54fc:	a9 e5       	ldi	r26, 0x59	; 89
    54fe:	b0 e0       	ldi	r27, 0x00	; 0
    5500:	e9 e5       	ldi	r30, 0x59	; 89
    5502:	f0 e0       	ldi	r31, 0x00	; 0
    5504:	80 81       	ld	r24, Z
    5506:	28 2f       	mov	r18, r24
    5508:	eb 81       	ldd	r30, Y+3	; 0x03
    550a:	fc 81       	ldd	r31, Y+4	; 0x04
    550c:	83 81       	ldd	r24, Z+3	; 0x03
    550e:	88 2f       	mov	r24, r24
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	88 0f       	add	r24, r24
    5514:	99 1f       	adc	r25, r25
    5516:	82 2b       	or	r24, r18
    5518:	8c 93       	st	X, r24
    551a:	0e c1       	rjmp	.+540    	; 0x5738 <GPT_Delay_ms+0x588>
				return;
			case GPT_NORMAL_MODE:
				*TIMER0_CNTR_REG = 256U-(uint8)(Tmr_Counts);
    551c:	e2 e5       	ldi	r30, 0x52	; 82
    551e:	f0 e0       	ldi	r31, 0x00	; 0
    5520:	89 81       	ldd	r24, Y+1	; 0x01
    5522:	81 95       	neg	r24
    5524:	80 83       	st	Z, r24
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT) == 0) ;
    5526:	e8 e5       	ldi	r30, 0x58	; 88
    5528:	f0 e0       	ldi	r31, 0x00	; 0
    552a:	80 81       	ld	r24, Z
    552c:	88 2f       	mov	r24, r24
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	81 70       	andi	r24, 0x01	; 1
    5532:	90 70       	andi	r25, 0x00	; 0
    5534:	00 97       	sbiw	r24, 0x00	; 0
    5536:	b9 f3       	breq	.-18     	; 0x5526 <GPT_Delay_ms+0x376>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT);
    5538:	a8 e5       	ldi	r26, 0x58	; 88
    553a:	b0 e0       	ldi	r27, 0x00	; 0
    553c:	e8 e5       	ldi	r30, 0x58	; 88
    553e:	f0 e0       	ldi	r31, 0x00	; 0
    5540:	80 81       	ld	r24, Z
    5542:	81 60       	ori	r24, 0x01	; 1
    5544:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_OVF_INT_BIT);
    5546:	a9 e5       	ldi	r26, 0x59	; 89
    5548:	b0 e0       	ldi	r27, 0x00	; 0
    554a:	e9 e5       	ldi	r30, 0x59	; 89
    554c:	f0 e0       	ldi	r31, 0x00	; 0
    554e:	90 81       	ld	r25, Z
    5550:	eb 81       	ldd	r30, Y+3	; 0x03
    5552:	fc 81       	ldd	r31, Y+4	; 0x04
    5554:	83 81       	ldd	r24, Z+3	; 0x03
    5556:	89 2b       	or	r24, r25
    5558:	8c 93       	st	X, r24
    555a:	ee c0       	rjmp	.+476    	; 0x5738 <GPT_Delay_ms+0x588>
			default:break;
		}
		break;
		case GPT_TIMER_1:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xC3U);
    555c:	a9 e5       	ldi	r26, 0x59	; 89
    555e:	b0 e0       	ldi	r27, 0x00	; 0
    5560:	e9 e5       	ldi	r30, 0x59	; 89
    5562:	f0 e0       	ldi	r31, 0x00	; 0
    5564:	80 81       	ld	r24, Z
    5566:	83 7c       	andi	r24, 0xC3	; 195
    5568:	8c 93       	st	X, r24
		switch (Config_Ptr->Op_Mode) {
    556a:	eb 81       	ldd	r30, Y+3	; 0x03
    556c:	fc 81       	ldd	r31, Y+4	; 0x04
    556e:	81 81       	ldd	r24, Z+1	; 0x01
    5570:	28 2f       	mov	r18, r24
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	3a 87       	std	Y+10, r19	; 0x0a
    5576:	29 87       	std	Y+9, r18	; 0x09
    5578:	89 85       	ldd	r24, Y+9	; 0x09
    557a:	9a 85       	ldd	r25, Y+10	; 0x0a
    557c:	00 97       	sbiw	r24, 0x00	; 0
    557e:	e9 f1       	breq	.+122    	; 0x55fa <GPT_Delay_ms+0x44a>
    5580:	29 85       	ldd	r18, Y+9	; 0x09
    5582:	3a 85       	ldd	r19, Y+10	; 0x0a
    5584:	21 30       	cpi	r18, 0x01	; 1
    5586:	31 05       	cpc	r19, r1
    5588:	09 f0       	breq	.+2      	; 0x558c <GPT_Delay_ms+0x3dc>
    558a:	d6 c0       	rjmp	.+428    	; 0x5738 <GPT_Delay_ms+0x588>
			case GPT_CTC_MODE:
				*TIMER1_CMP_A_REG_H = (uint8)(Tmr_Counts>>8U);
    558c:	eb e4       	ldi	r30, 0x4B	; 75
    558e:	f0 e0       	ldi	r31, 0x00	; 0
    5590:	89 81       	ldd	r24, Y+1	; 0x01
    5592:	9a 81       	ldd	r25, Y+2	; 0x02
    5594:	89 2f       	mov	r24, r25
    5596:	99 27       	eor	r25, r25
    5598:	80 83       	st	Z, r24
				*TIMER1_CMP_A_REG_L = (uint8)(Tmr_Counts & 0x00FFU);
    559a:	ea e4       	ldi	r30, 0x4A	; 74
    559c:	f0 e0       	ldi	r31, 0x00	; 0
    559e:	89 81       	ldd	r24, Y+1	; 0x01
    55a0:	80 83       	st	Z, r24
				*TIMER1_CNTR_REG_H = 0x00U;
    55a2:	ed e4       	ldi	r30, 0x4D	; 77
    55a4:	f0 e0       	ldi	r31, 0x00	; 0
    55a6:	10 82       	st	Z, r1
				*TIMER1_CNTR_REG_L = 0x00U;
    55a8:	ec e4       	ldi	r30, 0x4C	; 76
    55aa:	f0 e0       	ldi	r31, 0x00	; 0
    55ac:	10 82       	st	Z, r1
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT) == 0) ;
    55ae:	e8 e5       	ldi	r30, 0x58	; 88
    55b0:	f0 e0       	ldi	r31, 0x00	; 0
    55b2:	80 81       	ld	r24, Z
    55b4:	82 95       	swap	r24
    55b6:	8f 70       	andi	r24, 0x0F	; 15
    55b8:	88 2f       	mov	r24, r24
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	81 70       	andi	r24, 0x01	; 1
    55be:	90 70       	andi	r25, 0x00	; 0
    55c0:	00 97       	sbiw	r24, 0x00	; 0
    55c2:	a9 f3       	breq	.-22     	; 0x55ae <GPT_Delay_ms+0x3fe>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT);
    55c4:	a8 e5       	ldi	r26, 0x58	; 88
    55c6:	b0 e0       	ldi	r27, 0x00	; 0
    55c8:	e8 e5       	ldi	r30, 0x58	; 88
    55ca:	f0 e0       	ldi	r31, 0x00	; 0
    55cc:	80 81       	ld	r24, Z
    55ce:	80 61       	ori	r24, 0x10	; 16
    55d0:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_CMP_A_INT_BIT);
    55d2:	a9 e5       	ldi	r26, 0x59	; 89
    55d4:	b0 e0       	ldi	r27, 0x00	; 0
    55d6:	e9 e5       	ldi	r30, 0x59	; 89
    55d8:	f0 e0       	ldi	r31, 0x00	; 0
    55da:	80 81       	ld	r24, Z
    55dc:	28 2f       	mov	r18, r24
    55de:	eb 81       	ldd	r30, Y+3	; 0x03
    55e0:	fc 81       	ldd	r31, Y+4	; 0x04
    55e2:	83 81       	ldd	r24, Z+3	; 0x03
    55e4:	88 2f       	mov	r24, r24
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	82 95       	swap	r24
    55ea:	92 95       	swap	r25
    55ec:	90 7f       	andi	r25, 0xF0	; 240
    55ee:	98 27       	eor	r25, r24
    55f0:	80 7f       	andi	r24, 0xF0	; 240
    55f2:	98 27       	eor	r25, r24
    55f4:	82 2b       	or	r24, r18
    55f6:	8c 93       	st	X, r24
    55f8:	9f c0       	rjmp	.+318    	; 0x5738 <GPT_Delay_ms+0x588>
				return;
			case GPT_NORMAL_MODE:
				*TIMER1_CNTR_REG_L = (uint8)((65535U-Tmr_Counts) & 0x00FFU);
    55fa:	ec e4       	ldi	r30, 0x4C	; 76
    55fc:	f0 e0       	ldi	r31, 0x00	; 0
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
    5600:	80 95       	com	r24
    5602:	80 83       	st	Z, r24
				*TIMER1_CNTR_REG_H = (uint8)((65535U-Tmr_Counts)>>8U);
    5604:	ed e4       	ldi	r30, 0x4D	; 77
    5606:	f0 e0       	ldi	r31, 0x00	; 0
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	80 95       	com	r24
    560e:	90 95       	com	r25
    5610:	89 2f       	mov	r24, r25
    5612:	99 27       	eor	r25, r25
    5614:	80 83       	st	Z, r24
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT) == 0) ;
    5616:	e8 e5       	ldi	r30, 0x58	; 88
    5618:	f0 e0       	ldi	r31, 0x00	; 0
    561a:	80 81       	ld	r24, Z
    561c:	86 95       	lsr	r24
    561e:	86 95       	lsr	r24
    5620:	88 2f       	mov	r24, r24
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	81 70       	andi	r24, 0x01	; 1
    5626:	90 70       	andi	r25, 0x00	; 0
    5628:	00 97       	sbiw	r24, 0x00	; 0
    562a:	a9 f3       	breq	.-22     	; 0x5616 <GPT_Delay_ms+0x466>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT);
    562c:	a8 e5       	ldi	r26, 0x58	; 88
    562e:	b0 e0       	ldi	r27, 0x00	; 0
    5630:	e8 e5       	ldi	r30, 0x58	; 88
    5632:	f0 e0       	ldi	r31, 0x00	; 0
    5634:	80 81       	ld	r24, Z
    5636:	84 60       	ori	r24, 0x04	; 4
    5638:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_OVF_INT_BIT);
    563a:	a9 e5       	ldi	r26, 0x59	; 89
    563c:	b0 e0       	ldi	r27, 0x00	; 0
    563e:	e9 e5       	ldi	r30, 0x59	; 89
    5640:	f0 e0       	ldi	r31, 0x00	; 0
    5642:	80 81       	ld	r24, Z
    5644:	28 2f       	mov	r18, r24
    5646:	eb 81       	ldd	r30, Y+3	; 0x03
    5648:	fc 81       	ldd	r31, Y+4	; 0x04
    564a:	83 81       	ldd	r24, Z+3	; 0x03
    564c:	88 2f       	mov	r24, r24
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	88 0f       	add	r24, r24
    5652:	99 1f       	adc	r25, r25
    5654:	88 0f       	add	r24, r24
    5656:	99 1f       	adc	r25, r25
    5658:	82 2b       	or	r24, r18
    565a:	8c 93       	st	X, r24
    565c:	6d c0       	rjmp	.+218    	; 0x5738 <GPT_Delay_ms+0x588>
			default:break;
		}
		break;
		case GPT_TIMER_2:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0x3FU);
    565e:	a9 e5       	ldi	r26, 0x59	; 89
    5660:	b0 e0       	ldi	r27, 0x00	; 0
    5662:	e9 e5       	ldi	r30, 0x59	; 89
    5664:	f0 e0       	ldi	r31, 0x00	; 0
    5666:	80 81       	ld	r24, Z
    5668:	8f 73       	andi	r24, 0x3F	; 63
    566a:	8c 93       	st	X, r24
		switch (Config_Ptr->Op_Mode) {
    566c:	eb 81       	ldd	r30, Y+3	; 0x03
    566e:	fc 81       	ldd	r31, Y+4	; 0x04
    5670:	81 81       	ldd	r24, Z+1	; 0x01
    5672:	28 2f       	mov	r18, r24
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	38 87       	std	Y+8, r19	; 0x08
    5678:	2f 83       	std	Y+7, r18	; 0x07
    567a:	8f 81       	ldd	r24, Y+7	; 0x07
    567c:	98 85       	ldd	r25, Y+8	; 0x08
    567e:	00 97       	sbiw	r24, 0x00	; 0
    5680:	61 f1       	breq	.+88     	; 0x56da <GPT_Delay_ms+0x52a>
    5682:	2f 81       	ldd	r18, Y+7	; 0x07
    5684:	38 85       	ldd	r19, Y+8	; 0x08
    5686:	21 30       	cpi	r18, 0x01	; 1
    5688:	31 05       	cpc	r19, r1
    568a:	09 f0       	breq	.+2      	; 0x568e <GPT_Delay_ms+0x4de>
    568c:	55 c0       	rjmp	.+170    	; 0x5738 <GPT_Delay_ms+0x588>
			case GPT_CTC_MODE:
				*TIMER2_CMP_REG = (uint8)Tmr_Counts;
    568e:	e3 e4       	ldi	r30, 0x43	; 67
    5690:	f0 e0       	ldi	r31, 0x00	; 0
    5692:	89 81       	ldd	r24, Y+1	; 0x01
    5694:	80 83       	st	Z, r24
				*TIMER2_CNTR_REG = 0x00U;
    5696:	e4 e4       	ldi	r30, 0x44	; 68
    5698:	f0 e0       	ldi	r31, 0x00	; 0
    569a:	10 82       	st	Z, r1
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT) == 0) ;
    569c:	e8 e5       	ldi	r30, 0x58	; 88
    569e:	f0 e0       	ldi	r31, 0x00	; 0
    56a0:	80 81       	ld	r24, Z
    56a2:	88 23       	and	r24, r24
    56a4:	dc f7       	brge	.-10     	; 0x569c <GPT_Delay_ms+0x4ec>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT);
    56a6:	a8 e5       	ldi	r26, 0x58	; 88
    56a8:	b0 e0       	ldi	r27, 0x00	; 0
    56aa:	e8 e5       	ldi	r30, 0x58	; 88
    56ac:	f0 e0       	ldi	r31, 0x00	; 0
    56ae:	80 81       	ld	r24, Z
    56b0:	80 68       	ori	r24, 0x80	; 128
    56b2:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_CMP_INT_BIT);
    56b4:	a9 e5       	ldi	r26, 0x59	; 89
    56b6:	b0 e0       	ldi	r27, 0x00	; 0
    56b8:	e9 e5       	ldi	r30, 0x59	; 89
    56ba:	f0 e0       	ldi	r31, 0x00	; 0
    56bc:	80 81       	ld	r24, Z
    56be:	28 2f       	mov	r18, r24
    56c0:	eb 81       	ldd	r30, Y+3	; 0x03
    56c2:	fc 81       	ldd	r31, Y+4	; 0x04
    56c4:	83 81       	ldd	r24, Z+3	; 0x03
    56c6:	88 2f       	mov	r24, r24
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	96 95       	lsr	r25
    56cc:	98 2f       	mov	r25, r24
    56ce:	88 27       	eor	r24, r24
    56d0:	97 95       	ror	r25
    56d2:	87 95       	ror	r24
    56d4:	82 2b       	or	r24, r18
    56d6:	8c 93       	st	X, r24
    56d8:	2f c0       	rjmp	.+94     	; 0x5738 <GPT_Delay_ms+0x588>
				return;
			case GPT_NORMAL_MODE:
				*TIMER2_CNTR_REG = 256U-(uint8)(Tmr_Counts);
    56da:	e4 e4       	ldi	r30, 0x44	; 68
    56dc:	f0 e0       	ldi	r31, 0x00	; 0
    56de:	89 81       	ldd	r24, Y+1	; 0x01
    56e0:	81 95       	neg	r24
    56e2:	80 83       	st	Z, r24
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT) == 0) ;
    56e4:	e8 e5       	ldi	r30, 0x58	; 88
    56e6:	f0 e0       	ldi	r31, 0x00	; 0
    56e8:	80 81       	ld	r24, Z
    56ea:	82 95       	swap	r24
    56ec:	86 95       	lsr	r24
    56ee:	86 95       	lsr	r24
    56f0:	83 70       	andi	r24, 0x03	; 3
    56f2:	88 2f       	mov	r24, r24
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	81 70       	andi	r24, 0x01	; 1
    56f8:	90 70       	andi	r25, 0x00	; 0
    56fa:	00 97       	sbiw	r24, 0x00	; 0
    56fc:	99 f3       	breq	.-26     	; 0x56e4 <GPT_Delay_ms+0x534>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT);
    56fe:	a8 e5       	ldi	r26, 0x58	; 88
    5700:	b0 e0       	ldi	r27, 0x00	; 0
    5702:	e8 e5       	ldi	r30, 0x58	; 88
    5704:	f0 e0       	ldi	r31, 0x00	; 0
    5706:	80 81       	ld	r24, Z
    5708:	80 64       	ori	r24, 0x40	; 64
    570a:	8c 93       	st	X, r24
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_OVF_INT_BIT);
    570c:	a9 e5       	ldi	r26, 0x59	; 89
    570e:	b0 e0       	ldi	r27, 0x00	; 0
    5710:	e9 e5       	ldi	r30, 0x59	; 89
    5712:	f0 e0       	ldi	r31, 0x00	; 0
    5714:	80 81       	ld	r24, Z
    5716:	28 2f       	mov	r18, r24
    5718:	eb 81       	ldd	r30, Y+3	; 0x03
    571a:	fc 81       	ldd	r31, Y+4	; 0x04
    571c:	83 81       	ldd	r24, Z+3	; 0x03
    571e:	88 2f       	mov	r24, r24
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	00 24       	eor	r0, r0
    5724:	96 95       	lsr	r25
    5726:	87 95       	ror	r24
    5728:	07 94       	ror	r0
    572a:	96 95       	lsr	r25
    572c:	87 95       	ror	r24
    572e:	07 94       	ror	r0
    5730:	98 2f       	mov	r25, r24
    5732:	80 2d       	mov	r24, r0
    5734:	82 2b       	or	r24, r18
    5736:	8c 93       	st	X, r24
			default:break;
		}
		break;
		default: break;
	}
}
    5738:	60 96       	adiw	r28, 0x10	; 16
    573a:	0f b6       	in	r0, 0x3f	; 63
    573c:	f8 94       	cli
    573e:	de bf       	out	0x3e, r29	; 62
    5740:	0f be       	out	0x3f, r0	; 63
    5742:	cd bf       	out	0x3d, r28	; 61
    5744:	cf 91       	pop	r28
    5746:	df 91       	pop	r29
    5748:	08 95       	ret

0000574a <GPT_GetTimerStatus>:

GPT_StatusType GPT_GetTimerStatus(const GPT_ConfigurationType* Config_Ptr) {
    574a:	df 93       	push	r29
    574c:	cf 93       	push	r28
    574e:	cd b7       	in	r28, 0x3d	; 61
    5750:	de b7       	in	r29, 0x3e	; 62
    5752:	2b 97       	sbiw	r28, 0x0b	; 11
    5754:	0f b6       	in	r0, 0x3f	; 63
    5756:	f8 94       	cli
    5758:	de bf       	out	0x3e, r29	; 62
    575a:	0f be       	out	0x3f, r0	; 63
    575c:	cd bf       	out	0x3d, r28	; 61
    575e:	9a 83       	std	Y+2, r25	; 0x02
    5760:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Tmr_Channel) {
    5762:	e9 81       	ldd	r30, Y+1	; 0x01
    5764:	fa 81       	ldd	r31, Y+2	; 0x02
    5766:	80 81       	ld	r24, Z
    5768:	28 2f       	mov	r18, r24
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	3b 87       	std	Y+11, r19	; 0x0b
    576e:	2a 87       	std	Y+10, r18	; 0x0a
    5770:	8a 85       	ldd	r24, Y+10	; 0x0a
    5772:	9b 85       	ldd	r25, Y+11	; 0x0b
    5774:	81 30       	cpi	r24, 0x01	; 1
    5776:	91 05       	cpc	r25, r1
    5778:	59 f1       	breq	.+86     	; 0x57d0 <GPT_GetTimerStatus+0x86>
    577a:	2a 85       	ldd	r18, Y+10	; 0x0a
    577c:	3b 85       	ldd	r19, Y+11	; 0x0b
    577e:	22 30       	cpi	r18, 0x02	; 2
    5780:	31 05       	cpc	r19, r1
    5782:	09 f4       	brne	.+2      	; 0x5786 <GPT_GetTimerStatus+0x3c>
    5784:	48 c0       	rjmp	.+144    	; 0x5816 <GPT_GetTimerStatus+0xcc>
    5786:	8a 85       	ldd	r24, Y+10	; 0x0a
    5788:	9b 85       	ldd	r25, Y+11	; 0x0b
    578a:	00 97       	sbiw	r24, 0x00	; 0
    578c:	09 f0       	breq	.+2      	; 0x5790 <GPT_GetTimerStatus+0x46>
    578e:	68 c0       	rjmp	.+208    	; 0x5860 <GPT_GetTimerStatus+0x116>
		case GPT_TIMER_0:
			switch (Config_Ptr->Op_Mode) {
    5790:	e9 81       	ldd	r30, Y+1	; 0x01
    5792:	fa 81       	ldd	r31, Y+2	; 0x02
    5794:	81 81       	ldd	r24, Z+1	; 0x01
    5796:	28 2f       	mov	r18, r24
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	39 87       	std	Y+9, r19	; 0x09
    579c:	28 87       	std	Y+8, r18	; 0x08
    579e:	88 85       	ldd	r24, Y+8	; 0x08
    57a0:	99 85       	ldd	r25, Y+9	; 0x09
    57a2:	00 97       	sbiw	r24, 0x00	; 0
    57a4:	31 f0       	breq	.+12     	; 0x57b2 <GPT_GetTimerStatus+0x68>
    57a6:	28 85       	ldd	r18, Y+8	; 0x08
    57a8:	39 85       	ldd	r19, Y+9	; 0x09
    57aa:	21 30       	cpi	r18, 0x01	; 1
    57ac:	31 05       	cpc	r19, r1
    57ae:	41 f0       	breq	.+16     	; 0x57c0 <GPT_GetTimerStatus+0x76>
    57b0:	0f c0       	rjmp	.+30     	; 0x57d0 <GPT_GetTimerStatus+0x86>
				case GPT_NORMAL_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT);
    57b2:	e8 e5       	ldi	r30, 0x58	; 88
    57b4:	f0 e0       	ldi	r31, 0x00	; 0
    57b6:	80 81       	ld	r24, Z
    57b8:	38 2f       	mov	r19, r24
    57ba:	31 70       	andi	r19, 0x01	; 1
    57bc:	3f 83       	std	Y+7, r19	; 0x07
    57be:	52 c0       	rjmp	.+164    	; 0x5864 <GPT_GetTimerStatus+0x11a>
				case GPT_CTC_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT);
    57c0:	e8 e5       	ldi	r30, 0x58	; 88
    57c2:	f0 e0       	ldi	r31, 0x00	; 0
    57c4:	80 81       	ld	r24, Z
    57c6:	86 95       	lsr	r24
    57c8:	98 2f       	mov	r25, r24
    57ca:	91 70       	andi	r25, 0x01	; 1
    57cc:	9f 83       	std	Y+7, r25	; 0x07
    57ce:	4a c0       	rjmp	.+148    	; 0x5864 <GPT_GetTimerStatus+0x11a>
				default: break;
			}
		case GPT_TIMER_1:
			switch (Config_Ptr->Op_Mode) {
    57d0:	e9 81       	ldd	r30, Y+1	; 0x01
    57d2:	fa 81       	ldd	r31, Y+2	; 0x02
    57d4:	81 81       	ldd	r24, Z+1	; 0x01
    57d6:	28 2f       	mov	r18, r24
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	3e 83       	std	Y+6, r19	; 0x06
    57dc:	2d 83       	std	Y+5, r18	; 0x05
    57de:	8d 81       	ldd	r24, Y+5	; 0x05
    57e0:	9e 81       	ldd	r25, Y+6	; 0x06
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	31 f0       	breq	.+12     	; 0x57f2 <GPT_GetTimerStatus+0xa8>
    57e6:	2d 81       	ldd	r18, Y+5	; 0x05
    57e8:	3e 81       	ldd	r19, Y+6	; 0x06
    57ea:	21 30       	cpi	r18, 0x01	; 1
    57ec:	31 05       	cpc	r19, r1
    57ee:	51 f0       	breq	.+20     	; 0x5804 <GPT_GetTimerStatus+0xba>
    57f0:	12 c0       	rjmp	.+36     	; 0x5816 <GPT_GetTimerStatus+0xcc>
				case GPT_NORMAL_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT);
    57f2:	e8 e5       	ldi	r30, 0x58	; 88
    57f4:	f0 e0       	ldi	r31, 0x00	; 0
    57f6:	80 81       	ld	r24, Z
    57f8:	86 95       	lsr	r24
    57fa:	86 95       	lsr	r24
    57fc:	38 2f       	mov	r19, r24
    57fe:	31 70       	andi	r19, 0x01	; 1
    5800:	3f 83       	std	Y+7, r19	; 0x07
    5802:	30 c0       	rjmp	.+96     	; 0x5864 <GPT_GetTimerStatus+0x11a>
				case GPT_CTC_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT);
    5804:	e8 e5       	ldi	r30, 0x58	; 88
    5806:	f0 e0       	ldi	r31, 0x00	; 0
    5808:	80 81       	ld	r24, Z
    580a:	82 95       	swap	r24
    580c:	8f 70       	andi	r24, 0x0F	; 15
    580e:	98 2f       	mov	r25, r24
    5810:	91 70       	andi	r25, 0x01	; 1
    5812:	9f 83       	std	Y+7, r25	; 0x07
    5814:	27 c0       	rjmp	.+78     	; 0x5864 <GPT_GetTimerStatus+0x11a>
				default: break;
			}
		case GPT_TIMER_2:
			switch (Config_Ptr->Op_Mode) {
    5816:	e9 81       	ldd	r30, Y+1	; 0x01
    5818:	fa 81       	ldd	r31, Y+2	; 0x02
    581a:	81 81       	ldd	r24, Z+1	; 0x01
    581c:	28 2f       	mov	r18, r24
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	3c 83       	std	Y+4, r19	; 0x04
    5822:	2b 83       	std	Y+3, r18	; 0x03
    5824:	8b 81       	ldd	r24, Y+3	; 0x03
    5826:	9c 81       	ldd	r25, Y+4	; 0x04
    5828:	00 97       	sbiw	r24, 0x00	; 0
    582a:	31 f0       	breq	.+12     	; 0x5838 <GPT_GetTimerStatus+0xee>
    582c:	2b 81       	ldd	r18, Y+3	; 0x03
    582e:	3c 81       	ldd	r19, Y+4	; 0x04
    5830:	21 30       	cpi	r18, 0x01	; 1
    5832:	31 05       	cpc	r19, r1
    5834:	61 f0       	breq	.+24     	; 0x584e <GPT_GetTimerStatus+0x104>
    5836:	14 c0       	rjmp	.+40     	; 0x5860 <GPT_GetTimerStatus+0x116>
				case GPT_NORMAL_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT);
    5838:	e8 e5       	ldi	r30, 0x58	; 88
    583a:	f0 e0       	ldi	r31, 0x00	; 0
    583c:	80 81       	ld	r24, Z
    583e:	82 95       	swap	r24
    5840:	86 95       	lsr	r24
    5842:	86 95       	lsr	r24
    5844:	83 70       	andi	r24, 0x03	; 3
    5846:	38 2f       	mov	r19, r24
    5848:	31 70       	andi	r19, 0x01	; 1
    584a:	3f 83       	std	Y+7, r19	; 0x07
    584c:	0b c0       	rjmp	.+22     	; 0x5864 <GPT_GetTimerStatus+0x11a>
				case GPT_CTC_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT);
    584e:	e8 e5       	ldi	r30, 0x58	; 88
    5850:	f0 e0       	ldi	r31, 0x00	; 0
    5852:	80 81       	ld	r24, Z
    5854:	98 2f       	mov	r25, r24
    5856:	99 1f       	adc	r25, r25
    5858:	99 27       	eor	r25, r25
    585a:	99 1f       	adc	r25, r25
    585c:	9f 83       	std	Y+7, r25	; 0x07
    585e:	02 c0       	rjmp	.+4      	; 0x5864 <GPT_GetTimerStatus+0x11a>
				default: break;
			}
		default: break;
	}
	return GPT_TIMER_FINISHED;
    5860:	21 e0       	ldi	r18, 0x01	; 1
    5862:	2f 83       	std	Y+7, r18	; 0x07
    5864:	8f 81       	ldd	r24, Y+7	; 0x07
}
    5866:	2b 96       	adiw	r28, 0x0b	; 11
    5868:	0f b6       	in	r0, 0x3f	; 63
    586a:	f8 94       	cli
    586c:	de bf       	out	0x3e, r29	; 62
    586e:	0f be       	out	0x3f, r0	; 63
    5870:	cd bf       	out	0x3d, r28	; 61
    5872:	cf 91       	pop	r28
    5874:	df 91       	pop	r29
    5876:	08 95       	ret

00005878 <GLCD_Init>:

uint8 gu8_Curr_X_Address = 0;
uint8 gu8_Curr_Y_Address = 0;
uint8 gu8_Curr_Page = 0;

void GLCD_Init(void) {
    5878:	df 93       	push	r29
    587a:	cf 93       	push	r28
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Init(gaStrGPT_Config);
	#endif
	/* Initialize Port Directions */
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_OUTPUT);
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	60 e0       	ldi	r22, 0x00	; 0
    5884:	41 e0       	ldi	r20, 0x01	; 1
    5886:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_OUTPUT);
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	62 e0       	ldi	r22, 0x02	; 2
    588e:	41 e0       	ldi	r20, 0x01	; 1
    5890:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_OUTPUT);
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	61 e0       	ldi	r22, 0x01	; 1
    5898:	41 e0       	ldi	r20, 0x01	; 1
    589a:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_OUTPUT);
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	66 e0       	ldi	r22, 0x06	; 6
    58a2:	41 e0       	ldi	r20, 0x01	; 1
    58a4:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_OUTPUT);
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	64 e0       	ldi	r22, 0x04	; 4
    58ac:	41 e0       	ldi	r20, 0x01	; 1
    58ae:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_OUTPUT);
    58b2:	81 e0       	ldi	r24, 0x01	; 1
    58b4:	65 e0       	ldi	r22, 0x05	; 5
    58b6:	41 e0       	ldi	r20, 0x01	; 1
    58b8:	0e 94 75 35 	call	0x6aea	; 0x6aea <DIO_SetPinDirection>

	DIO_SetPortDirection(GLCD_DATA_PORT, DIO_OUTPUT);
    58bc:	80 e0       	ldi	r24, 0x00	; 0
    58be:	61 e0       	ldi	r22, 0x01	; 1
    58c0:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <DIO_SetPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	66 e0       	ldi	r22, 0x06	; 6
    58c8:	41 e0       	ldi	r20, 0x01	; 1
    58ca:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_PAGES);
    58ce:	83 e0       	ldi	r24, 0x03	; 3
    58d0:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
    58d4:	8e e3       	ldi	r24, 0x3E	; 62
    58d6:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
    58da:	88 eb       	ldi	r24, 0xB8	; 184
    58dc:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
	gu8_Curr_X_Address = 0;
    58e0:	10 92 f8 01 	sts	0x01F8, r1
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
    58e4:	80 e4       	ldi	r24, 0x40	; 64
    58e6:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
	gu8_Curr_Y_Address = 0;
    58ea:	10 92 f9 01 	sts	0x01F9, r1
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
    58ee:	80 ec       	ldi	r24, 0xC0	; 192
    58f0:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
    58f4:	8f e3       	ldi	r24, 0x3F	; 63
    58f6:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
	gu8_Curr_Page = 0;
    5900:	10 92 fa 01 	sts	0x01FA, r1
}
    5904:	cf 91       	pop	r28
    5906:	df 91       	pop	r29
    5908:	08 95       	ret

0000590a <GLCD_SelectPage>:

void GLCD_SelectPage(GLCD_PageSelectType Page) {
    590a:	df 93       	push	r29
    590c:	cf 93       	push	r28
    590e:	00 d0       	rcall	.+0      	; 0x5910 <GLCD_SelectPage+0x6>
    5910:	0f 92       	push	r0
    5912:	cd b7       	in	r28, 0x3d	; 61
    5914:	de b7       	in	r29, 0x3e	; 62
    5916:	89 83       	std	Y+1, r24	; 0x01
	switch (Page) {
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	28 2f       	mov	r18, r24
    591c:	30 e0       	ldi	r19, 0x00	; 0
    591e:	3b 83       	std	Y+3, r19	; 0x03
    5920:	2a 83       	std	Y+2, r18	; 0x02
    5922:	8a 81       	ldd	r24, Y+2	; 0x02
    5924:	9b 81       	ldd	r25, Y+3	; 0x03
    5926:	81 30       	cpi	r24, 0x01	; 1
    5928:	91 05       	cpc	r25, r1
    592a:	01 f1       	breq	.+64     	; 0x596c <GLCD_SelectPage+0x62>
    592c:	2a 81       	ldd	r18, Y+2	; 0x02
    592e:	3b 81       	ldd	r19, Y+3	; 0x03
    5930:	22 30       	cpi	r18, 0x02	; 2
    5932:	31 05       	cpc	r19, r1
    5934:	2c f4       	brge	.+10     	; 0x5940 <GLCD_SelectPage+0x36>
    5936:	8a 81       	ldd	r24, Y+2	; 0x02
    5938:	9b 81       	ldd	r25, Y+3	; 0x03
    593a:	00 97       	sbiw	r24, 0x00	; 0
    593c:	61 f0       	breq	.+24     	; 0x5956 <GLCD_SelectPage+0x4c>
    593e:	36 c0       	rjmp	.+108    	; 0x59ac <GLCD_SelectPage+0xa2>
    5940:	2a 81       	ldd	r18, Y+2	; 0x02
    5942:	3b 81       	ldd	r19, Y+3	; 0x03
    5944:	22 30       	cpi	r18, 0x02	; 2
    5946:	31 05       	cpc	r19, r1
    5948:	e1 f0       	breq	.+56     	; 0x5982 <GLCD_SelectPage+0x78>
    594a:	8a 81       	ldd	r24, Y+2	; 0x02
    594c:	9b 81       	ldd	r25, Y+3	; 0x03
    594e:	83 30       	cpi	r24, 0x03	; 3
    5950:	91 05       	cpc	r25, r1
    5952:	11 f1       	breq	.+68     	; 0x5998 <GLCD_SelectPage+0x8e>
    5954:	2b c0       	rjmp	.+86     	; 0x59ac <GLCD_SelectPage+0xa2>
		case GLCD_NO_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
    5956:	81 e0       	ldi	r24, 0x01	; 1
    5958:	64 e0       	ldi	r22, 0x04	; 4
    595a:	40 e0       	ldi	r20, 0x00	; 0
    595c:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
    5960:	81 e0       	ldi	r24, 0x01	; 1
    5962:	65 e0       	ldi	r22, 0x05	; 5
    5964:	40 e0       	ldi	r20, 0x00	; 0
    5966:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    596a:	20 c0       	rjmp	.+64     	; 0x59ac <GLCD_SelectPage+0xa2>
			break;
		case GLCD_PAGE_0:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	64 e0       	ldi	r22, 0x04	; 4
    5970:	41 e0       	ldi	r20, 0x01	; 1
    5972:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
    5976:	81 e0       	ldi	r24, 0x01	; 1
    5978:	65 e0       	ldi	r22, 0x05	; 5
    597a:	40 e0       	ldi	r20, 0x00	; 0
    597c:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    5980:	15 c0       	rjmp	.+42     	; 0x59ac <GLCD_SelectPage+0xa2>
			break;
		case GLCD_PAGE_1:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	64 e0       	ldi	r22, 0x04	; 4
    5986:	40 e0       	ldi	r20, 0x00	; 0
    5988:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	65 e0       	ldi	r22, 0x05	; 5
    5990:	41 e0       	ldi	r20, 0x01	; 1
    5992:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    5996:	0a c0       	rjmp	.+20     	; 0x59ac <GLCD_SelectPage+0xa2>
			break;
		case GLCD_BOTH_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	64 e0       	ldi	r22, 0x04	; 4
    599c:	41 e0       	ldi	r20, 0x01	; 1
    599e:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	65 e0       	ldi	r22, 0x05	; 5
    59a6:	41 e0       	ldi	r20, 0x01	; 1
    59a8:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
			break;
		default: break;
	}
}
    59ac:	0f 90       	pop	r0
    59ae:	0f 90       	pop	r0
    59b0:	0f 90       	pop	r0
    59b2:	cf 91       	pop	r28
    59b4:	df 91       	pop	r29
    59b6:	08 95       	ret

000059b8 <GLCD_SendInstruction>:

void GLCD_SendInstruction(GLCD_CommandType Instruction) {
    59b8:	df 93       	push	r29
    59ba:	cf 93       	push	r28
    59bc:	cd b7       	in	r28, 0x3d	; 61
    59be:	de b7       	in	r29, 0x3e	; 62
    59c0:	69 97       	sbiw	r28, 0x19	; 25
    59c2:	0f b6       	in	r0, 0x3f	; 63
    59c4:	f8 94       	cli
    59c6:	de bf       	out	0x3e, r29	; 62
    59c8:	0f be       	out	0x3f, r0	; 63
    59ca:	cd bf       	out	0x3d, r28	; 61
    59cc:	89 8f       	std	Y+25, r24	; 0x19
	/* Select Instruction Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
    59ce:	81 e0       	ldi	r24, 0x01	; 1
    59d0:	62 e0       	ldi	r22, 0x02	; 2
    59d2:	40 e0       	ldi	r20, 0x00	; 0
    59d4:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
    59d8:	81 e0       	ldi	r24, 0x01	; 1
    59da:	61 e0       	ldi	r22, 0x01	; 1
    59dc:	40 e0       	ldi	r20, 0x00	; 0
    59de:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Instruction);
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	69 8d       	ldd	r22, Y+25	; 0x19
    59e6:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
    59ea:	81 e0       	ldi	r24, 0x01	; 1
    59ec:	60 e0       	ldi	r22, 0x00	; 0
    59ee:	41 e0       	ldi	r20, 0x01	; 1
    59f0:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    59f4:	80 e0       	ldi	r24, 0x00	; 0
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	a0 ea       	ldi	r26, 0xA0	; 160
    59fa:	b0 e4       	ldi	r27, 0x40	; 64
    59fc:	8d 8b       	std	Y+21, r24	; 0x15
    59fe:	9e 8b       	std	Y+22, r25	; 0x16
    5a00:	af 8b       	std	Y+23, r26	; 0x17
    5a02:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5a04:	6d 89       	ldd	r22, Y+21	; 0x15
    5a06:	7e 89       	ldd	r23, Y+22	; 0x16
    5a08:	8f 89       	ldd	r24, Y+23	; 0x17
    5a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a0c:	2b ea       	ldi	r18, 0xAB	; 171
    5a0e:	3a ea       	ldi	r19, 0xAA	; 170
    5a10:	4a ea       	ldi	r20, 0xAA	; 170
    5a12:	50 e4       	ldi	r21, 0x40	; 64
    5a14:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5a18:	dc 01       	movw	r26, r24
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	89 8b       	std	Y+17, r24	; 0x11
    5a1e:	9a 8b       	std	Y+18, r25	; 0x12
    5a20:	ab 8b       	std	Y+19, r26	; 0x13
    5a22:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5a24:	69 89       	ldd	r22, Y+17	; 0x11
    5a26:	7a 89       	ldd	r23, Y+18	; 0x12
    5a28:	8b 89       	ldd	r24, Y+19	; 0x13
    5a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a2c:	20 e0       	ldi	r18, 0x00	; 0
    5a2e:	30 e0       	ldi	r19, 0x00	; 0
    5a30:	40 e8       	ldi	r20, 0x80	; 128
    5a32:	5f e3       	ldi	r21, 0x3F	; 63
    5a34:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    5a38:	88 23       	and	r24, r24
    5a3a:	1c f4       	brge	.+6      	; 0x5a42 <GLCD_SendInstruction+0x8a>
		__ticks = 1;
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	88 8b       	std	Y+16, r24	; 0x10
    5a40:	91 c0       	rjmp	.+290    	; 0x5b64 <GLCD_SendInstruction+0x1ac>
	else if (__tmp > 255)
    5a42:	69 89       	ldd	r22, Y+17	; 0x11
    5a44:	7a 89       	ldd	r23, Y+18	; 0x12
    5a46:	8b 89       	ldd	r24, Y+19	; 0x13
    5a48:	9c 89       	ldd	r25, Y+20	; 0x14
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	4f e7       	ldi	r20, 0x7F	; 127
    5a50:	53 e4       	ldi	r21, 0x43	; 67
    5a52:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    5a56:	18 16       	cp	r1, r24
    5a58:	0c f0       	brlt	.+2      	; 0x5a5c <GLCD_SendInstruction+0xa4>
    5a5a:	7b c0       	rjmp	.+246    	; 0x5b52 <GLCD_SendInstruction+0x19a>
	{
		_delay_ms(__us / 1000.0);
    5a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    5a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    5a60:	8f 89       	ldd	r24, Y+23	; 0x17
    5a62:	98 8d       	ldd	r25, Y+24	; 0x18
    5a64:	20 e0       	ldi	r18, 0x00	; 0
    5a66:	30 e0       	ldi	r19, 0x00	; 0
    5a68:	4a e7       	ldi	r20, 0x7A	; 122
    5a6a:	54 e4       	ldi	r21, 0x44	; 68
    5a6c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5a70:	dc 01       	movw	r26, r24
    5a72:	cb 01       	movw	r24, r22
    5a74:	8c 87       	std	Y+12, r24	; 0x0c
    5a76:	9d 87       	std	Y+13, r25	; 0x0d
    5a78:	ae 87       	std	Y+14, r26	; 0x0e
    5a7a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a80:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a82:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	4a e7       	ldi	r20, 0x7A	; 122
    5a8a:	55 e4       	ldi	r21, 0x45	; 69
    5a8c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	88 87       	std	Y+8, r24	; 0x08
    5a96:	99 87       	std	Y+9, r25	; 0x09
    5a98:	aa 87       	std	Y+10, r26	; 0x0a
    5a9a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5a9c:	68 85       	ldd	r22, Y+8	; 0x08
    5a9e:	79 85       	ldd	r23, Y+9	; 0x09
    5aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5aa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
    5aa8:	40 e8       	ldi	r20, 0x80	; 128
    5aaa:	5f e3       	ldi	r21, 0x3F	; 63
    5aac:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    5ab0:	88 23       	and	r24, r24
    5ab2:	2c f4       	brge	.+10     	; 0x5abe <GLCD_SendInstruction+0x106>
		__ticks = 1;
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	9f 83       	std	Y+7, r25	; 0x07
    5aba:	8e 83       	std	Y+6, r24	; 0x06
    5abc:	3f c0       	rjmp	.+126    	; 0x5b3c <GLCD_SendInstruction+0x184>
	else if (__tmp > 65535)
    5abe:	68 85       	ldd	r22, Y+8	; 0x08
    5ac0:	79 85       	ldd	r23, Y+9	; 0x09
    5ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ac4:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	3f ef       	ldi	r19, 0xFF	; 255
    5aca:	4f e7       	ldi	r20, 0x7F	; 127
    5acc:	57 e4       	ldi	r21, 0x47	; 71
    5ace:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    5ad2:	18 16       	cp	r1, r24
    5ad4:	4c f5       	brge	.+82     	; 0x5b28 <GLCD_SendInstruction+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ad6:	6c 85       	ldd	r22, Y+12	; 0x0c
    5ad8:	7d 85       	ldd	r23, Y+13	; 0x0d
    5ada:	8e 85       	ldd	r24, Y+14	; 0x0e
    5adc:	9f 85       	ldd	r25, Y+15	; 0x0f
    5ade:	20 e0       	ldi	r18, 0x00	; 0
    5ae0:	30 e0       	ldi	r19, 0x00	; 0
    5ae2:	40 e2       	ldi	r20, 0x20	; 32
    5ae4:	51 e4       	ldi	r21, 0x41	; 65
    5ae6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5aea:	dc 01       	movw	r26, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	bc 01       	movw	r22, r24
    5af0:	cd 01       	movw	r24, r26
    5af2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22
    5afa:	9f 83       	std	Y+7, r25	; 0x07
    5afc:	8e 83       	std	Y+6, r24	; 0x06
    5afe:	0f c0       	rjmp	.+30     	; 0x5b1e <GLCD_SendInstruction+0x166>
    5b00:	80 e9       	ldi	r24, 0x90	; 144
    5b02:	91 e0       	ldi	r25, 0x01	; 1
    5b04:	9d 83       	std	Y+5, r25	; 0x05
    5b06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b08:	8c 81       	ldd	r24, Y+4	; 0x04
    5b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b0c:	01 97       	sbiw	r24, 0x01	; 1
    5b0e:	f1 f7       	brne	.-4      	; 0x5b0c <GLCD_SendInstruction+0x154>
    5b10:	9d 83       	std	Y+5, r25	; 0x05
    5b12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b14:	8e 81       	ldd	r24, Y+6	; 0x06
    5b16:	9f 81       	ldd	r25, Y+7	; 0x07
    5b18:	01 97       	sbiw	r24, 0x01	; 1
    5b1a:	9f 83       	std	Y+7, r25	; 0x07
    5b1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    5b20:	9f 81       	ldd	r25, Y+7	; 0x07
    5b22:	00 97       	sbiw	r24, 0x00	; 0
    5b24:	69 f7       	brne	.-38     	; 0x5b00 <GLCD_SendInstruction+0x148>
    5b26:	24 c0       	rjmp	.+72     	; 0x5b70 <GLCD_SendInstruction+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b28:	68 85       	ldd	r22, Y+8	; 0x08
    5b2a:	79 85       	ldd	r23, Y+9	; 0x09
    5b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b30:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b34:	dc 01       	movw	r26, r24
    5b36:	cb 01       	movw	r24, r22
    5b38:	9f 83       	std	Y+7, r25	; 0x07
    5b3a:	8e 83       	std	Y+6, r24	; 0x06
    5b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    5b40:	9b 83       	std	Y+3, r25	; 0x03
    5b42:	8a 83       	std	Y+2, r24	; 0x02
    5b44:	8a 81       	ldd	r24, Y+2	; 0x02
    5b46:	9b 81       	ldd	r25, Y+3	; 0x03
    5b48:	01 97       	sbiw	r24, 0x01	; 1
    5b4a:	f1 f7       	brne	.-4      	; 0x5b48 <GLCD_SendInstruction+0x190>
    5b4c:	9b 83       	std	Y+3, r25	; 0x03
    5b4e:	8a 83       	std	Y+2, r24	; 0x02
    5b50:	0f c0       	rjmp	.+30     	; 0x5b70 <GLCD_SendInstruction+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5b52:	69 89       	ldd	r22, Y+17	; 0x11
    5b54:	7a 89       	ldd	r23, Y+18	; 0x12
    5b56:	8b 89       	ldd	r24, Y+19	; 0x13
    5b58:	9c 89       	ldd	r25, Y+20	; 0x14
    5b5a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b5e:	dc 01       	movw	r26, r24
    5b60:	cb 01       	movw	r24, r22
    5b62:	88 8b       	std	Y+16, r24	; 0x10
    5b64:	88 89       	ldd	r24, Y+16	; 0x10
    5b66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5b68:	89 81       	ldd	r24, Y+1	; 0x01
    5b6a:	8a 95       	dec	r24
    5b6c:	f1 f7       	brne	.-4      	; 0x5b6a <GLCD_SendInstruction+0x1b2>
    5b6e:	89 83       	std	Y+1, r24	; 0x01
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	60 e0       	ldi	r22, 0x00	; 0
    5b74:	40 e0       	ldi	r20, 0x00	; 0
    5b76:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
}
    5b7a:	69 96       	adiw	r28, 0x19	; 25
    5b7c:	0f b6       	in	r0, 0x3f	; 63
    5b7e:	f8 94       	cli
    5b80:	de bf       	out	0x3e, r29	; 62
    5b82:	0f be       	out	0x3f, r0	; 63
    5b84:	cd bf       	out	0x3d, r28	; 61
    5b86:	cf 91       	pop	r28
    5b88:	df 91       	pop	r29
    5b8a:	08 95       	ret

00005b8c <GLCD_SendData>:

void GLCD_SendData(uint8 Data) {
    5b8c:	df 93       	push	r29
    5b8e:	cf 93       	push	r28
    5b90:	cd b7       	in	r28, 0x3d	; 61
    5b92:	de b7       	in	r29, 0x3e	; 62
    5b94:	69 97       	sbiw	r28, 0x19	; 25
    5b96:	0f b6       	in	r0, 0x3f	; 63
    5b98:	f8 94       	cli
    5b9a:	de bf       	out	0x3e, r29	; 62
    5b9c:	0f be       	out	0x3f, r0	; 63
    5b9e:	cd bf       	out	0x3d, r28	; 61
    5ba0:	89 8f       	std	Y+25, r24	; 0x19
	/* Select Data Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
    5ba2:	81 e0       	ldi	r24, 0x01	; 1
    5ba4:	62 e0       	ldi	r22, 0x02	; 2
    5ba6:	41 e0       	ldi	r20, 0x01	; 1
    5ba8:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	61 e0       	ldi	r22, 0x01	; 1
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Data);
    5bb6:	80 e0       	ldi	r24, 0x00	; 0
    5bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    5bba:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
    5bbe:	81 e0       	ldi	r24, 0x01	; 1
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	41 e0       	ldi	r20, 0x01	; 1
    5bc4:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    5bc8:	80 e0       	ldi	r24, 0x00	; 0
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	a0 ea       	ldi	r26, 0xA0	; 160
    5bce:	b0 e4       	ldi	r27, 0x40	; 64
    5bd0:	8d 8b       	std	Y+21, r24	; 0x15
    5bd2:	9e 8b       	std	Y+22, r25	; 0x16
    5bd4:	af 8b       	std	Y+23, r26	; 0x17
    5bd6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    5bda:	7e 89       	ldd	r23, Y+22	; 0x16
    5bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    5bde:	98 8d       	ldd	r25, Y+24	; 0x18
    5be0:	2b ea       	ldi	r18, 0xAB	; 171
    5be2:	3a ea       	ldi	r19, 0xAA	; 170
    5be4:	4a ea       	ldi	r20, 0xAA	; 170
    5be6:	50 e4       	ldi	r21, 0x40	; 64
    5be8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5bec:	dc 01       	movw	r26, r24
    5bee:	cb 01       	movw	r24, r22
    5bf0:	89 8b       	std	Y+17, r24	; 0x11
    5bf2:	9a 8b       	std	Y+18, r25	; 0x12
    5bf4:	ab 8b       	std	Y+19, r26	; 0x13
    5bf6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5bf8:	69 89       	ldd	r22, Y+17	; 0x11
    5bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    5bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    5bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    5c00:	20 e0       	ldi	r18, 0x00	; 0
    5c02:	30 e0       	ldi	r19, 0x00	; 0
    5c04:	40 e8       	ldi	r20, 0x80	; 128
    5c06:	5f e3       	ldi	r21, 0x3F	; 63
    5c08:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    5c0c:	88 23       	and	r24, r24
    5c0e:	1c f4       	brge	.+6      	; 0x5c16 <GLCD_SendData+0x8a>
		__ticks = 1;
    5c10:	81 e0       	ldi	r24, 0x01	; 1
    5c12:	88 8b       	std	Y+16, r24	; 0x10
    5c14:	91 c0       	rjmp	.+290    	; 0x5d38 <GLCD_SendData+0x1ac>
	else if (__tmp > 255)
    5c16:	69 89       	ldd	r22, Y+17	; 0x11
    5c18:	7a 89       	ldd	r23, Y+18	; 0x12
    5c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c1e:	20 e0       	ldi	r18, 0x00	; 0
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	4f e7       	ldi	r20, 0x7F	; 127
    5c24:	53 e4       	ldi	r21, 0x43	; 67
    5c26:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    5c2a:	18 16       	cp	r1, r24
    5c2c:	0c f0       	brlt	.+2      	; 0x5c30 <GLCD_SendData+0xa4>
    5c2e:	7b c0       	rjmp	.+246    	; 0x5d26 <GLCD_SendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    5c30:	6d 89       	ldd	r22, Y+21	; 0x15
    5c32:	7e 89       	ldd	r23, Y+22	; 0x16
    5c34:	8f 89       	ldd	r24, Y+23	; 0x17
    5c36:	98 8d       	ldd	r25, Y+24	; 0x18
    5c38:	20 e0       	ldi	r18, 0x00	; 0
    5c3a:	30 e0       	ldi	r19, 0x00	; 0
    5c3c:	4a e7       	ldi	r20, 0x7A	; 122
    5c3e:	54 e4       	ldi	r21, 0x44	; 68
    5c40:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5c44:	dc 01       	movw	r26, r24
    5c46:	cb 01       	movw	r24, r22
    5c48:	8c 87       	std	Y+12, r24	; 0x0c
    5c4a:	9d 87       	std	Y+13, r25	; 0x0d
    5c4c:	ae 87       	std	Y+14, r26	; 0x0e
    5c4e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c50:	6c 85       	ldd	r22, Y+12	; 0x0c
    5c52:	7d 85       	ldd	r23, Y+13	; 0x0d
    5c54:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c56:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c58:	20 e0       	ldi	r18, 0x00	; 0
    5c5a:	30 e0       	ldi	r19, 0x00	; 0
    5c5c:	4a e7       	ldi	r20, 0x7A	; 122
    5c5e:	55 e4       	ldi	r21, 0x45	; 69
    5c60:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5c64:	dc 01       	movw	r26, r24
    5c66:	cb 01       	movw	r24, r22
    5c68:	88 87       	std	Y+8, r24	; 0x08
    5c6a:	99 87       	std	Y+9, r25	; 0x09
    5c6c:	aa 87       	std	Y+10, r26	; 0x0a
    5c6e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5c70:	68 85       	ldd	r22, Y+8	; 0x08
    5c72:	79 85       	ldd	r23, Y+9	; 0x09
    5c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c76:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	40 e8       	ldi	r20, 0x80	; 128
    5c7e:	5f e3       	ldi	r21, 0x3F	; 63
    5c80:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    5c84:	88 23       	and	r24, r24
    5c86:	2c f4       	brge	.+10     	; 0x5c92 <GLCD_SendData+0x106>
		__ticks = 1;
    5c88:	81 e0       	ldi	r24, 0x01	; 1
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	9f 83       	std	Y+7, r25	; 0x07
    5c8e:	8e 83       	std	Y+6, r24	; 0x06
    5c90:	3f c0       	rjmp	.+126    	; 0x5d10 <GLCD_SendData+0x184>
	else if (__tmp > 65535)
    5c92:	68 85       	ldd	r22, Y+8	; 0x08
    5c94:	79 85       	ldd	r23, Y+9	; 0x09
    5c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c98:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c9a:	20 e0       	ldi	r18, 0x00	; 0
    5c9c:	3f ef       	ldi	r19, 0xFF	; 255
    5c9e:	4f e7       	ldi	r20, 0x7F	; 127
    5ca0:	57 e4       	ldi	r21, 0x47	; 71
    5ca2:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    5ca6:	18 16       	cp	r1, r24
    5ca8:	4c f5       	brge	.+82     	; 0x5cfc <GLCD_SendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5caa:	6c 85       	ldd	r22, Y+12	; 0x0c
    5cac:	7d 85       	ldd	r23, Y+13	; 0x0d
    5cae:	8e 85       	ldd	r24, Y+14	; 0x0e
    5cb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	40 e2       	ldi	r20, 0x20	; 32
    5cb8:	51 e4       	ldi	r21, 0x41	; 65
    5cba:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	bc 01       	movw	r22, r24
    5cc4:	cd 01       	movw	r24, r26
    5cc6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	cb 01       	movw	r24, r22
    5cce:	9f 83       	std	Y+7, r25	; 0x07
    5cd0:	8e 83       	std	Y+6, r24	; 0x06
    5cd2:	0f c0       	rjmp	.+30     	; 0x5cf2 <GLCD_SendData+0x166>
    5cd4:	80 e9       	ldi	r24, 0x90	; 144
    5cd6:	91 e0       	ldi	r25, 0x01	; 1
    5cd8:	9d 83       	std	Y+5, r25	; 0x05
    5cda:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    5cde:	9d 81       	ldd	r25, Y+5	; 0x05
    5ce0:	01 97       	sbiw	r24, 0x01	; 1
    5ce2:	f1 f7       	brne	.-4      	; 0x5ce0 <GLCD_SendData+0x154>
    5ce4:	9d 83       	std	Y+5, r25	; 0x05
    5ce6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    5cea:	9f 81       	ldd	r25, Y+7	; 0x07
    5cec:	01 97       	sbiw	r24, 0x01	; 1
    5cee:	9f 83       	std	Y+7, r25	; 0x07
    5cf0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    5cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    5cf6:	00 97       	sbiw	r24, 0x00	; 0
    5cf8:	69 f7       	brne	.-38     	; 0x5cd4 <GLCD_SendData+0x148>
    5cfa:	24 c0       	rjmp	.+72     	; 0x5d44 <GLCD_SendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cfc:	68 85       	ldd	r22, Y+8	; 0x08
    5cfe:	79 85       	ldd	r23, Y+9	; 0x09
    5d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d04:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d08:	dc 01       	movw	r26, r24
    5d0a:	cb 01       	movw	r24, r22
    5d0c:	9f 83       	std	Y+7, r25	; 0x07
    5d0e:	8e 83       	std	Y+6, r24	; 0x06
    5d10:	8e 81       	ldd	r24, Y+6	; 0x06
    5d12:	9f 81       	ldd	r25, Y+7	; 0x07
    5d14:	9b 83       	std	Y+3, r25	; 0x03
    5d16:	8a 83       	std	Y+2, r24	; 0x02
    5d18:	8a 81       	ldd	r24, Y+2	; 0x02
    5d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5d1c:	01 97       	sbiw	r24, 0x01	; 1
    5d1e:	f1 f7       	brne	.-4      	; 0x5d1c <GLCD_SendData+0x190>
    5d20:	9b 83       	std	Y+3, r25	; 0x03
    5d22:	8a 83       	std	Y+2, r24	; 0x02
    5d24:	0f c0       	rjmp	.+30     	; 0x5d44 <GLCD_SendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d26:	69 89       	ldd	r22, Y+17	; 0x11
    5d28:	7a 89       	ldd	r23, Y+18	; 0x12
    5d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    5d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    5d2e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d32:	dc 01       	movw	r26, r24
    5d34:	cb 01       	movw	r24, r22
    5d36:	88 8b       	std	Y+16, r24	; 0x10
    5d38:	88 89       	ldd	r24, Y+16	; 0x10
    5d3a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d3c:	89 81       	ldd	r24, Y+1	; 0x01
    5d3e:	8a 95       	dec	r24
    5d40:	f1 f7       	brne	.-4      	; 0x5d3e <GLCD_SendData+0x1b2>
    5d42:	89 83       	std	Y+1, r24	; 0x01
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	60 e0       	ldi	r22, 0x00	; 0
    5d48:	40 e0       	ldi	r20, 0x00	; 0
    5d4a:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
}
    5d4e:	69 96       	adiw	r28, 0x19	; 25
    5d50:	0f b6       	in	r0, 0x3f	; 63
    5d52:	f8 94       	cli
    5d54:	de bf       	out	0x3e, r29	; 62
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	cd bf       	out	0x3d, r28	; 61
    5d5a:	cf 91       	pop	r28
    5d5c:	df 91       	pop	r29
    5d5e:	08 95       	ret

00005d60 <GLCD_Reset>:

void GLCD_Reset(void) {
    5d60:	df 93       	push	r29
    5d62:	cf 93       	push	r28
    5d64:	cd b7       	in	r28, 0x3d	; 61
    5d66:	de b7       	in	r29, 0x3e	; 62
    5d68:	68 97       	sbiw	r28, 0x18	; 24
    5d6a:	0f b6       	in	r0, 0x3f	; 63
    5d6c:	f8 94       	cli
    5d6e:	de bf       	out	0x3e, r29	; 62
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_LOW);
    5d74:	81 e0       	ldi	r24, 0x01	; 1
    5d76:	66 e0       	ldi	r22, 0x06	; 6
    5d78:	40 e0       	ldi	r20, 0x00	; 0
    5d7a:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
    5d7e:	80 e0       	ldi	r24, 0x00	; 0
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	a0 e2       	ldi	r26, 0x20	; 32
    5d84:	b1 e4       	ldi	r27, 0x41	; 65
    5d86:	8d 8b       	std	Y+21, r24	; 0x15
    5d88:	9e 8b       	std	Y+22, r25	; 0x16
    5d8a:	af 8b       	std	Y+23, r26	; 0x17
    5d8c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    5d90:	7e 89       	ldd	r23, Y+22	; 0x16
    5d92:	8f 89       	ldd	r24, Y+23	; 0x17
    5d94:	98 8d       	ldd	r25, Y+24	; 0x18
    5d96:	2b ea       	ldi	r18, 0xAB	; 171
    5d98:	3a ea       	ldi	r19, 0xAA	; 170
    5d9a:	4a ea       	ldi	r20, 0xAA	; 170
    5d9c:	50 e4       	ldi	r21, 0x40	; 64
    5d9e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5da2:	dc 01       	movw	r26, r24
    5da4:	cb 01       	movw	r24, r22
    5da6:	89 8b       	std	Y+17, r24	; 0x11
    5da8:	9a 8b       	std	Y+18, r25	; 0x12
    5daa:	ab 8b       	std	Y+19, r26	; 0x13
    5dac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5dae:	69 89       	ldd	r22, Y+17	; 0x11
    5db0:	7a 89       	ldd	r23, Y+18	; 0x12
    5db2:	8b 89       	ldd	r24, Y+19	; 0x13
    5db4:	9c 89       	ldd	r25, Y+20	; 0x14
    5db6:	20 e0       	ldi	r18, 0x00	; 0
    5db8:	30 e0       	ldi	r19, 0x00	; 0
    5dba:	40 e8       	ldi	r20, 0x80	; 128
    5dbc:	5f e3       	ldi	r21, 0x3F	; 63
    5dbe:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    5dc2:	88 23       	and	r24, r24
    5dc4:	1c f4       	brge	.+6      	; 0x5dcc <GLCD_Reset+0x6c>
		__ticks = 1;
    5dc6:	81 e0       	ldi	r24, 0x01	; 1
    5dc8:	88 8b       	std	Y+16, r24	; 0x10
    5dca:	91 c0       	rjmp	.+290    	; 0x5eee <GLCD_Reset+0x18e>
	else if (__tmp > 255)
    5dcc:	69 89       	ldd	r22, Y+17	; 0x11
    5dce:	7a 89       	ldd	r23, Y+18	; 0x12
    5dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    5dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    5dd4:	20 e0       	ldi	r18, 0x00	; 0
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	4f e7       	ldi	r20, 0x7F	; 127
    5dda:	53 e4       	ldi	r21, 0x43	; 67
    5ddc:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    5de0:	18 16       	cp	r1, r24
    5de2:	0c f0       	brlt	.+2      	; 0x5de6 <GLCD_Reset+0x86>
    5de4:	7b c0       	rjmp	.+246    	; 0x5edc <GLCD_Reset+0x17c>
	{
		_delay_ms(__us / 1000.0);
    5de6:	6d 89       	ldd	r22, Y+21	; 0x15
    5de8:	7e 89       	ldd	r23, Y+22	; 0x16
    5dea:	8f 89       	ldd	r24, Y+23	; 0x17
    5dec:	98 8d       	ldd	r25, Y+24	; 0x18
    5dee:	20 e0       	ldi	r18, 0x00	; 0
    5df0:	30 e0       	ldi	r19, 0x00	; 0
    5df2:	4a e7       	ldi	r20, 0x7A	; 122
    5df4:	54 e4       	ldi	r21, 0x44	; 68
    5df6:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	cb 01       	movw	r24, r22
    5dfe:	8c 87       	std	Y+12, r24	; 0x0c
    5e00:	9d 87       	std	Y+13, r25	; 0x0d
    5e02:	ae 87       	std	Y+14, r26	; 0x0e
    5e04:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e06:	6c 85       	ldd	r22, Y+12	; 0x0c
    5e08:	7d 85       	ldd	r23, Y+13	; 0x0d
    5e0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e0e:	20 e0       	ldi	r18, 0x00	; 0
    5e10:	30 e0       	ldi	r19, 0x00	; 0
    5e12:	4a e7       	ldi	r20, 0x7A	; 122
    5e14:	55 e4       	ldi	r21, 0x45	; 69
    5e16:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5e1a:	dc 01       	movw	r26, r24
    5e1c:	cb 01       	movw	r24, r22
    5e1e:	88 87       	std	Y+8, r24	; 0x08
    5e20:	99 87       	std	Y+9, r25	; 0x09
    5e22:	aa 87       	std	Y+10, r26	; 0x0a
    5e24:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5e26:	68 85       	ldd	r22, Y+8	; 0x08
    5e28:	79 85       	ldd	r23, Y+9	; 0x09
    5e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	40 e8       	ldi	r20, 0x80	; 128
    5e34:	5f e3       	ldi	r21, 0x3F	; 63
    5e36:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    5e3a:	88 23       	and	r24, r24
    5e3c:	2c f4       	brge	.+10     	; 0x5e48 <GLCD_Reset+0xe8>
		__ticks = 1;
    5e3e:	81 e0       	ldi	r24, 0x01	; 1
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	9f 83       	std	Y+7, r25	; 0x07
    5e44:	8e 83       	std	Y+6, r24	; 0x06
    5e46:	3f c0       	rjmp	.+126    	; 0x5ec6 <GLCD_Reset+0x166>
	else if (__tmp > 65535)
    5e48:	68 85       	ldd	r22, Y+8	; 0x08
    5e4a:	79 85       	ldd	r23, Y+9	; 0x09
    5e4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e50:	20 e0       	ldi	r18, 0x00	; 0
    5e52:	3f ef       	ldi	r19, 0xFF	; 255
    5e54:	4f e7       	ldi	r20, 0x7F	; 127
    5e56:	57 e4       	ldi	r21, 0x47	; 71
    5e58:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    5e5c:	18 16       	cp	r1, r24
    5e5e:	4c f5       	brge	.+82     	; 0x5eb2 <GLCD_Reset+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e60:	6c 85       	ldd	r22, Y+12	; 0x0c
    5e62:	7d 85       	ldd	r23, Y+13	; 0x0d
    5e64:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e66:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e68:	20 e0       	ldi	r18, 0x00	; 0
    5e6a:	30 e0       	ldi	r19, 0x00	; 0
    5e6c:	40 e2       	ldi	r20, 0x20	; 32
    5e6e:	51 e4       	ldi	r21, 0x41	; 65
    5e70:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5e74:	dc 01       	movw	r26, r24
    5e76:	cb 01       	movw	r24, r22
    5e78:	bc 01       	movw	r22, r24
    5e7a:	cd 01       	movw	r24, r26
    5e7c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5e80:	dc 01       	movw	r26, r24
    5e82:	cb 01       	movw	r24, r22
    5e84:	9f 83       	std	Y+7, r25	; 0x07
    5e86:	8e 83       	std	Y+6, r24	; 0x06
    5e88:	0f c0       	rjmp	.+30     	; 0x5ea8 <GLCD_Reset+0x148>
    5e8a:	80 e9       	ldi	r24, 0x90	; 144
    5e8c:	91 e0       	ldi	r25, 0x01	; 1
    5e8e:	9d 83       	std	Y+5, r25	; 0x05
    5e90:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5e92:	8c 81       	ldd	r24, Y+4	; 0x04
    5e94:	9d 81       	ldd	r25, Y+5	; 0x05
    5e96:	01 97       	sbiw	r24, 0x01	; 1
    5e98:	f1 f7       	brne	.-4      	; 0x5e96 <GLCD_Reset+0x136>
    5e9a:	9d 83       	std	Y+5, r25	; 0x05
    5e9c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    5ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    5ea2:	01 97       	sbiw	r24, 0x01	; 1
    5ea4:	9f 83       	std	Y+7, r25	; 0x07
    5ea6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    5eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    5eac:	00 97       	sbiw	r24, 0x00	; 0
    5eae:	69 f7       	brne	.-38     	; 0x5e8a <GLCD_Reset+0x12a>
    5eb0:	24 c0       	rjmp	.+72     	; 0x5efa <GLCD_Reset+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eb2:	68 85       	ldd	r22, Y+8	; 0x08
    5eb4:	79 85       	ldd	r23, Y+9	; 0x09
    5eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5eba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	cb 01       	movw	r24, r22
    5ec2:	9f 83       	std	Y+7, r25	; 0x07
    5ec4:	8e 83       	std	Y+6, r24	; 0x06
    5ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    5eca:	9b 83       	std	Y+3, r25	; 0x03
    5ecc:	8a 83       	std	Y+2, r24	; 0x02
    5ece:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    5ed2:	01 97       	sbiw	r24, 0x01	; 1
    5ed4:	f1 f7       	brne	.-4      	; 0x5ed2 <GLCD_Reset+0x172>
    5ed6:	9b 83       	std	Y+3, r25	; 0x03
    5ed8:	8a 83       	std	Y+2, r24	; 0x02
    5eda:	0f c0       	rjmp	.+30     	; 0x5efa <GLCD_Reset+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5edc:	69 89       	ldd	r22, Y+17	; 0x11
    5ede:	7a 89       	ldd	r23, Y+18	; 0x12
    5ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ee4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	cb 01       	movw	r24, r22
    5eec:	88 8b       	std	Y+16, r24	; 0x10
    5eee:	88 89       	ldd	r24, Y+16	; 0x10
    5ef0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5ef2:	89 81       	ldd	r24, Y+1	; 0x01
    5ef4:	8a 95       	dec	r24
    5ef6:	f1 f7       	brne	.-4      	; 0x5ef4 <GLCD_Reset+0x194>
    5ef8:	89 83       	std	Y+1, r24	; 0x01
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
		_delay_us(10);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
    5efa:	81 e0       	ldi	r24, 0x01	; 1
    5efc:	66 e0       	ldi	r22, 0x06	; 6
    5efe:	41 e0       	ldi	r20, 0x01	; 1
    5f00:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <DIO_WritePin>
}
    5f04:	68 96       	adiw	r28, 0x18	; 24
    5f06:	0f b6       	in	r0, 0x3f	; 63
    5f08:	f8 94       	cli
    5f0a:	de bf       	out	0x3e, r29	; 62
    5f0c:	0f be       	out	0x3f, r0	; 63
    5f0e:	cd bf       	out	0x3d, r28	; 61
    5f10:	cf 91       	pop	r28
    5f12:	df 91       	pop	r29
    5f14:	08 95       	ret

00005f16 <GLCD_DisplaySpecialPattern>:

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
    5f16:	af 92       	push	r10
    5f18:	bf 92       	push	r11
    5f1a:	cf 92       	push	r12
    5f1c:	df 92       	push	r13
    5f1e:	ef 92       	push	r14
    5f20:	ff 92       	push	r15
    5f22:	0f 93       	push	r16
    5f24:	1f 93       	push	r17
    5f26:	df 93       	push	r29
    5f28:	cf 93       	push	r28
    5f2a:	cd b7       	in	r28, 0x3d	; 61
    5f2c:	de b7       	in	r29, 0x3e	; 62
    5f2e:	29 97       	sbiw	r28, 0x09	; 9
    5f30:	0f b6       	in	r0, 0x3f	; 63
    5f32:	f8 94       	cli
    5f34:	de bf       	out	0x3e, r29	; 62
    5f36:	0f be       	out	0x3f, r0	; 63
    5f38:	cd bf       	out	0x3d, r28	; 61
    5f3a:	2a 83       	std	Y+2, r18	; 0x02
    5f3c:	3b 83       	std	Y+3, r19	; 0x03
    5f3e:	4c 83       	std	Y+4, r20	; 0x04
    5f40:	5d 83       	std	Y+5, r21	; 0x05
    5f42:	6e 83       	std	Y+6, r22	; 0x06
    5f44:	7f 83       	std	Y+7, r23	; 0x07
    5f46:	88 87       	std	Y+8, r24	; 0x08
    5f48:	99 87       	std	Y+9, r25	; 0x09
	for(uint8 i = 0; i < 5; i++) {
    5f4a:	19 82       	std	Y+1, r1	; 0x01
    5f4c:	47 c0       	rjmp	.+142    	; 0x5fdc <GLCD_DisplaySpecialPattern+0xc6>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    5f4e:	80 91 f8 01 	lds	r24, 0x01F8
    5f52:	88 54       	subi	r24, 0x48	; 72
    5f54:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    5f58:	80 91 f9 01 	lds	r24, 0x01F9
    5f5c:	80 5c       	subi	r24, 0xC0	; 192
    5f5e:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
    5f62:	89 81       	ldd	r24, Y+1	; 0x01
    5f64:	88 2f       	mov	r24, r24
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	88 0f       	add	r24, r24
    5f6a:	99 1f       	adc	r25, r25
    5f6c:	88 0f       	add	r24, r24
    5f6e:	99 1f       	adc	r25, r25
    5f70:	88 0f       	add	r24, r24
    5f72:	99 1f       	adc	r25, r25
    5f74:	fc 01       	movw	r30, r24
    5f76:	2a 81       	ldd	r18, Y+2	; 0x02
    5f78:	3b 81       	ldd	r19, Y+3	; 0x03
    5f7a:	4c 81       	ldd	r20, Y+4	; 0x04
    5f7c:	5d 81       	ldd	r21, Y+5	; 0x05
    5f7e:	6e 81       	ldd	r22, Y+6	; 0x06
    5f80:	7f 81       	ldd	r23, Y+7	; 0x07
    5f82:	88 85       	ldd	r24, Y+8	; 0x08
    5f84:	99 85       	ldd	r25, Y+9	; 0x09
    5f86:	0e 2f       	mov	r16, r30
    5f88:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    5f8c:	a2 2e       	mov	r10, r18
    5f8e:	b3 2e       	mov	r11, r19
    5f90:	c4 2e       	mov	r12, r20
    5f92:	d5 2e       	mov	r13, r21
    5f94:	e6 2e       	mov	r14, r22
    5f96:	f7 2e       	mov	r15, r23
    5f98:	08 2f       	mov	r16, r24
    5f9a:	19 2f       	mov	r17, r25
    5f9c:	2a 2d       	mov	r18, r10
    5f9e:	3b 2d       	mov	r19, r11
    5fa0:	4c 2d       	mov	r20, r12
    5fa2:	5d 2d       	mov	r21, r13
    5fa4:	6e 2d       	mov	r22, r14
    5fa6:	7f 2d       	mov	r23, r15
    5fa8:	80 2f       	mov	r24, r16
    5faa:	91 2f       	mov	r25, r17
    5fac:	82 2f       	mov	r24, r18
    5fae:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <GLCD_SendData>
		gu8_Curr_Y_Address++;
    5fb2:	80 91 f9 01 	lds	r24, 0x01F9
    5fb6:	8f 5f       	subi	r24, 0xFF	; 255
    5fb8:	80 93 f9 01 	sts	0x01F9, r24
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
    5fbc:	80 91 f9 01 	lds	r24, 0x01F9
    5fc0:	80 34       	cpi	r24, 0x40	; 64
    5fc2:	48 f0       	brcs	.+18     	; 0x5fd6 <GLCD_DisplaySpecialPattern+0xc0>
    5fc4:	80 91 fa 01 	lds	r24, 0x01FA
    5fc8:	88 23       	and	r24, r24
    5fca:	29 f4       	brne	.+10     	; 0x5fd6 <GLCD_DisplaySpecialPattern+0xc0>
			GLCD_SelectPage(GLCD_PAGE_1);
    5fcc:	82 e0       	ldi	r24, 0x02	; 2
    5fce:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
    5fd2:	10 92 f9 01 	sts	0x01F9, r1
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
	for(uint8 i = 0; i < 5; i++) {
    5fd6:	89 81       	ldd	r24, Y+1	; 0x01
    5fd8:	8f 5f       	subi	r24, 0xFF	; 255
    5fda:	89 83       	std	Y+1, r24	; 0x01
    5fdc:	89 81       	ldd	r24, Y+1	; 0x01
    5fde:	85 30       	cpi	r24, 0x05	; 5
    5fe0:	08 f4       	brcc	.+2      	; 0x5fe4 <GLCD_DisplaySpecialPattern+0xce>
    5fe2:	b5 cf       	rjmp	.-150    	; 0x5f4e <GLCD_DisplaySpecialPattern+0x38>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			gu8_Curr_Y_Address = 0;
		}
	}
}
    5fe4:	29 96       	adiw	r28, 0x09	; 9
    5fe6:	0f b6       	in	r0, 0x3f	; 63
    5fe8:	f8 94       	cli
    5fea:	de bf       	out	0x3e, r29	; 62
    5fec:	0f be       	out	0x3f, r0	; 63
    5fee:	cd bf       	out	0x3d, r28	; 61
    5ff0:	cf 91       	pop	r28
    5ff2:	df 91       	pop	r29
    5ff4:	1f 91       	pop	r17
    5ff6:	0f 91       	pop	r16
    5ff8:	ff 90       	pop	r15
    5ffa:	ef 90       	pop	r14
    5ffc:	df 90       	pop	r13
    5ffe:	cf 90       	pop	r12
    6000:	bf 90       	pop	r11
    6002:	af 90       	pop	r10
    6004:	08 95       	ret

00006006 <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(char Data) {
    6006:	df 93       	push	r29
    6008:	cf 93       	push	r28
    600a:	00 d0       	rcall	.+0      	; 0x600c <GLCD_DisplayCharacter+0x6>
    600c:	00 d0       	rcall	.+0      	; 0x600e <GLCD_DisplayCharacter+0x8>
    600e:	0f 92       	push	r0
    6010:	cd b7       	in	r28, 0x3d	; 61
    6012:	de b7       	in	r29, 0x3e	; 62
    6014:	89 83       	std	Y+1, r24	; 0x01
	if ((gu8_Curr_Page == 0) | (gu8_Curr_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
    6016:	80 91 fa 01 	lds	r24, 0x01FA
    601a:	1d 82       	std	Y+5, r1	; 0x05
    601c:	88 23       	and	r24, r24
    601e:	11 f4       	brne	.+4      	; 0x6024 <GLCD_DisplayCharacter+0x1e>
    6020:	21 e0       	ldi	r18, 0x01	; 1
    6022:	2d 83       	std	Y+5, r18	; 0x05
    6024:	80 91 f9 01 	lds	r24, 0x01F9
    6028:	1c 82       	std	Y+4, r1	; 0x04
    602a:	89 33       	cpi	r24, 0x39	; 57
    602c:	10 f4       	brcc	.+4      	; 0x6032 <GLCD_DisplayCharacter+0x2c>
    602e:	31 e0       	ldi	r19, 0x01	; 1
    6030:	3c 83       	std	Y+4, r19	; 0x04
    6032:	8d 81       	ldd	r24, Y+5	; 0x05
    6034:	9c 81       	ldd	r25, Y+4	; 0x04
    6036:	89 2b       	or	r24, r25
    6038:	88 23       	and	r24, r24
    603a:	09 f4       	brne	.+2      	; 0x603e <GLCD_DisplayCharacter+0x38>
    603c:	0d c3       	rjmp	.+1562   	; 0x6658 <GLCD_DisplayCharacter+0x652>
		/* Enough space to write character */
		switch (Data) {
    603e:	89 81       	ldd	r24, Y+1	; 0x01
    6040:	28 2f       	mov	r18, r24
    6042:	30 e0       	ldi	r19, 0x00	; 0
    6044:	3b 83       	std	Y+3, r19	; 0x03
    6046:	2a 83       	std	Y+2, r18	; 0x02
    6048:	8a 81       	ldd	r24, Y+2	; 0x02
    604a:	9b 81       	ldd	r25, Y+3	; 0x03
    604c:	81 35       	cpi	r24, 0x51	; 81
    604e:	91 05       	cpc	r25, r1
    6050:	09 f4       	brne	.+2      	; 0x6054 <GLCD_DisplayCharacter+0x4e>
    6052:	b0 c1       	rjmp	.+864    	; 0x63b4 <GLCD_DisplayCharacter+0x3ae>
    6054:	2a 81       	ldd	r18, Y+2	; 0x02
    6056:	3b 81       	ldd	r19, Y+3	; 0x03
    6058:	22 35       	cpi	r18, 0x52	; 82
    605a:	31 05       	cpc	r19, r1
    605c:	0c f0       	brlt	.+2      	; 0x6060 <GLCD_DisplayCharacter+0x5a>
    605e:	c8 c0       	rjmp	.+400    	; 0x61f0 <GLCD_DisplayCharacter+0x1ea>
    6060:	8a 81       	ldd	r24, Y+2	; 0x02
    6062:	9b 81       	ldd	r25, Y+3	; 0x03
    6064:	89 33       	cpi	r24, 0x39	; 57
    6066:	91 05       	cpc	r25, r1
    6068:	09 f4       	brne	.+2      	; 0x606c <GLCD_DisplayCharacter+0x66>
    606a:	cd c2       	rjmp	.+1434   	; 0x6606 <GLCD_DisplayCharacter+0x600>
    606c:	2a 81       	ldd	r18, Y+2	; 0x02
    606e:	3b 81       	ldd	r19, Y+3	; 0x03
    6070:	2a 33       	cpi	r18, 0x3A	; 58
    6072:	31 05       	cpc	r19, r1
    6074:	0c f0       	brlt	.+2      	; 0x6078 <GLCD_DisplayCharacter+0x72>
    6076:	67 c0       	rjmp	.+206    	; 0x6146 <GLCD_DisplayCharacter+0x140>
    6078:	8a 81       	ldd	r24, Y+2	; 0x02
    607a:	9b 81       	ldd	r25, Y+3	; 0x03
    607c:	83 33       	cpi	r24, 0x33	; 51
    607e:	91 05       	cpc	r25, r1
    6080:	09 f4       	brne	.+2      	; 0x6084 <GLCD_DisplayCharacter+0x7e>
    6082:	7f c2       	rjmp	.+1278   	; 0x6582 <GLCD_DisplayCharacter+0x57c>
    6084:	2a 81       	ldd	r18, Y+2	; 0x02
    6086:	3b 81       	ldd	r19, Y+3	; 0x03
    6088:	24 33       	cpi	r18, 0x34	; 52
    608a:	31 05       	cpc	r19, r1
    608c:	bc f5       	brge	.+110    	; 0x60fc <GLCD_DisplayCharacter+0xf6>
    608e:	8a 81       	ldd	r24, Y+2	; 0x02
    6090:	9b 81       	ldd	r25, Y+3	; 0x03
    6092:	80 33       	cpi	r24, 0x30	; 48
    6094:	91 05       	cpc	r25, r1
    6096:	09 f4       	brne	.+2      	; 0x609a <GLCD_DisplayCharacter+0x94>
    6098:	53 c2       	rjmp	.+1190   	; 0x6540 <GLCD_DisplayCharacter+0x53a>
    609a:	2a 81       	ldd	r18, Y+2	; 0x02
    609c:	3b 81       	ldd	r19, Y+3	; 0x03
    609e:	21 33       	cpi	r18, 0x31	; 49
    60a0:	31 05       	cpc	r19, r1
    60a2:	fc f4       	brge	.+62     	; 0x60e2 <GLCD_DisplayCharacter+0xdc>
    60a4:	8a 81       	ldd	r24, Y+2	; 0x02
    60a6:	9b 81       	ldd	r25, Y+3	; 0x03
    60a8:	85 32       	cpi	r24, 0x25	; 37
    60aa:	91 05       	cpc	r25, r1
    60ac:	09 f4       	brne	.+2      	; 0x60b0 <GLCD_DisplayCharacter+0xaa>
    60ae:	11 c2       	rjmp	.+1058   	; 0x64d2 <GLCD_DisplayCharacter+0x4cc>
    60b0:	2a 81       	ldd	r18, Y+2	; 0x02
    60b2:	3b 81       	ldd	r19, Y+3	; 0x03
    60b4:	26 32       	cpi	r18, 0x26	; 38
    60b6:	31 05       	cpc	r19, r1
    60b8:	3c f4       	brge	.+14     	; 0x60c8 <GLCD_DisplayCharacter+0xc2>
    60ba:	8a 81       	ldd	r24, Y+2	; 0x02
    60bc:	9b 81       	ldd	r25, Y+3	; 0x03
    60be:	80 32       	cpi	r24, 0x20	; 32
    60c0:	91 05       	cpc	r25, r1
    60c2:	09 f4       	brne	.+2      	; 0x60c6 <GLCD_DisplayCharacter+0xc0>
    60c4:	27 c2       	rjmp	.+1102   	; 0x6514 <GLCD_DisplayCharacter+0x50e>
    60c6:	a9 c2       	rjmp	.+1362   	; 0x661a <GLCD_DisplayCharacter+0x614>
    60c8:	2a 81       	ldd	r18, Y+2	; 0x02
    60ca:	3b 81       	ldd	r19, Y+3	; 0x03
    60cc:	2d 32       	cpi	r18, 0x2D	; 45
    60ce:	31 05       	cpc	r19, r1
    60d0:	09 f4       	brne	.+2      	; 0x60d4 <GLCD_DisplayCharacter+0xce>
    60d2:	2b c2       	rjmp	.+1110   	; 0x652a <GLCD_DisplayCharacter+0x524>
    60d4:	8a 81       	ldd	r24, Y+2	; 0x02
    60d6:	9b 81       	ldd	r25, Y+3	; 0x03
    60d8:	8e 32       	cpi	r24, 0x2E	; 46
    60da:	91 05       	cpc	r25, r1
    60dc:	09 f4       	brne	.+2      	; 0x60e0 <GLCD_DisplayCharacter+0xda>
    60de:	0f c2       	rjmp	.+1054   	; 0x64fe <GLCD_DisplayCharacter+0x4f8>
    60e0:	9c c2       	rjmp	.+1336   	; 0x661a <GLCD_DisplayCharacter+0x614>
    60e2:	2a 81       	ldd	r18, Y+2	; 0x02
    60e4:	3b 81       	ldd	r19, Y+3	; 0x03
    60e6:	21 33       	cpi	r18, 0x31	; 49
    60e8:	31 05       	cpc	r19, r1
    60ea:	09 f4       	brne	.+2      	; 0x60ee <GLCD_DisplayCharacter+0xe8>
    60ec:	34 c2       	rjmp	.+1128   	; 0x6556 <GLCD_DisplayCharacter+0x550>
    60ee:	8a 81       	ldd	r24, Y+2	; 0x02
    60f0:	9b 81       	ldd	r25, Y+3	; 0x03
    60f2:	82 33       	cpi	r24, 0x32	; 50
    60f4:	91 05       	cpc	r25, r1
    60f6:	09 f4       	brne	.+2      	; 0x60fa <GLCD_DisplayCharacter+0xf4>
    60f8:	39 c2       	rjmp	.+1138   	; 0x656c <GLCD_DisplayCharacter+0x566>
    60fa:	8f c2       	rjmp	.+1310   	; 0x661a <GLCD_DisplayCharacter+0x614>
    60fc:	2a 81       	ldd	r18, Y+2	; 0x02
    60fe:	3b 81       	ldd	r19, Y+3	; 0x03
    6100:	26 33       	cpi	r18, 0x36	; 54
    6102:	31 05       	cpc	r19, r1
    6104:	09 f4       	brne	.+2      	; 0x6108 <GLCD_DisplayCharacter+0x102>
    6106:	5e c2       	rjmp	.+1212   	; 0x65c4 <GLCD_DisplayCharacter+0x5be>
    6108:	8a 81       	ldd	r24, Y+2	; 0x02
    610a:	9b 81       	ldd	r25, Y+3	; 0x03
    610c:	87 33       	cpi	r24, 0x37	; 55
    610e:	91 05       	cpc	r25, r1
    6110:	6c f4       	brge	.+26     	; 0x612c <GLCD_DisplayCharacter+0x126>
    6112:	2a 81       	ldd	r18, Y+2	; 0x02
    6114:	3b 81       	ldd	r19, Y+3	; 0x03
    6116:	24 33       	cpi	r18, 0x34	; 52
    6118:	31 05       	cpc	r19, r1
    611a:	09 f4       	brne	.+2      	; 0x611e <GLCD_DisplayCharacter+0x118>
    611c:	3d c2       	rjmp	.+1146   	; 0x6598 <GLCD_DisplayCharacter+0x592>
    611e:	8a 81       	ldd	r24, Y+2	; 0x02
    6120:	9b 81       	ldd	r25, Y+3	; 0x03
    6122:	85 33       	cpi	r24, 0x35	; 53
    6124:	91 05       	cpc	r25, r1
    6126:	09 f4       	brne	.+2      	; 0x612a <GLCD_DisplayCharacter+0x124>
    6128:	42 c2       	rjmp	.+1156   	; 0x65ae <GLCD_DisplayCharacter+0x5a8>
    612a:	77 c2       	rjmp	.+1262   	; 0x661a <GLCD_DisplayCharacter+0x614>
    612c:	2a 81       	ldd	r18, Y+2	; 0x02
    612e:	3b 81       	ldd	r19, Y+3	; 0x03
    6130:	27 33       	cpi	r18, 0x37	; 55
    6132:	31 05       	cpc	r19, r1
    6134:	09 f4       	brne	.+2      	; 0x6138 <GLCD_DisplayCharacter+0x132>
    6136:	51 c2       	rjmp	.+1186   	; 0x65da <GLCD_DisplayCharacter+0x5d4>
    6138:	8a 81       	ldd	r24, Y+2	; 0x02
    613a:	9b 81       	ldd	r25, Y+3	; 0x03
    613c:	88 33       	cpi	r24, 0x38	; 56
    613e:	91 05       	cpc	r25, r1
    6140:	09 f4       	brne	.+2      	; 0x6144 <GLCD_DisplayCharacter+0x13e>
    6142:	56 c2       	rjmp	.+1196   	; 0x65f0 <GLCD_DisplayCharacter+0x5ea>
    6144:	6a c2       	rjmp	.+1236   	; 0x661a <GLCD_DisplayCharacter+0x614>
    6146:	2a 81       	ldd	r18, Y+2	; 0x02
    6148:	3b 81       	ldd	r19, Y+3	; 0x03
    614a:	26 34       	cpi	r18, 0x46	; 70
    614c:	31 05       	cpc	r19, r1
    614e:	09 f4       	brne	.+2      	; 0x6152 <GLCD_DisplayCharacter+0x14c>
    6150:	10 c1       	rjmp	.+544    	; 0x6372 <GLCD_DisplayCharacter+0x36c>
    6152:	8a 81       	ldd	r24, Y+2	; 0x02
    6154:	9b 81       	ldd	r25, Y+3	; 0x03
    6156:	87 34       	cpi	r24, 0x47	; 71
    6158:	91 05       	cpc	r25, r1
    615a:	2c f5       	brge	.+74     	; 0x61a6 <GLCD_DisplayCharacter+0x1a0>
    615c:	2a 81       	ldd	r18, Y+2	; 0x02
    615e:	3b 81       	ldd	r19, Y+3	; 0x03
    6160:	23 34       	cpi	r18, 0x43	; 67
    6162:	31 05       	cpc	r19, r1
    6164:	09 f4       	brne	.+2      	; 0x6168 <GLCD_DisplayCharacter+0x162>
    6166:	47 c1       	rjmp	.+654    	; 0x63f6 <GLCD_DisplayCharacter+0x3f0>
    6168:	8a 81       	ldd	r24, Y+2	; 0x02
    616a:	9b 81       	ldd	r25, Y+3	; 0x03
    616c:	84 34       	cpi	r24, 0x44	; 68
    616e:	91 05       	cpc	r25, r1
    6170:	6c f4       	brge	.+26     	; 0x618c <GLCD_DisplayCharacter+0x186>
    6172:	2a 81       	ldd	r18, Y+2	; 0x02
    6174:	3b 81       	ldd	r19, Y+3	; 0x03
    6176:	2d 33       	cpi	r18, 0x3D	; 61
    6178:	31 05       	cpc	r19, r1
    617a:	09 f4       	brne	.+2      	; 0x617e <GLCD_DisplayCharacter+0x178>
    617c:	b5 c1       	rjmp	.+874    	; 0x64e8 <GLCD_DisplayCharacter+0x4e2>
    617e:	8a 81       	ldd	r24, Y+2	; 0x02
    6180:	9b 81       	ldd	r25, Y+3	; 0x03
    6182:	81 34       	cpi	r24, 0x41	; 65
    6184:	91 05       	cpc	r25, r1
    6186:	09 f4       	brne	.+2      	; 0x618a <GLCD_DisplayCharacter+0x184>
    6188:	e9 c0       	rjmp	.+466    	; 0x635c <GLCD_DisplayCharacter+0x356>
    618a:	47 c2       	rjmp	.+1166   	; 0x661a <GLCD_DisplayCharacter+0x614>
    618c:	2a 81       	ldd	r18, Y+2	; 0x02
    618e:	3b 81       	ldd	r19, Y+3	; 0x03
    6190:	24 34       	cpi	r18, 0x44	; 68
    6192:	31 05       	cpc	r19, r1
    6194:	09 f4       	brne	.+2      	; 0x6198 <GLCD_DisplayCharacter+0x192>
    6196:	45 c1       	rjmp	.+650    	; 0x6422 <GLCD_DisplayCharacter+0x41c>
    6198:	8a 81       	ldd	r24, Y+2	; 0x02
    619a:	9b 81       	ldd	r25, Y+3	; 0x03
    619c:	85 34       	cpi	r24, 0x45	; 69
    619e:	91 05       	cpc	r25, r1
    61a0:	09 f4       	brne	.+2      	; 0x61a4 <GLCD_DisplayCharacter+0x19e>
    61a2:	fd c0       	rjmp	.+506    	; 0x639e <GLCD_DisplayCharacter+0x398>
    61a4:	3a c2       	rjmp	.+1140   	; 0x661a <GLCD_DisplayCharacter+0x614>
    61a6:	2a 81       	ldd	r18, Y+2	; 0x02
    61a8:	3b 81       	ldd	r19, Y+3	; 0x03
    61aa:	2b 34       	cpi	r18, 0x4B	; 75
    61ac:	31 05       	cpc	r19, r1
    61ae:	09 f4       	brne	.+2      	; 0x61b2 <GLCD_DisplayCharacter+0x1ac>
    61b0:	4e c1       	rjmp	.+668    	; 0x644e <GLCD_DisplayCharacter+0x448>
    61b2:	8a 81       	ldd	r24, Y+2	; 0x02
    61b4:	9b 81       	ldd	r25, Y+3	; 0x03
    61b6:	8c 34       	cpi	r24, 0x4C	; 76
    61b8:	91 05       	cpc	r25, r1
    61ba:	6c f4       	brge	.+26     	; 0x61d6 <GLCD_DisplayCharacter+0x1d0>
    61bc:	2a 81       	ldd	r18, Y+2	; 0x02
    61be:	3b 81       	ldd	r19, Y+3	; 0x03
    61c0:	28 34       	cpi	r18, 0x48	; 72
    61c2:	31 05       	cpc	r19, r1
    61c4:	09 f4       	brne	.+2      	; 0x61c8 <GLCD_DisplayCharacter+0x1c2>
    61c6:	4e c1       	rjmp	.+668    	; 0x6464 <GLCD_DisplayCharacter+0x45e>
    61c8:	8a 81       	ldd	r24, Y+2	; 0x02
    61ca:	9b 81       	ldd	r25, Y+3	; 0x03
    61cc:	89 34       	cpi	r24, 0x49	; 73
    61ce:	91 05       	cpc	r25, r1
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <GLCD_DisplayCharacter+0x1ce>
    61d2:	74 c1       	rjmp	.+744    	; 0x64bc <GLCD_DisplayCharacter+0x4b6>
    61d4:	22 c2       	rjmp	.+1092   	; 0x661a <GLCD_DisplayCharacter+0x614>
    61d6:	2a 81       	ldd	r18, Y+2	; 0x02
    61d8:	3b 81       	ldd	r19, Y+3	; 0x03
    61da:	2d 34       	cpi	r18, 0x4D	; 77
    61dc:	31 05       	cpc	r19, r1
    61de:	09 f4       	brne	.+2      	; 0x61e2 <GLCD_DisplayCharacter+0x1dc>
    61e0:	57 c1       	rjmp	.+686    	; 0x6490 <GLCD_DisplayCharacter+0x48a>
    61e2:	8a 81       	ldd	r24, Y+2	; 0x02
    61e4:	9b 81       	ldd	r25, Y+3	; 0x03
    61e6:	8e 34       	cpi	r24, 0x4E	; 78
    61e8:	91 05       	cpc	r25, r1
    61ea:	09 f4       	brne	.+2      	; 0x61ee <GLCD_DisplayCharacter+0x1e8>
    61ec:	f9 c0       	rjmp	.+498    	; 0x63e0 <GLCD_DisplayCharacter+0x3da>
    61ee:	15 c2       	rjmp	.+1066   	; 0x661a <GLCD_DisplayCharacter+0x614>
    61f0:	2a 81       	ldd	r18, Y+2	; 0x02
    61f2:	3b 81       	ldd	r19, Y+3	; 0x03
    61f4:	28 36       	cpi	r18, 0x68	; 104
    61f6:	31 05       	cpc	r19, r1
    61f8:	09 f4       	brne	.+2      	; 0x61fc <GLCD_DisplayCharacter+0x1f6>
    61fa:	34 c1       	rjmp	.+616    	; 0x6464 <GLCD_DisplayCharacter+0x45e>
    61fc:	8a 81       	ldd	r24, Y+2	; 0x02
    61fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6200:	89 36       	cpi	r24, 0x69	; 105
    6202:	91 05       	cpc	r25, r1
    6204:	0c f0       	brlt	.+2      	; 0x6208 <GLCD_DisplayCharacter+0x202>
    6206:	55 c0       	rjmp	.+170    	; 0x62b2 <GLCD_DisplayCharacter+0x2ac>
    6208:	2a 81       	ldd	r18, Y+2	; 0x02
    620a:	3b 81       	ldd	r19, Y+3	; 0x03
    620c:	2a 35       	cpi	r18, 0x5A	; 90
    620e:	31 05       	cpc	r19, r1
    6210:	09 f4       	brne	.+2      	; 0x6214 <GLCD_DisplayCharacter+0x20e>
    6212:	33 c1       	rjmp	.+614    	; 0x647a <GLCD_DisplayCharacter+0x474>
    6214:	8a 81       	ldd	r24, Y+2	; 0x02
    6216:	9b 81       	ldd	r25, Y+3	; 0x03
    6218:	8b 35       	cpi	r24, 0x5B	; 91
    621a:	91 05       	cpc	r25, r1
    621c:	2c f5       	brge	.+74     	; 0x6268 <GLCD_DisplayCharacter+0x262>
    621e:	2a 81       	ldd	r18, Y+2	; 0x02
    6220:	3b 81       	ldd	r19, Y+3	; 0x03
    6222:	24 35       	cpi	r18, 0x54	; 84
    6224:	31 05       	cpc	r19, r1
    6226:	09 f4       	brne	.+2      	; 0x622a <GLCD_DisplayCharacter+0x224>
    6228:	07 c1       	rjmp	.+526    	; 0x6438 <GLCD_DisplayCharacter+0x432>
    622a:	8a 81       	ldd	r24, Y+2	; 0x02
    622c:	9b 81       	ldd	r25, Y+3	; 0x03
    622e:	85 35       	cpi	r24, 0x55	; 85
    6230:	91 05       	cpc	r25, r1
    6232:	6c f4       	brge	.+26     	; 0x624e <GLCD_DisplayCharacter+0x248>
    6234:	2a 81       	ldd	r18, Y+2	; 0x02
    6236:	3b 81       	ldd	r19, Y+3	; 0x03
    6238:	22 35       	cpi	r18, 0x52	; 82
    623a:	31 05       	cpc	r19, r1
    623c:	09 f4       	brne	.+2      	; 0x6240 <GLCD_DisplayCharacter+0x23a>
    623e:	a4 c0       	rjmp	.+328    	; 0x6388 <GLCD_DisplayCharacter+0x382>
    6240:	8a 81       	ldd	r24, Y+2	; 0x02
    6242:	9b 81       	ldd	r25, Y+3	; 0x03
    6244:	83 35       	cpi	r24, 0x53	; 83
    6246:	91 05       	cpc	r25, r1
    6248:	09 f4       	brne	.+2      	; 0x624c <GLCD_DisplayCharacter+0x246>
    624a:	2d c1       	rjmp	.+602    	; 0x64a6 <GLCD_DisplayCharacter+0x4a0>
    624c:	e6 c1       	rjmp	.+972    	; 0x661a <GLCD_DisplayCharacter+0x614>
    624e:	2a 81       	ldd	r18, Y+2	; 0x02
    6250:	3b 81       	ldd	r19, Y+3	; 0x03
    6252:	25 35       	cpi	r18, 0x55	; 85
    6254:	31 05       	cpc	r19, r1
    6256:	09 f4       	brne	.+2      	; 0x625a <GLCD_DisplayCharacter+0x254>
    6258:	b8 c0       	rjmp	.+368    	; 0x63ca <GLCD_DisplayCharacter+0x3c4>
    625a:	8a 81       	ldd	r24, Y+2	; 0x02
    625c:	9b 81       	ldd	r25, Y+3	; 0x03
    625e:	89 35       	cpi	r24, 0x59	; 89
    6260:	91 05       	cpc	r25, r1
    6262:	09 f4       	brne	.+2      	; 0x6266 <GLCD_DisplayCharacter+0x260>
    6264:	d3 c0       	rjmp	.+422    	; 0x640c <GLCD_DisplayCharacter+0x406>
    6266:	d9 c1       	rjmp	.+946    	; 0x661a <GLCD_DisplayCharacter+0x614>
    6268:	2a 81       	ldd	r18, Y+2	; 0x02
    626a:	3b 81       	ldd	r19, Y+3	; 0x03
    626c:	24 36       	cpi	r18, 0x64	; 100
    626e:	31 05       	cpc	r19, r1
    6270:	09 f4       	brne	.+2      	; 0x6274 <GLCD_DisplayCharacter+0x26e>
    6272:	d7 c0       	rjmp	.+430    	; 0x6422 <GLCD_DisplayCharacter+0x41c>
    6274:	8a 81       	ldd	r24, Y+2	; 0x02
    6276:	9b 81       	ldd	r25, Y+3	; 0x03
    6278:	85 36       	cpi	r24, 0x65	; 101
    627a:	91 05       	cpc	r25, r1
    627c:	6c f4       	brge	.+26     	; 0x6298 <GLCD_DisplayCharacter+0x292>
    627e:	2a 81       	ldd	r18, Y+2	; 0x02
    6280:	3b 81       	ldd	r19, Y+3	; 0x03
    6282:	21 36       	cpi	r18, 0x61	; 97
    6284:	31 05       	cpc	r19, r1
    6286:	09 f4       	brne	.+2      	; 0x628a <GLCD_DisplayCharacter+0x284>
    6288:	69 c0       	rjmp	.+210    	; 0x635c <GLCD_DisplayCharacter+0x356>
    628a:	8a 81       	ldd	r24, Y+2	; 0x02
    628c:	9b 81       	ldd	r25, Y+3	; 0x03
    628e:	83 36       	cpi	r24, 0x63	; 99
    6290:	91 05       	cpc	r25, r1
    6292:	09 f4       	brne	.+2      	; 0x6296 <GLCD_DisplayCharacter+0x290>
    6294:	b0 c0       	rjmp	.+352    	; 0x63f6 <GLCD_DisplayCharacter+0x3f0>
    6296:	c1 c1       	rjmp	.+898    	; 0x661a <GLCD_DisplayCharacter+0x614>
    6298:	2a 81       	ldd	r18, Y+2	; 0x02
    629a:	3b 81       	ldd	r19, Y+3	; 0x03
    629c:	25 36       	cpi	r18, 0x65	; 101
    629e:	31 05       	cpc	r19, r1
    62a0:	09 f4       	brne	.+2      	; 0x62a4 <GLCD_DisplayCharacter+0x29e>
    62a2:	7d c0       	rjmp	.+250    	; 0x639e <GLCD_DisplayCharacter+0x398>
    62a4:	8a 81       	ldd	r24, Y+2	; 0x02
    62a6:	9b 81       	ldd	r25, Y+3	; 0x03
    62a8:	86 36       	cpi	r24, 0x66	; 102
    62aa:	91 05       	cpc	r25, r1
    62ac:	09 f4       	brne	.+2      	; 0x62b0 <GLCD_DisplayCharacter+0x2aa>
    62ae:	61 c0       	rjmp	.+194    	; 0x6372 <GLCD_DisplayCharacter+0x36c>
    62b0:	b4 c1       	rjmp	.+872    	; 0x661a <GLCD_DisplayCharacter+0x614>
    62b2:	2a 81       	ldd	r18, Y+2	; 0x02
    62b4:	3b 81       	ldd	r19, Y+3	; 0x03
    62b6:	22 37       	cpi	r18, 0x72	; 114
    62b8:	31 05       	cpc	r19, r1
    62ba:	09 f4       	brne	.+2      	; 0x62be <GLCD_DisplayCharacter+0x2b8>
    62bc:	65 c0       	rjmp	.+202    	; 0x6388 <GLCD_DisplayCharacter+0x382>
    62be:	8a 81       	ldd	r24, Y+2	; 0x02
    62c0:	9b 81       	ldd	r25, Y+3	; 0x03
    62c2:	83 37       	cpi	r24, 0x73	; 115
    62c4:	91 05       	cpc	r25, r1
    62c6:	2c f5       	brge	.+74     	; 0x6312 <GLCD_DisplayCharacter+0x30c>
    62c8:	2a 81       	ldd	r18, Y+2	; 0x02
    62ca:	3b 81       	ldd	r19, Y+3	; 0x03
    62cc:	2d 36       	cpi	r18, 0x6D	; 109
    62ce:	31 05       	cpc	r19, r1
    62d0:	09 f4       	brne	.+2      	; 0x62d4 <GLCD_DisplayCharacter+0x2ce>
    62d2:	de c0       	rjmp	.+444    	; 0x6490 <GLCD_DisplayCharacter+0x48a>
    62d4:	8a 81       	ldd	r24, Y+2	; 0x02
    62d6:	9b 81       	ldd	r25, Y+3	; 0x03
    62d8:	8e 36       	cpi	r24, 0x6E	; 110
    62da:	91 05       	cpc	r25, r1
    62dc:	6c f4       	brge	.+26     	; 0x62f8 <GLCD_DisplayCharacter+0x2f2>
    62de:	2a 81       	ldd	r18, Y+2	; 0x02
    62e0:	3b 81       	ldd	r19, Y+3	; 0x03
    62e2:	29 36       	cpi	r18, 0x69	; 105
    62e4:	31 05       	cpc	r19, r1
    62e6:	09 f4       	brne	.+2      	; 0x62ea <GLCD_DisplayCharacter+0x2e4>
    62e8:	e9 c0       	rjmp	.+466    	; 0x64bc <GLCD_DisplayCharacter+0x4b6>
    62ea:	8a 81       	ldd	r24, Y+2	; 0x02
    62ec:	9b 81       	ldd	r25, Y+3	; 0x03
    62ee:	8b 36       	cpi	r24, 0x6B	; 107
    62f0:	91 05       	cpc	r25, r1
    62f2:	09 f4       	brne	.+2      	; 0x62f6 <GLCD_DisplayCharacter+0x2f0>
    62f4:	ac c0       	rjmp	.+344    	; 0x644e <GLCD_DisplayCharacter+0x448>
    62f6:	91 c1       	rjmp	.+802    	; 0x661a <GLCD_DisplayCharacter+0x614>
    62f8:	2a 81       	ldd	r18, Y+2	; 0x02
    62fa:	3b 81       	ldd	r19, Y+3	; 0x03
    62fc:	2e 36       	cpi	r18, 0x6E	; 110
    62fe:	31 05       	cpc	r19, r1
    6300:	09 f4       	brne	.+2      	; 0x6304 <GLCD_DisplayCharacter+0x2fe>
    6302:	6e c0       	rjmp	.+220    	; 0x63e0 <GLCD_DisplayCharacter+0x3da>
    6304:	8a 81       	ldd	r24, Y+2	; 0x02
    6306:	9b 81       	ldd	r25, Y+3	; 0x03
    6308:	81 37       	cpi	r24, 0x71	; 113
    630a:	91 05       	cpc	r25, r1
    630c:	09 f4       	brne	.+2      	; 0x6310 <GLCD_DisplayCharacter+0x30a>
    630e:	52 c0       	rjmp	.+164    	; 0x63b4 <GLCD_DisplayCharacter+0x3ae>
    6310:	84 c1       	rjmp	.+776    	; 0x661a <GLCD_DisplayCharacter+0x614>
    6312:	2a 81       	ldd	r18, Y+2	; 0x02
    6314:	3b 81       	ldd	r19, Y+3	; 0x03
    6316:	25 37       	cpi	r18, 0x75	; 117
    6318:	31 05       	cpc	r19, r1
    631a:	09 f4       	brne	.+2      	; 0x631e <GLCD_DisplayCharacter+0x318>
    631c:	56 c0       	rjmp	.+172    	; 0x63ca <GLCD_DisplayCharacter+0x3c4>
    631e:	8a 81       	ldd	r24, Y+2	; 0x02
    6320:	9b 81       	ldd	r25, Y+3	; 0x03
    6322:	86 37       	cpi	r24, 0x76	; 118
    6324:	91 05       	cpc	r25, r1
    6326:	6c f4       	brge	.+26     	; 0x6342 <GLCD_DisplayCharacter+0x33c>
    6328:	2a 81       	ldd	r18, Y+2	; 0x02
    632a:	3b 81       	ldd	r19, Y+3	; 0x03
    632c:	23 37       	cpi	r18, 0x73	; 115
    632e:	31 05       	cpc	r19, r1
    6330:	09 f4       	brne	.+2      	; 0x6334 <GLCD_DisplayCharacter+0x32e>
    6332:	b9 c0       	rjmp	.+370    	; 0x64a6 <GLCD_DisplayCharacter+0x4a0>
    6334:	8a 81       	ldd	r24, Y+2	; 0x02
    6336:	9b 81       	ldd	r25, Y+3	; 0x03
    6338:	84 37       	cpi	r24, 0x74	; 116
    633a:	91 05       	cpc	r25, r1
    633c:	09 f4       	brne	.+2      	; 0x6340 <GLCD_DisplayCharacter+0x33a>
    633e:	7c c0       	rjmp	.+248    	; 0x6438 <GLCD_DisplayCharacter+0x432>
    6340:	6c c1       	rjmp	.+728    	; 0x661a <GLCD_DisplayCharacter+0x614>
    6342:	2a 81       	ldd	r18, Y+2	; 0x02
    6344:	3b 81       	ldd	r19, Y+3	; 0x03
    6346:	29 37       	cpi	r18, 0x79	; 121
    6348:	31 05       	cpc	r19, r1
    634a:	09 f4       	brne	.+2      	; 0x634e <GLCD_DisplayCharacter+0x348>
    634c:	5f c0       	rjmp	.+190    	; 0x640c <GLCD_DisplayCharacter+0x406>
    634e:	8a 81       	ldd	r24, Y+2	; 0x02
    6350:	9b 81       	ldd	r25, Y+3	; 0x03
    6352:	8a 37       	cpi	r24, 0x7A	; 122
    6354:	91 05       	cpc	r25, r1
    6356:	09 f4       	brne	.+2      	; 0x635a <GLCD_DisplayCharacter+0x354>
    6358:	90 c0       	rjmp	.+288    	; 0x647a <GLCD_DisplayCharacter+0x474>
    635a:	5f c1       	rjmp	.+702    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
    635c:	2c e7       	ldi	r18, 0x7C	; 124
    635e:	32 e1       	ldi	r19, 0x12	; 18
    6360:	41 e1       	ldi	r20, 0x11	; 17
    6362:	52 e1       	ldi	r21, 0x12	; 18
    6364:	6c e7       	ldi	r22, 0x7C	; 124
    6366:	70 e0       	ldi	r23, 0x00	; 0
    6368:	80 e0       	ldi	r24, 0x00	; 0
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6370:	54 c1       	rjmp	.+680    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
    6372:	2f e7       	ldi	r18, 0x7F	; 127
    6374:	39 e0       	ldi	r19, 0x09	; 9
    6376:	49 e0       	ldi	r20, 0x09	; 9
    6378:	59 e0       	ldi	r21, 0x09	; 9
    637a:	61 e0       	ldi	r22, 0x01	; 1
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6386:	49 c1       	rjmp	.+658    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
    6388:	2f e7       	ldi	r18, 0x7F	; 127
    638a:	39 e0       	ldi	r19, 0x09	; 9
    638c:	49 e1       	ldi	r20, 0x19	; 25
    638e:	59 e2       	ldi	r21, 0x29	; 41
    6390:	6f e4       	ldi	r22, 0x4F	; 79
    6392:	70 e0       	ldi	r23, 0x00	; 0
    6394:	80 e0       	ldi	r24, 0x00	; 0
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    639c:	3e c1       	rjmp	.+636    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
    639e:	2f e7       	ldi	r18, 0x7F	; 127
    63a0:	39 e4       	ldi	r19, 0x49	; 73
    63a2:	49 e4       	ldi	r20, 0x49	; 73
    63a4:	59 e4       	ldi	r21, 0x49	; 73
    63a6:	61 e4       	ldi	r22, 0x41	; 65
    63a8:	70 e0       	ldi	r23, 0x00	; 0
    63aa:	80 e0       	ldi	r24, 0x00	; 0
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    63b2:	33 c1       	rjmp	.+614    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
    63b4:	2e e1       	ldi	r18, 0x1E	; 30
    63b6:	31 e2       	ldi	r19, 0x21	; 33
    63b8:	41 e3       	ldi	r20, 0x31	; 49
    63ba:	5e e3       	ldi	r21, 0x3E	; 62
    63bc:	60 e4       	ldi	r22, 0x40	; 64
    63be:	70 e0       	ldi	r23, 0x00	; 0
    63c0:	80 e0       	ldi	r24, 0x00	; 0
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    63c8:	28 c1       	rjmp	.+592    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
    63ca:	2f e3       	ldi	r18, 0x3F	; 63
    63cc:	30 e4       	ldi	r19, 0x40	; 64
    63ce:	40 e4       	ldi	r20, 0x40	; 64
    63d0:	50 e4       	ldi	r21, 0x40	; 64
    63d2:	6f e3       	ldi	r22, 0x3F	; 63
    63d4:	70 e0       	ldi	r23, 0x00	; 0
    63d6:	80 e0       	ldi	r24, 0x00	; 0
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    63de:	1d c1       	rjmp	.+570    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
    63e0:	2f e7       	ldi	r18, 0x7F	; 127
    63e2:	32 e0       	ldi	r19, 0x02	; 2
    63e4:	4c e1       	ldi	r20, 0x1C	; 28
    63e6:	50 e2       	ldi	r21, 0x20	; 32
    63e8:	6f e7       	ldi	r22, 0x7F	; 127
    63ea:	70 e0       	ldi	r23, 0x00	; 0
    63ec:	80 e0       	ldi	r24, 0x00	; 0
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    63f4:	12 c1       	rjmp	.+548    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
    63f6:	2e e3       	ldi	r18, 0x3E	; 62
    63f8:	31 e4       	ldi	r19, 0x41	; 65
    63fa:	41 e4       	ldi	r20, 0x41	; 65
    63fc:	51 e4       	ldi	r21, 0x41	; 65
    63fe:	61 e4       	ldi	r22, 0x41	; 65
    6400:	70 e0       	ldi	r23, 0x00	; 0
    6402:	80 e0       	ldi	r24, 0x00	; 0
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    640a:	07 c1       	rjmp	.+526    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
    640c:	23 e0       	ldi	r18, 0x03	; 3
    640e:	3c e0       	ldi	r19, 0x0C	; 12
    6410:	40 e7       	ldi	r20, 0x70	; 112
    6412:	5c e0       	ldi	r21, 0x0C	; 12
    6414:	63 e0       	ldi	r22, 0x03	; 3
    6416:	70 e0       	ldi	r23, 0x00	; 0
    6418:	80 e0       	ldi	r24, 0x00	; 0
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6420:	fc c0       	rjmp	.+504    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
    6422:	2f e7       	ldi	r18, 0x7F	; 127
    6424:	31 e4       	ldi	r19, 0x41	; 65
    6426:	41 e4       	ldi	r20, 0x41	; 65
    6428:	5e e3       	ldi	r21, 0x3E	; 62
    642a:	60 e0       	ldi	r22, 0x00	; 0
    642c:	70 e0       	ldi	r23, 0x00	; 0
    642e:	80 e0       	ldi	r24, 0x00	; 0
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6436:	f1 c0       	rjmp	.+482    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
    6438:	21 e0       	ldi	r18, 0x01	; 1
    643a:	31 e0       	ldi	r19, 0x01	; 1
    643c:	4f e7       	ldi	r20, 0x7F	; 127
    643e:	51 e0       	ldi	r21, 0x01	; 1
    6440:	61 e0       	ldi	r22, 0x01	; 1
    6442:	70 e0       	ldi	r23, 0x00	; 0
    6444:	80 e0       	ldi	r24, 0x00	; 0
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    644c:	e6 c0       	rjmp	.+460    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
    644e:	2f e7       	ldi	r18, 0x7F	; 127
    6450:	38 e0       	ldi	r19, 0x08	; 8
    6452:	44 e1       	ldi	r20, 0x14	; 20
    6454:	52 e2       	ldi	r21, 0x22	; 34
    6456:	61 e4       	ldi	r22, 0x41	; 65
    6458:	70 e0       	ldi	r23, 0x00	; 0
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6462:	db c0       	rjmp	.+438    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
    6464:	2f e7       	ldi	r18, 0x7F	; 127
    6466:	38 e0       	ldi	r19, 0x08	; 8
    6468:	48 e0       	ldi	r20, 0x08	; 8
    646a:	58 e0       	ldi	r21, 0x08	; 8
    646c:	6f e7       	ldi	r22, 0x7F	; 127
    646e:	70 e0       	ldi	r23, 0x00	; 0
    6470:	80 e0       	ldi	r24, 0x00	; 0
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6478:	d0 c0       	rjmp	.+416    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
    647a:	21 e6       	ldi	r18, 0x61	; 97
    647c:	31 e5       	ldi	r19, 0x51	; 81
    647e:	49 e4       	ldi	r20, 0x49	; 73
    6480:	55 e4       	ldi	r21, 0x45	; 69
    6482:	63 e4       	ldi	r22, 0x43	; 67
    6484:	70 e0       	ldi	r23, 0x00	; 0
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    648e:	c5 c0       	rjmp	.+394    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
    6490:	2f e7       	ldi	r18, 0x7F	; 127
    6492:	32 e0       	ldi	r19, 0x02	; 2
    6494:	4c e0       	ldi	r20, 0x0C	; 12
    6496:	52 e0       	ldi	r21, 0x02	; 2
    6498:	6f e7       	ldi	r22, 0x7F	; 127
    649a:	70 e0       	ldi	r23, 0x00	; 0
    649c:	80 e0       	ldi	r24, 0x00	; 0
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    64a4:	ba c0       	rjmp	.+372    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
    64a6:	2f e4       	ldi	r18, 0x4F	; 79
    64a8:	39 e4       	ldi	r19, 0x49	; 73
    64aa:	49 e4       	ldi	r20, 0x49	; 73
    64ac:	59 e4       	ldi	r21, 0x49	; 73
    64ae:	69 ef       	ldi	r22, 0xF9	; 249
    64b0:	70 e0       	ldi	r23, 0x00	; 0
    64b2:	80 e0       	ldi	r24, 0x00	; 0
    64b4:	90 e0       	ldi	r25, 0x00	; 0
    64b6:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    64ba:	af c0       	rjmp	.+350    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
    64bc:	21 e4       	ldi	r18, 0x41	; 65
    64be:	31 e4       	ldi	r19, 0x41	; 65
    64c0:	4f e7       	ldi	r20, 0x7F	; 127
    64c2:	51 e4       	ldi	r21, 0x41	; 65
    64c4:	61 e4       	ldi	r22, 0x41	; 65
    64c6:	70 e0       	ldi	r23, 0x00	; 0
    64c8:	80 e0       	ldi	r24, 0x00	; 0
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    64d0:	a4 c0       	rjmp	.+328    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
    64d2:	23 ec       	ldi	r18, 0xC3	; 195
    64d4:	33 e7       	ldi	r19, 0x73	; 115
    64d6:	48 e1       	ldi	r20, 0x18	; 24
    64d8:	5e ec       	ldi	r21, 0xCE	; 206
    64da:	63 ec       	ldi	r22, 0xC3	; 195
    64dc:	70 e0       	ldi	r23, 0x00	; 0
    64de:	80 e0       	ldi	r24, 0x00	; 0
    64e0:	90 e0       	ldi	r25, 0x00	; 0
    64e2:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    64e6:	99 c0       	rjmp	.+306    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
    64e8:	24 e2       	ldi	r18, 0x24	; 36
    64ea:	34 e2       	ldi	r19, 0x24	; 36
    64ec:	44 e2       	ldi	r20, 0x24	; 36
    64ee:	54 e2       	ldi	r21, 0x24	; 36
    64f0:	64 e2       	ldi	r22, 0x24	; 36
    64f2:	70 e0       	ldi	r23, 0x00	; 0
    64f4:	80 e0       	ldi	r24, 0x00	; 0
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    64fc:	8e c0       	rjmp	.+284    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
    64fe:	20 e0       	ldi	r18, 0x00	; 0
    6500:	30 e7       	ldi	r19, 0x70	; 112
    6502:	40 e7       	ldi	r20, 0x70	; 112
    6504:	50 e7       	ldi	r21, 0x70	; 112
    6506:	60 e0       	ldi	r22, 0x00	; 0
    6508:	70 e0       	ldi	r23, 0x00	; 0
    650a:	80 e0       	ldi	r24, 0x00	; 0
    650c:	90 e0       	ldi	r25, 0x00	; 0
    650e:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6512:	83 c0       	rjmp	.+262    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
    6514:	20 e0       	ldi	r18, 0x00	; 0
    6516:	30 e0       	ldi	r19, 0x00	; 0
    6518:	40 e0       	ldi	r20, 0x00	; 0
    651a:	50 e0       	ldi	r21, 0x00	; 0
    651c:	60 e0       	ldi	r22, 0x00	; 0
    651e:	70 e0       	ldi	r23, 0x00	; 0
    6520:	80 e0       	ldi	r24, 0x00	; 0
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6528:	78 c0       	rjmp	.+240    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
    652a:	28 e1       	ldi	r18, 0x18	; 24
    652c:	38 e1       	ldi	r19, 0x18	; 24
    652e:	48 e1       	ldi	r20, 0x18	; 24
    6530:	58 e1       	ldi	r21, 0x18	; 24
    6532:	68 e1       	ldi	r22, 0x18	; 24
    6534:	70 e0       	ldi	r23, 0x00	; 0
    6536:	80 e0       	ldi	r24, 0x00	; 0
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    653e:	6d c0       	rjmp	.+218    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
    6540:	2e e3       	ldi	r18, 0x3E	; 62
    6542:	31 e5       	ldi	r19, 0x51	; 81
    6544:	49 e4       	ldi	r20, 0x49	; 73
    6546:	55 e4       	ldi	r21, 0x45	; 69
    6548:	6e e3       	ldi	r22, 0x3E	; 62
    654a:	70 e0       	ldi	r23, 0x00	; 0
    654c:	80 e0       	ldi	r24, 0x00	; 0
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6554:	62 c0       	rjmp	.+196    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
    6556:	24 e4       	ldi	r18, 0x44	; 68
    6558:	32 e4       	ldi	r19, 0x42	; 66
    655a:	4f e7       	ldi	r20, 0x7F	; 127
    655c:	50 e4       	ldi	r21, 0x40	; 64
    655e:	60 e4       	ldi	r22, 0x40	; 64
    6560:	70 e0       	ldi	r23, 0x00	; 0
    6562:	80 e0       	ldi	r24, 0x00	; 0
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    656a:	57 c0       	rjmp	.+174    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
    656c:	26 e4       	ldi	r18, 0x46	; 70
    656e:	31 e6       	ldi	r19, 0x61	; 97
    6570:	41 e5       	ldi	r20, 0x51	; 81
    6572:	5e e4       	ldi	r21, 0x4E	; 78
    6574:	60 e4       	ldi	r22, 0x40	; 64
    6576:	70 e0       	ldi	r23, 0x00	; 0
    6578:	80 e0       	ldi	r24, 0x00	; 0
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6580:	4c c0       	rjmp	.+152    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
    6582:	21 e4       	ldi	r18, 0x41	; 65
    6584:	39 e4       	ldi	r19, 0x49	; 73
    6586:	49 e4       	ldi	r20, 0x49	; 73
    6588:	59 e4       	ldi	r21, 0x49	; 73
    658a:	66 e3       	ldi	r22, 0x36	; 54
    658c:	70 e0       	ldi	r23, 0x00	; 0
    658e:	80 e0       	ldi	r24, 0x00	; 0
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6596:	41 c0       	rjmp	.+130    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
    6598:	28 e1       	ldi	r18, 0x18	; 24
    659a:	34 e1       	ldi	r19, 0x14	; 20
    659c:	42 e1       	ldi	r20, 0x12	; 18
    659e:	5f e7       	ldi	r21, 0x7F	; 127
    65a0:	60 e1       	ldi	r22, 0x10	; 16
    65a2:	70 e0       	ldi	r23, 0x00	; 0
    65a4:	80 e0       	ldi	r24, 0x00	; 0
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    65ac:	36 c0       	rjmp	.+108    	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
    65ae:	2f e4       	ldi	r18, 0x4F	; 79
    65b0:	39 e4       	ldi	r19, 0x49	; 73
    65b2:	49 e4       	ldi	r20, 0x49	; 73
    65b4:	51 e5       	ldi	r21, 0x51	; 81
    65b6:	61 e2       	ldi	r22, 0x21	; 33
    65b8:	70 e0       	ldi	r23, 0x00	; 0
    65ba:	80 e0       	ldi	r24, 0x00	; 0
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    65c2:	2b c0       	rjmp	.+86     	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
    65c4:	2c e7       	ldi	r18, 0x7C	; 124
    65c6:	3a e4       	ldi	r19, 0x4A	; 74
    65c8:	49 e4       	ldi	r20, 0x49	; 73
    65ca:	59 e4       	ldi	r21, 0x49	; 73
    65cc:	61 e3       	ldi	r22, 0x31	; 49
    65ce:	70 e0       	ldi	r23, 0x00	; 0
    65d0:	80 e0       	ldi	r24, 0x00	; 0
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    65d8:	20 c0       	rjmp	.+64     	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
    65da:	21 e0       	ldi	r18, 0x01	; 1
    65dc:	39 e4       	ldi	r19, 0x49	; 73
    65de:	49 e2       	ldi	r20, 0x29	; 41
    65e0:	59 e1       	ldi	r21, 0x19	; 25
    65e2:	6f e0       	ldi	r22, 0x0F	; 15
    65e4:	70 e0       	ldi	r23, 0x00	; 0
    65e6:	80 e0       	ldi	r24, 0x00	; 0
    65e8:	90 e0       	ldi	r25, 0x00	; 0
    65ea:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    65ee:	15 c0       	rjmp	.+42     	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
    65f0:	27 e7       	ldi	r18, 0x77	; 119
    65f2:	39 e4       	ldi	r19, 0x49	; 73
    65f4:	49 e4       	ldi	r20, 0x49	; 73
    65f6:	59 e4       	ldi	r21, 0x49	; 73
    65f8:	67 e7       	ldi	r22, 0x77	; 119
    65fa:	70 e0       	ldi	r23, 0x00	; 0
    65fc:	80 e0       	ldi	r24, 0x00	; 0
    65fe:	90 e0       	ldi	r25, 0x00	; 0
    6600:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
    6604:	0a c0       	rjmp	.+20     	; 0x661a <GLCD_DisplayCharacter+0x614>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
    6606:	2f e4       	ldi	r18, 0x4F	; 79
    6608:	39 e4       	ldi	r19, 0x49	; 73
    660a:	49 e4       	ldi	r20, 0x49	; 73
    660c:	59 e4       	ldi	r21, 0x49	; 73
    660e:	6f e7       	ldi	r22, 0x7F	; 127
    6610:	70 e0       	ldi	r23, 0x00	; 0
    6612:	80 e0       	ldi	r24, 0x00	; 0
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    661a:	80 91 f8 01 	lds	r24, 0x01F8
    661e:	88 54       	subi	r24, 0x48	; 72
    6620:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    6624:	80 91 f9 01 	lds	r24, 0x01F9
    6628:	80 5c       	subi	r24, 0xC0	; 192
    662a:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
		GLCD_SendData(0);
    662e:	80 e0       	ldi	r24, 0x00	; 0
    6630:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <GLCD_SendData>
		gu8_Curr_Y_Address++;
    6634:	80 91 f9 01 	lds	r24, 0x01F9
    6638:	8f 5f       	subi	r24, 0xFF	; 255
    663a:	80 93 f9 01 	sts	0x01F9, r24
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
    663e:	80 91 f9 01 	lds	r24, 0x01F9
    6642:	80 34       	cpi	r24, 0x40	; 64
    6644:	48 f0       	brcs	.+18     	; 0x6658 <GLCD_DisplayCharacter+0x652>
    6646:	80 91 fa 01 	lds	r24, 0x01FA
    664a:	88 23       	and	r24, r24
    664c:	29 f4       	brne	.+10     	; 0x6658 <GLCD_DisplayCharacter+0x652>
			GLCD_SelectPage(GLCD_PAGE_1);
    664e:	82 e0       	ldi	r24, 0x02	; 2
    6650:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
    6654:	10 92 f9 01 	sts	0x01F9, r1
		}
	}
}
    6658:	0f 90       	pop	r0
    665a:	0f 90       	pop	r0
    665c:	0f 90       	pop	r0
    665e:	0f 90       	pop	r0
    6660:	0f 90       	pop	r0
    6662:	cf 91       	pop	r28
    6664:	df 91       	pop	r29
    6666:	08 95       	ret

00006668 <GLCD_DisplayString>:

void GLCD_DisplayString(char* Data_Ptr) {
    6668:	df 93       	push	r29
    666a:	cf 93       	push	r28
    666c:	00 d0       	rcall	.+0      	; 0x666e <GLCD_DisplayString+0x6>
    666e:	cd b7       	in	r28, 0x3d	; 61
    6670:	de b7       	in	r29, 0x3e	; 62
    6672:	9a 83       	std	Y+2, r25	; 0x02
    6674:	89 83       	std	Y+1, r24	; 0x01
    6676:	0a c0       	rjmp	.+20     	; 0x668c <GLCD_DisplayString+0x24>
	while (*Data_Ptr != '\0') {	
		GLCD_DisplayCharacter(*Data_Ptr);
    6678:	e9 81       	ldd	r30, Y+1	; 0x01
    667a:	fa 81       	ldd	r31, Y+2	; 0x02
    667c:	80 81       	ld	r24, Z
    667e:	0e 94 03 30 	call	0x6006	; 0x6006 <GLCD_DisplayCharacter>
		Data_Ptr++;
    6682:	89 81       	ldd	r24, Y+1	; 0x01
    6684:	9a 81       	ldd	r25, Y+2	; 0x02
    6686:	01 96       	adiw	r24, 0x01	; 1
    6688:	9a 83       	std	Y+2, r25	; 0x02
    668a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
	while (*Data_Ptr != '\0') {	
    668c:	e9 81       	ldd	r30, Y+1	; 0x01
    668e:	fa 81       	ldd	r31, Y+2	; 0x02
    6690:	80 81       	ld	r24, Z
    6692:	88 23       	and	r24, r24
    6694:	89 f7       	brne	.-30     	; 0x6678 <GLCD_DisplayString+0x10>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
    6696:	0f 90       	pop	r0
    6698:	0f 90       	pop	r0
    669a:	cf 91       	pop	r28
    669c:	df 91       	pop	r29
    669e:	08 95       	ret

000066a0 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(sint32 Data) {
    66a0:	df 93       	push	r29
    66a2:	cf 93       	push	r28
    66a4:	cd b7       	in	r28, 0x3d	; 61
    66a6:	de b7       	in	r29, 0x3e	; 62
    66a8:	2c 97       	sbiw	r28, 0x0c	; 12
    66aa:	0f b6       	in	r0, 0x3f	; 63
    66ac:	f8 94       	cli
    66ae:	de bf       	out	0x3e, r29	; 62
    66b0:	0f be       	out	0x3f, r0	; 63
    66b2:	cd bf       	out	0x3d, r28	; 61
    66b4:	69 87       	std	Y+9, r22	; 0x09
    66b6:	7a 87       	std	Y+10, r23	; 0x0a
    66b8:	8b 87       	std	Y+11, r24	; 0x0b
    66ba:	9c 87       	std	Y+12, r25	; 0x0c
	if (Data < 0) {
    66bc:	89 85       	ldd	r24, Y+9	; 0x09
    66be:	9a 85       	ldd	r25, Y+10	; 0x0a
    66c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    66c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    66c4:	bb 23       	and	r27, r27
    66c6:	94 f4       	brge	.+36     	; 0x66ec <GLCD_DisplayInteger+0x4c>
		GLCD_DisplayCharacter('-');
    66c8:	8d e2       	ldi	r24, 0x2D	; 45
    66ca:	0e 94 03 30 	call	0x6006	; 0x6006 <GLCD_DisplayCharacter>
		Data = -1 * Data;
    66ce:	89 85       	ldd	r24, Y+9	; 0x09
    66d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    66d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    66d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    66d6:	b0 95       	com	r27
    66d8:	a0 95       	com	r26
    66da:	90 95       	com	r25
    66dc:	81 95       	neg	r24
    66de:	9f 4f       	sbci	r25, 0xFF	; 255
    66e0:	af 4f       	sbci	r26, 0xFF	; 255
    66e2:	bf 4f       	sbci	r27, 0xFF	; 255
    66e4:	89 87       	std	Y+9, r24	; 0x09
    66e6:	9a 87       	std	Y+10, r25	; 0x0a
    66e8:	ab 87       	std	Y+11, r26	; 0x0b
    66ea:	bc 87       	std	Y+12, r27	; 0x0c
	}
	uint8 u8Local_Digit = 0U;
    66ec:	1b 82       	std	Y+3, r1	; 0x03
	char str_reversed[5] = "";
    66ee:	1c 82       	std	Y+4, r1	; 0x04
    66f0:	1d 82       	std	Y+5, r1	; 0x05
    66f2:	1e 82       	std	Y+6, r1	; 0x06
    66f4:	1f 82       	std	Y+7, r1	; 0x07
    66f6:	18 86       	std	Y+8, r1	; 0x08
	char* str_ptr = str_reversed;
    66f8:	ce 01       	movw	r24, r28
    66fa:	04 96       	adiw	r24, 0x04	; 4
    66fc:	9a 83       	std	Y+2, r25	; 0x02
    66fe:	89 83       	std	Y+1, r24	; 0x01
	do {
		u8Local_Digit = Data%10;
    6700:	89 85       	ldd	r24, Y+9	; 0x09
    6702:	9a 85       	ldd	r25, Y+10	; 0x0a
    6704:	ab 85       	ldd	r26, Y+11	; 0x0b
    6706:	bc 85       	ldd	r27, Y+12	; 0x0c
    6708:	2a e0       	ldi	r18, 0x0A	; 10
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	40 e0       	ldi	r20, 0x00	; 0
    670e:	50 e0       	ldi	r21, 0x00	; 0
    6710:	bc 01       	movw	r22, r24
    6712:	cd 01       	movw	r24, r26
    6714:	0e 94 99 38 	call	0x7132	; 0x7132 <__divmodsi4>
    6718:	dc 01       	movw	r26, r24
    671a:	cb 01       	movw	r24, r22
    671c:	8b 83       	std	Y+3, r24	; 0x03
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
    671e:	8b 81       	ldd	r24, Y+3	; 0x03
    6720:	80 5d       	subi	r24, 0xD0	; 208
    6722:	e9 81       	ldd	r30, Y+1	; 0x01
    6724:	fa 81       	ldd	r31, Y+2	; 0x02
    6726:	80 83       	st	Z, r24
		Data = Data/10;
    6728:	89 85       	ldd	r24, Y+9	; 0x09
    672a:	9a 85       	ldd	r25, Y+10	; 0x0a
    672c:	ab 85       	ldd	r26, Y+11	; 0x0b
    672e:	bc 85       	ldd	r27, Y+12	; 0x0c
    6730:	2a e0       	ldi	r18, 0x0A	; 10
    6732:	30 e0       	ldi	r19, 0x00	; 0
    6734:	40 e0       	ldi	r20, 0x00	; 0
    6736:	50 e0       	ldi	r21, 0x00	; 0
    6738:	bc 01       	movw	r22, r24
    673a:	cd 01       	movw	r24, r26
    673c:	0e 94 99 38 	call	0x7132	; 0x7132 <__divmodsi4>
    6740:	da 01       	movw	r26, r20
    6742:	c9 01       	movw	r24, r18
    6744:	89 87       	std	Y+9, r24	; 0x09
    6746:	9a 87       	std	Y+10, r25	; 0x0a
    6748:	ab 87       	std	Y+11, r26	; 0x0b
    674a:	bc 87       	std	Y+12, r27	; 0x0c
		str_ptr++;
    674c:	89 81       	ldd	r24, Y+1	; 0x01
    674e:	9a 81       	ldd	r25, Y+2	; 0x02
    6750:	01 96       	adiw	r24, 0x01	; 1
    6752:	9a 83       	std	Y+2, r25	; 0x02
    6754:	89 83       	std	Y+1, r24	; 0x01
	} while (Data > 0);
    6756:	89 85       	ldd	r24, Y+9	; 0x09
    6758:	9a 85       	ldd	r25, Y+10	; 0x0a
    675a:	ab 85       	ldd	r26, Y+11	; 0x0b
    675c:	bc 85       	ldd	r27, Y+12	; 0x0c
    675e:	18 16       	cp	r1, r24
    6760:	19 06       	cpc	r1, r25
    6762:	1a 06       	cpc	r1, r26
    6764:	1b 06       	cpc	r1, r27
    6766:	64 f2       	brlt	.-104    	; 0x6700 <GLCD_DisplayInteger+0x60>
	do {
		str_ptr--;
    6768:	89 81       	ldd	r24, Y+1	; 0x01
    676a:	9a 81       	ldd	r25, Y+2	; 0x02
    676c:	01 97       	sbiw	r24, 0x01	; 1
    676e:	9a 83       	std	Y+2, r25	; 0x02
    6770:	89 83       	std	Y+1, r24	; 0x01
		GLCD_DisplayCharacter(*str_ptr);
    6772:	e9 81       	ldd	r30, Y+1	; 0x01
    6774:	fa 81       	ldd	r31, Y+2	; 0x02
    6776:	80 81       	ld	r24, Z
    6778:	0e 94 03 30 	call	0x6006	; 0x6006 <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
    677c:	9e 01       	movw	r18, r28
    677e:	2c 5f       	subi	r18, 0xFC	; 252
    6780:	3f 4f       	sbci	r19, 0xFF	; 255
    6782:	89 81       	ldd	r24, Y+1	; 0x01
    6784:	9a 81       	ldd	r25, Y+2	; 0x02
    6786:	82 17       	cp	r24, r18
    6788:	93 07       	cpc	r25, r19
    678a:	71 f7       	brne	.-36     	; 0x6768 <GLCD_DisplayInteger+0xc8>
}
    678c:	2c 96       	adiw	r28, 0x0c	; 12
    678e:	0f b6       	in	r0, 0x3f	; 63
    6790:	f8 94       	cli
    6792:	de bf       	out	0x3e, r29	; 62
    6794:	0f be       	out	0x3f, r0	; 63
    6796:	cd bf       	out	0x3d, r28	; 61
    6798:	cf 91       	pop	r28
    679a:	df 91       	pop	r29
    679c:	08 95       	ret

0000679e <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(float32 Data) {
    679e:	ef 92       	push	r14
    67a0:	ff 92       	push	r15
    67a2:	0f 93       	push	r16
    67a4:	1f 93       	push	r17
    67a6:	df 93       	push	r29
    67a8:	cf 93       	push	r28
    67aa:	cd b7       	in	r28, 0x3d	; 61
    67ac:	de b7       	in	r29, 0x3e	; 62
    67ae:	2c 97       	sbiw	r28, 0x0c	; 12
    67b0:	0f b6       	in	r0, 0x3f	; 63
    67b2:	f8 94       	cli
    67b4:	de bf       	out	0x3e, r29	; 62
    67b6:	0f be       	out	0x3f, r0	; 63
    67b8:	cd bf       	out	0x3d, r28	; 61
    67ba:	69 87       	std	Y+9, r22	; 0x09
    67bc:	7a 87       	std	Y+10, r23	; 0x0a
    67be:	8b 87       	std	Y+11, r24	; 0x0b
    67c0:	9c 87       	std	Y+12, r25	; 0x0c
	/* Will display only 3 Decimal Places */
	uint16 IntegerPart = (uint16)Data;
    67c2:	69 85       	ldd	r22, Y+9	; 0x09
    67c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    67c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    67c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    67ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    67ce:	dc 01       	movw	r26, r24
    67d0:	cb 01       	movw	r24, r22
    67d2:	98 87       	std	Y+8, r25	; 0x08
    67d4:	8f 83       	std	Y+7, r24	; 0x07
	GLCD_DisplayInteger(IntegerPart);
    67d6:	8f 81       	ldd	r24, Y+7	; 0x07
    67d8:	98 85       	ldd	r25, Y+8	; 0x08
    67da:	cc 01       	movw	r24, r24
    67dc:	a0 e0       	ldi	r26, 0x00	; 0
    67de:	b0 e0       	ldi	r27, 0x00	; 0
    67e0:	bc 01       	movw	r22, r24
    67e2:	cd 01       	movw	r24, r26
    67e4:	0e 94 50 33 	call	0x66a0	; 0x66a0 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
    67e8:	8e e2       	ldi	r24, 0x2E	; 46
    67ea:	0e 94 03 30 	call	0x6006	; 0x6006 <GLCD_DisplayCharacter>
	float32 DecimalPart = (Data - IntegerPart);
    67ee:	8f 81       	ldd	r24, Y+7	; 0x07
    67f0:	98 85       	ldd	r25, Y+8	; 0x08
    67f2:	cc 01       	movw	r24, r24
    67f4:	a0 e0       	ldi	r26, 0x00	; 0
    67f6:	b0 e0       	ldi	r27, 0x00	; 0
    67f8:	bc 01       	movw	r22, r24
    67fa:	cd 01       	movw	r24, r26
    67fc:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    6800:	9b 01       	movw	r18, r22
    6802:	ac 01       	movw	r20, r24
    6804:	69 85       	ldd	r22, Y+9	; 0x09
    6806:	7a 85       	ldd	r23, Y+10	; 0x0a
    6808:	8b 85       	ldd	r24, Y+11	; 0x0b
    680a:	9c 85       	ldd	r25, Y+12	; 0x0c
    680c:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    6810:	dc 01       	movw	r26, r24
    6812:	cb 01       	movw	r24, r22
    6814:	8b 83       	std	Y+3, r24	; 0x03
    6816:	9c 83       	std	Y+4, r25	; 0x04
    6818:	ad 83       	std	Y+5, r26	; 0x05
    681a:	be 83       	std	Y+6, r27	; 0x06
	uint8 Digit = 0;
    681c:	1a 82       	std	Y+2, r1	; 0x02
	for (uint8 i = 0; i < 3; i++) {
    681e:	19 82       	std	Y+1, r1	; 0x01
    6820:	3f c0       	rjmp	.+126    	; 0x68a0 <GLCD_DisplayFloatingPoint+0x102>
		Digit = (uint8)(DecimalPart * 10.0);
    6822:	6b 81       	ldd	r22, Y+3	; 0x03
    6824:	7c 81       	ldd	r23, Y+4	; 0x04
    6826:	8d 81       	ldd	r24, Y+5	; 0x05
    6828:	9e 81       	ldd	r25, Y+6	; 0x06
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	40 e2       	ldi	r20, 0x20	; 32
    6830:	51 e4       	ldi	r21, 0x41	; 65
    6832:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    6836:	dc 01       	movw	r26, r24
    6838:	cb 01       	movw	r24, r22
    683a:	bc 01       	movw	r22, r24
    683c:	cd 01       	movw	r24, r26
    683e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	8a 83       	std	Y+2, r24	; 0x02
		GLCD_DisplayCharacter((char)(48+Digit));
    6848:	8a 81       	ldd	r24, Y+2	; 0x02
    684a:	80 5d       	subi	r24, 0xD0	; 208
    684c:	0e 94 03 30 	call	0x6006	; 0x6006 <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
    6850:	6b 81       	ldd	r22, Y+3	; 0x03
    6852:	7c 81       	ldd	r23, Y+4	; 0x04
    6854:	8d 81       	ldd	r24, Y+5	; 0x05
    6856:	9e 81       	ldd	r25, Y+6	; 0x06
    6858:	20 e0       	ldi	r18, 0x00	; 0
    685a:	30 e0       	ldi	r19, 0x00	; 0
    685c:	40 e2       	ldi	r20, 0x20	; 32
    685e:	51 e4       	ldi	r21, 0x41	; 65
    6860:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    6864:	dc 01       	movw	r26, r24
    6866:	cb 01       	movw	r24, r22
    6868:	7c 01       	movw	r14, r24
    686a:	8d 01       	movw	r16, r26
    686c:	8a 81       	ldd	r24, Y+2	; 0x02
    686e:	88 2f       	mov	r24, r24
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	aa 27       	eor	r26, r26
    6874:	97 fd       	sbrc	r25, 7
    6876:	a0 95       	com	r26
    6878:	ba 2f       	mov	r27, r26
    687a:	bc 01       	movw	r22, r24
    687c:	cd 01       	movw	r24, r26
    687e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    6882:	9b 01       	movw	r18, r22
    6884:	ac 01       	movw	r20, r24
    6886:	c8 01       	movw	r24, r16
    6888:	b7 01       	movw	r22, r14
    688a:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    688e:	dc 01       	movw	r26, r24
    6890:	cb 01       	movw	r24, r22
    6892:	8b 83       	std	Y+3, r24	; 0x03
    6894:	9c 83       	std	Y+4, r25	; 0x04
    6896:	ad 83       	std	Y+5, r26	; 0x05
    6898:	be 83       	std	Y+6, r27	; 0x06
	uint16 IntegerPart = (uint16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	float32 DecimalPart = (Data - IntegerPart);
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
    689a:	89 81       	ldd	r24, Y+1	; 0x01
    689c:	8f 5f       	subi	r24, 0xFF	; 255
    689e:	89 83       	std	Y+1, r24	; 0x01
    68a0:	89 81       	ldd	r24, Y+1	; 0x01
    68a2:	83 30       	cpi	r24, 0x03	; 3
    68a4:	08 f4       	brcc	.+2      	; 0x68a8 <GLCD_DisplayFloatingPoint+0x10a>
    68a6:	bd cf       	rjmp	.-134    	; 0x6822 <GLCD_DisplayFloatingPoint+0x84>
		Digit = (uint8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
    68a8:	2c 96       	adiw	r28, 0x0c	; 12
    68aa:	0f b6       	in	r0, 0x3f	; 63
    68ac:	f8 94       	cli
    68ae:	de bf       	out	0x3e, r29	; 62
    68b0:	0f be       	out	0x3f, r0	; 63
    68b2:	cd bf       	out	0x3d, r28	; 61
    68b4:	cf 91       	pop	r28
    68b6:	df 91       	pop	r29
    68b8:	1f 91       	pop	r17
    68ba:	0f 91       	pop	r16
    68bc:	ff 90       	pop	r15
    68be:	ef 90       	pop	r14
    68c0:	08 95       	ret

000068c2 <GLCD_GoToLine>:

void GLCD_GoToLine(uint8 Line) {
    68c2:	df 93       	push	r29
    68c4:	cf 93       	push	r28
    68c6:	0f 92       	push	r0
    68c8:	cd b7       	in	r28, 0x3d	; 61
    68ca:	de b7       	in	r29, 0x3e	; 62
    68cc:	89 83       	std	Y+1, r24	; 0x01
	if (Line < GLCD_MAX_LINES) {
    68ce:	89 81       	ldd	r24, Y+1	; 0x01
    68d0:	88 30       	cpi	r24, 0x08	; 8
    68d2:	90 f4       	brcc	.+36     	; 0x68f8 <GLCD_GoToLine+0x36>
		GLCD_SelectPage(GLCD_PAGE_0);
    68d4:	81 e0       	ldi	r24, 0x01	; 1
    68d6:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
		gu8_Curr_X_Address = Line;
    68da:	89 81       	ldd	r24, Y+1	; 0x01
    68dc:	80 93 f8 01 	sts	0x01F8, r24
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    68e0:	80 91 f8 01 	lds	r24, 0x01F8
    68e4:	88 54       	subi	r24, 0x48	; 72
    68e6:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
		gu8_Curr_Y_Address = 0;
    68ea:	10 92 f9 01 	sts	0x01F9, r1
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    68ee:	80 91 f9 01 	lds	r24, 0x01F9
    68f2:	80 5c       	subi	r24, 0xC0	; 192
    68f4:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
	}
}
    68f8:	0f 90       	pop	r0
    68fa:	cf 91       	pop	r28
    68fc:	df 91       	pop	r29
    68fe:	08 95       	ret

00006900 <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
    6900:	df 93       	push	r29
    6902:	cf 93       	push	r28
    6904:	00 d0       	rcall	.+0      	; 0x6906 <GLCD_ClearDisplay+0x6>
    6906:	cd b7       	in	r28, 0x3d	; 61
    6908:	de b7       	in	r29, 0x3e	; 62
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    690a:	1a 82       	std	Y+2, r1	; 0x02
    690c:	18 c0       	rjmp	.+48     	; 0x693e <GLCD_ClearDisplay+0x3e>
		GLCD_GoToLine(Line);
    690e:	8a 81       	ldd	r24, Y+2	; 0x02
    6910:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
    6914:	83 e0       	ldi	r24, 0x03	; 3
    6916:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    691a:	19 82       	std	Y+1, r1	; 0x01
    691c:	0a c0       	rjmp	.+20     	; 0x6932 <GLCD_ClearDisplay+0x32>
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
    691e:	89 81       	ldd	r24, Y+1	; 0x01
    6920:	80 5c       	subi	r24, 0xC0	; 192
    6922:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <GLCD_SendInstruction>
			GLCD_SendData(0);
    6926:	80 e0       	ldi	r24, 0x00	; 0
    6928:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    692c:	89 81       	ldd	r24, Y+1	; 0x01
    692e:	8f 5f       	subi	r24, 0xFF	; 255
    6930:	89 83       	std	Y+1, r24	; 0x01
    6932:	89 81       	ldd	r24, Y+1	; 0x01
    6934:	80 34       	cpi	r24, 0x40	; 64
    6936:	98 f3       	brcs	.-26     	; 0x691e <GLCD_ClearDisplay+0x1e>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    6938:	8a 81       	ldd	r24, Y+2	; 0x02
    693a:	8f 5f       	subi	r24, 0xFF	; 255
    693c:	8a 83       	std	Y+2, r24	; 0x02
    693e:	8a 81       	ldd	r24, Y+2	; 0x02
    6940:	88 30       	cpi	r24, 0x08	; 8
    6942:	28 f3       	brcs	.-54     	; 0x690e <GLCD_ClearDisplay+0xe>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
    6944:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
    6948:	81 e0       	ldi	r24, 0x01	; 1
    694a:	0e 94 85 2c 	call	0x590a	; 0x590a <GLCD_SelectPage>
	gu8_Curr_Page = 0;
    694e:	10 92 fa 01 	sts	0x01FA, r1
	GLCD_GoToLine(0);
    6952:	80 e0       	ldi	r24, 0x00	; 0
    6954:	0e 94 61 34 	call	0x68c2	; 0x68c2 <GLCD_GoToLine>
}
    6958:	0f 90       	pop	r0
    695a:	0f 90       	pop	r0
    695c:	cf 91       	pop	r28
    695e:	df 91       	pop	r29
    6960:	08 95       	ret

00006962 <DIO_ObtainRegister>:
	DIO_DIRECTION_REG,
	DIO_OUTPUT_REG,
	DIO_INPUT_REG
}DIO_RegisterType;

static volatile uint8* DIO_ObtainRegister(DIO_PortType Port, DIO_RegisterType Reg) {
    6962:	df 93       	push	r29
    6964:	cf 93       	push	r28
    6966:	cd b7       	in	r28, 0x3d	; 61
    6968:	de b7       	in	r29, 0x3e	; 62
    696a:	2e 97       	sbiw	r28, 0x0e	; 14
    696c:	0f b6       	in	r0, 0x3f	; 63
    696e:	f8 94       	cli
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	0f be       	out	0x3f, r0	; 63
    6974:	cd bf       	out	0x3d, r28	; 61
    6976:	89 83       	std	Y+1, r24	; 0x01
    6978:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
    697a:	89 81       	ldd	r24, Y+1	; 0x01
    697c:	28 2f       	mov	r18, r24
    697e:	30 e0       	ldi	r19, 0x00	; 0
    6980:	3e 87       	std	Y+14, r19	; 0x0e
    6982:	2d 87       	std	Y+13, r18	; 0x0d
    6984:	8d 85       	ldd	r24, Y+13	; 0x0d
    6986:	9e 85       	ldd	r25, Y+14	; 0x0e
    6988:	81 30       	cpi	r24, 0x01	; 1
    698a:	91 05       	cpc	r25, r1
    698c:	d1 f1       	breq	.+116    	; 0x6a02 <DIO_ObtainRegister+0xa0>
    698e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6990:	3e 85       	ldd	r19, Y+14	; 0x0e
    6992:	22 30       	cpi	r18, 0x02	; 2
    6994:	31 05       	cpc	r19, r1
    6996:	2c f4       	brge	.+10     	; 0x69a2 <DIO_ObtainRegister+0x40>
    6998:	8d 85       	ldd	r24, Y+13	; 0x0d
    699a:	9e 85       	ldd	r25, Y+14	; 0x0e
    699c:	00 97       	sbiw	r24, 0x00	; 0
    699e:	71 f0       	breq	.+28     	; 0x69bc <DIO_ObtainRegister+0x5a>
    69a0:	97 c0       	rjmp	.+302    	; 0x6ad0 <DIO_ObtainRegister+0x16e>
    69a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    69a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    69a6:	22 30       	cpi	r18, 0x02	; 2
    69a8:	31 05       	cpc	r19, r1
    69aa:	09 f4       	brne	.+2      	; 0x69ae <DIO_ObtainRegister+0x4c>
    69ac:	4d c0       	rjmp	.+154    	; 0x6a48 <DIO_ObtainRegister+0xe6>
    69ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    69b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    69b2:	83 30       	cpi	r24, 0x03	; 3
    69b4:	91 05       	cpc	r25, r1
    69b6:	09 f4       	brne	.+2      	; 0x69ba <DIO_ObtainRegister+0x58>
    69b8:	69 c0       	rjmp	.+210    	; 0x6a8c <DIO_ObtainRegister+0x12a>
    69ba:	8a c0       	rjmp	.+276    	; 0x6ad0 <DIO_ObtainRegister+0x16e>
		case DIO_PORT_A: 
			switch (Reg) {
    69bc:	8a 81       	ldd	r24, Y+2	; 0x02
    69be:	28 2f       	mov	r18, r24
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	3c 87       	std	Y+12, r19	; 0x0c
    69c4:	2b 87       	std	Y+11, r18	; 0x0b
    69c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    69c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    69ca:	81 30       	cpi	r24, 0x01	; 1
    69cc:	91 05       	cpc	r25, r1
    69ce:	79 f0       	breq	.+30     	; 0x69ee <DIO_ObtainRegister+0x8c>
    69d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    69d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    69d4:	22 30       	cpi	r18, 0x02	; 2
    69d6:	31 05       	cpc	r19, r1
    69d8:	79 f0       	breq	.+30     	; 0x69f8 <DIO_ObtainRegister+0x96>
    69da:	8b 85       	ldd	r24, Y+11	; 0x0b
    69dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    69de:	00 97       	sbiw	r24, 0x00	; 0
    69e0:	09 f0       	breq	.+2      	; 0x69e4 <DIO_ObtainRegister+0x82>
    69e2:	76 c0       	rjmp	.+236    	; 0x6ad0 <DIO_ObtainRegister+0x16e>
			case DIO_DIRECTION_REG: return PORTA_DIR_REG;
    69e4:	2a e3       	ldi	r18, 0x3A	; 58
    69e6:	30 e0       	ldi	r19, 0x00	; 0
    69e8:	3a 87       	std	Y+10, r19	; 0x0a
    69ea:	29 87       	std	Y+9, r18	; 0x09
    69ec:	73 c0       	rjmp	.+230    	; 0x6ad4 <DIO_ObtainRegister+0x172>
			case DIO_OUTPUT_REG: return PORTA_OUT_REG;
    69ee:	8b e3       	ldi	r24, 0x3B	; 59
    69f0:	90 e0       	ldi	r25, 0x00	; 0
    69f2:	9a 87       	std	Y+10, r25	; 0x0a
    69f4:	89 87       	std	Y+9, r24	; 0x09
    69f6:	6e c0       	rjmp	.+220    	; 0x6ad4 <DIO_ObtainRegister+0x172>
			case DIO_INPUT_REG: return PORTA_INP_REG;
    69f8:	29 e3       	ldi	r18, 0x39	; 57
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	3a 87       	std	Y+10, r19	; 0x0a
    69fe:	29 87       	std	Y+9, r18	; 0x09
    6a00:	69 c0       	rjmp	.+210    	; 0x6ad4 <DIO_ObtainRegister+0x172>
			default: break;
			}
			break;
		case DIO_PORT_B: 
			switch (Reg) {
    6a02:	8a 81       	ldd	r24, Y+2	; 0x02
    6a04:	28 2f       	mov	r18, r24
    6a06:	30 e0       	ldi	r19, 0x00	; 0
    6a08:	38 87       	std	Y+8, r19	; 0x08
    6a0a:	2f 83       	std	Y+7, r18	; 0x07
    6a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    6a0e:	98 85       	ldd	r25, Y+8	; 0x08
    6a10:	81 30       	cpi	r24, 0x01	; 1
    6a12:	91 05       	cpc	r25, r1
    6a14:	79 f0       	breq	.+30     	; 0x6a34 <DIO_ObtainRegister+0xd2>
    6a16:	2f 81       	ldd	r18, Y+7	; 0x07
    6a18:	38 85       	ldd	r19, Y+8	; 0x08
    6a1a:	22 30       	cpi	r18, 0x02	; 2
    6a1c:	31 05       	cpc	r19, r1
    6a1e:	79 f0       	breq	.+30     	; 0x6a3e <DIO_ObtainRegister+0xdc>
    6a20:	8f 81       	ldd	r24, Y+7	; 0x07
    6a22:	98 85       	ldd	r25, Y+8	; 0x08
    6a24:	00 97       	sbiw	r24, 0x00	; 0
    6a26:	09 f0       	breq	.+2      	; 0x6a2a <DIO_ObtainRegister+0xc8>
    6a28:	53 c0       	rjmp	.+166    	; 0x6ad0 <DIO_ObtainRegister+0x16e>
				case DIO_DIRECTION_REG: return PORTB_DIR_REG;
    6a2a:	27 e3       	ldi	r18, 0x37	; 55
    6a2c:	30 e0       	ldi	r19, 0x00	; 0
    6a2e:	3a 87       	std	Y+10, r19	; 0x0a
    6a30:	29 87       	std	Y+9, r18	; 0x09
    6a32:	50 c0       	rjmp	.+160    	; 0x6ad4 <DIO_ObtainRegister+0x172>
				case DIO_OUTPUT_REG: return PORTB_OUT_REG;
    6a34:	88 e3       	ldi	r24, 0x38	; 56
    6a36:	90 e0       	ldi	r25, 0x00	; 0
    6a38:	9a 87       	std	Y+10, r25	; 0x0a
    6a3a:	89 87       	std	Y+9, r24	; 0x09
    6a3c:	4b c0       	rjmp	.+150    	; 0x6ad4 <DIO_ObtainRegister+0x172>
				case DIO_INPUT_REG: return PORTB_INP_REG;
    6a3e:	26 e3       	ldi	r18, 0x36	; 54
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	3a 87       	std	Y+10, r19	; 0x0a
    6a44:	29 87       	std	Y+9, r18	; 0x09
    6a46:	46 c0       	rjmp	.+140    	; 0x6ad4 <DIO_ObtainRegister+0x172>
				default: break;
			}
			break;
		case DIO_PORT_C: 
			switch (Reg) {
    6a48:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4a:	28 2f       	mov	r18, r24
    6a4c:	30 e0       	ldi	r19, 0x00	; 0
    6a4e:	3e 83       	std	Y+6, r19	; 0x06
    6a50:	2d 83       	std	Y+5, r18	; 0x05
    6a52:	8d 81       	ldd	r24, Y+5	; 0x05
    6a54:	9e 81       	ldd	r25, Y+6	; 0x06
    6a56:	81 30       	cpi	r24, 0x01	; 1
    6a58:	91 05       	cpc	r25, r1
    6a5a:	71 f0       	breq	.+28     	; 0x6a78 <DIO_ObtainRegister+0x116>
    6a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    6a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    6a60:	22 30       	cpi	r18, 0x02	; 2
    6a62:	31 05       	cpc	r19, r1
    6a64:	71 f0       	breq	.+28     	; 0x6a82 <DIO_ObtainRegister+0x120>
    6a66:	8d 81       	ldd	r24, Y+5	; 0x05
    6a68:	9e 81       	ldd	r25, Y+6	; 0x06
    6a6a:	00 97       	sbiw	r24, 0x00	; 0
    6a6c:	89 f5       	brne	.+98     	; 0x6ad0 <DIO_ObtainRegister+0x16e>
				case DIO_DIRECTION_REG: return PORTC_DIR_REG;
    6a6e:	24 e3       	ldi	r18, 0x34	; 52
    6a70:	30 e0       	ldi	r19, 0x00	; 0
    6a72:	3a 87       	std	Y+10, r19	; 0x0a
    6a74:	29 87       	std	Y+9, r18	; 0x09
    6a76:	2e c0       	rjmp	.+92     	; 0x6ad4 <DIO_ObtainRegister+0x172>
				case DIO_OUTPUT_REG: return PORTC_OUT_REG;
    6a78:	85 e3       	ldi	r24, 0x35	; 53
    6a7a:	90 e0       	ldi	r25, 0x00	; 0
    6a7c:	9a 87       	std	Y+10, r25	; 0x0a
    6a7e:	89 87       	std	Y+9, r24	; 0x09
    6a80:	29 c0       	rjmp	.+82     	; 0x6ad4 <DIO_ObtainRegister+0x172>
				case DIO_INPUT_REG: return PORTC_INP_REG;
    6a82:	23 e3       	ldi	r18, 0x33	; 51
    6a84:	30 e0       	ldi	r19, 0x00	; 0
    6a86:	3a 87       	std	Y+10, r19	; 0x0a
    6a88:	29 87       	std	Y+9, r18	; 0x09
    6a8a:	24 c0       	rjmp	.+72     	; 0x6ad4 <DIO_ObtainRegister+0x172>
				default: break;
			}
			break;
		case DIO_PORT_D: 
			switch (Reg) {
    6a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a8e:	28 2f       	mov	r18, r24
    6a90:	30 e0       	ldi	r19, 0x00	; 0
    6a92:	3c 83       	std	Y+4, r19	; 0x04
    6a94:	2b 83       	std	Y+3, r18	; 0x03
    6a96:	8b 81       	ldd	r24, Y+3	; 0x03
    6a98:	9c 81       	ldd	r25, Y+4	; 0x04
    6a9a:	81 30       	cpi	r24, 0x01	; 1
    6a9c:	91 05       	cpc	r25, r1
    6a9e:	71 f0       	breq	.+28     	; 0x6abc <DIO_ObtainRegister+0x15a>
    6aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    6aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    6aa4:	22 30       	cpi	r18, 0x02	; 2
    6aa6:	31 05       	cpc	r19, r1
    6aa8:	71 f0       	breq	.+28     	; 0x6ac6 <DIO_ObtainRegister+0x164>
    6aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    6aac:	9c 81       	ldd	r25, Y+4	; 0x04
    6aae:	00 97       	sbiw	r24, 0x00	; 0
    6ab0:	79 f4       	brne	.+30     	; 0x6ad0 <DIO_ObtainRegister+0x16e>
				case DIO_DIRECTION_REG: return PORTD_DIR_REG;
    6ab2:	21 e3       	ldi	r18, 0x31	; 49
    6ab4:	30 e0       	ldi	r19, 0x00	; 0
    6ab6:	3a 87       	std	Y+10, r19	; 0x0a
    6ab8:	29 87       	std	Y+9, r18	; 0x09
    6aba:	0c c0       	rjmp	.+24     	; 0x6ad4 <DIO_ObtainRegister+0x172>
				case DIO_OUTPUT_REG: return PORTD_OUT_REG;
    6abc:	82 e3       	ldi	r24, 0x32	; 50
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	9a 87       	std	Y+10, r25	; 0x0a
    6ac2:	89 87       	std	Y+9, r24	; 0x09
    6ac4:	07 c0       	rjmp	.+14     	; 0x6ad4 <DIO_ObtainRegister+0x172>
				case DIO_INPUT_REG: return PORTD_INP_REG;
    6ac6:	20 e3       	ldi	r18, 0x30	; 48
    6ac8:	30 e0       	ldi	r19, 0x00	; 0
    6aca:	3a 87       	std	Y+10, r19	; 0x0a
    6acc:	29 87       	std	Y+9, r18	; 0x09
    6ace:	02 c0       	rjmp	.+4      	; 0x6ad4 <DIO_ObtainRegister+0x172>
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
    6ad0:	1a 86       	std	Y+10, r1	; 0x0a
    6ad2:	19 86       	std	Y+9, r1	; 0x09
    6ad4:	89 85       	ldd	r24, Y+9	; 0x09
    6ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    6ad8:	2e 96       	adiw	r28, 0x0e	; 14
    6ada:	0f b6       	in	r0, 0x3f	; 63
    6adc:	f8 94       	cli
    6ade:	de bf       	out	0x3e, r29	; 62
    6ae0:	0f be       	out	0x3f, r0	; 63
    6ae2:	cd bf       	out	0x3d, r28	; 61
    6ae4:	cf 91       	pop	r28
    6ae6:	df 91       	pop	r29
    6ae8:	08 95       	ret

00006aea <DIO_SetPinDirection>:

void DIO_SetPinDirection(DIO_PortType Port, DIO_PinType Pin, DIO_DirectionType Direction) {
    6aea:	df 93       	push	r29
    6aec:	cf 93       	push	r28
    6aee:	cd b7       	in	r28, 0x3d	; 61
    6af0:	de b7       	in	r29, 0x3e	; 62
    6af2:	27 97       	sbiw	r28, 0x07	; 7
    6af4:	0f b6       	in	r0, 0x3f	; 63
    6af6:	f8 94       	cli
    6af8:	de bf       	out	0x3e, r29	; 62
    6afa:	0f be       	out	0x3f, r0	; 63
    6afc:	cd bf       	out	0x3d, r28	; 61
    6afe:	8b 83       	std	Y+3, r24	; 0x03
    6b00:	6c 83       	std	Y+4, r22	; 0x04
    6b02:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    6b04:	8b 81       	ldd	r24, Y+3	; 0x03
    6b06:	60 e0       	ldi	r22, 0x00	; 0
    6b08:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6b0c:	9a 83       	std	Y+2, r25	; 0x02
    6b0e:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    6b10:	8d 81       	ldd	r24, Y+5	; 0x05
    6b12:	28 2f       	mov	r18, r24
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	3f 83       	std	Y+7, r19	; 0x07
    6b18:	2e 83       	std	Y+6, r18	; 0x06
    6b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    6b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    6b1e:	00 97       	sbiw	r24, 0x00	; 0
    6b20:	31 f0       	breq	.+12     	; 0x6b2e <DIO_SetPinDirection+0x44>
    6b22:	2e 81       	ldd	r18, Y+6	; 0x06
    6b24:	3f 81       	ldd	r19, Y+7	; 0x07
    6b26:	21 30       	cpi	r18, 0x01	; 1
    6b28:	31 05       	cpc	r19, r1
    6b2a:	a9 f0       	breq	.+42     	; 0x6b56 <DIO_SetPinDirection+0x6c>
    6b2c:	26 c0       	rjmp	.+76     	; 0x6b7a <DIO_SetPinDirection+0x90>
		case DIO_INPUT: CLEAR_BIT(*Reg_Ptr, Pin); break;
    6b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    6b30:	fa 81       	ldd	r31, Y+2	; 0x02
    6b32:	40 81       	ld	r20, Z
    6b34:	8c 81       	ldd	r24, Y+4	; 0x04
    6b36:	28 2f       	mov	r18, r24
    6b38:	30 e0       	ldi	r19, 0x00	; 0
    6b3a:	81 e0       	ldi	r24, 0x01	; 1
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	02 2e       	mov	r0, r18
    6b40:	02 c0       	rjmp	.+4      	; 0x6b46 <DIO_SetPinDirection+0x5c>
    6b42:	88 0f       	add	r24, r24
    6b44:	99 1f       	adc	r25, r25
    6b46:	0a 94       	dec	r0
    6b48:	e2 f7       	brpl	.-8      	; 0x6b42 <DIO_SetPinDirection+0x58>
    6b4a:	80 95       	com	r24
    6b4c:	84 23       	and	r24, r20
    6b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    6b50:	fa 81       	ldd	r31, Y+2	; 0x02
    6b52:	80 83       	st	Z, r24
    6b54:	12 c0       	rjmp	.+36     	; 0x6b7a <DIO_SetPinDirection+0x90>
		case DIO_OUTPUT: SET_BIT(*Reg_Ptr, Pin); break;
    6b56:	e9 81       	ldd	r30, Y+1	; 0x01
    6b58:	fa 81       	ldd	r31, Y+2	; 0x02
    6b5a:	40 81       	ld	r20, Z
    6b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b5e:	28 2f       	mov	r18, r24
    6b60:	30 e0       	ldi	r19, 0x00	; 0
    6b62:	81 e0       	ldi	r24, 0x01	; 1
    6b64:	90 e0       	ldi	r25, 0x00	; 0
    6b66:	02 2e       	mov	r0, r18
    6b68:	02 c0       	rjmp	.+4      	; 0x6b6e <DIO_SetPinDirection+0x84>
    6b6a:	88 0f       	add	r24, r24
    6b6c:	99 1f       	adc	r25, r25
    6b6e:	0a 94       	dec	r0
    6b70:	e2 f7       	brpl	.-8      	; 0x6b6a <DIO_SetPinDirection+0x80>
    6b72:	84 2b       	or	r24, r20
    6b74:	e9 81       	ldd	r30, Y+1	; 0x01
    6b76:	fa 81       	ldd	r31, Y+2	; 0x02
    6b78:	80 83       	st	Z, r24
		default: break;
	}
}
    6b7a:	27 96       	adiw	r28, 0x07	; 7
    6b7c:	0f b6       	in	r0, 0x3f	; 63
    6b7e:	f8 94       	cli
    6b80:	de bf       	out	0x3e, r29	; 62
    6b82:	0f be       	out	0x3f, r0	; 63
    6b84:	cd bf       	out	0x3d, r28	; 61
    6b86:	cf 91       	pop	r28
    6b88:	df 91       	pop	r29
    6b8a:	08 95       	ret

00006b8c <DIO_WritePin>:

void DIO_WritePin(DIO_PortType Port, DIO_PinType Pin, DIO_StateType State) {
    6b8c:	df 93       	push	r29
    6b8e:	cf 93       	push	r28
    6b90:	cd b7       	in	r28, 0x3d	; 61
    6b92:	de b7       	in	r29, 0x3e	; 62
    6b94:	27 97       	sbiw	r28, 0x07	; 7
    6b96:	0f b6       	in	r0, 0x3f	; 63
    6b98:	f8 94       	cli
    6b9a:	de bf       	out	0x3e, r29	; 62
    6b9c:	0f be       	out	0x3f, r0	; 63
    6b9e:	cd bf       	out	0x3d, r28	; 61
    6ba0:	8b 83       	std	Y+3, r24	; 0x03
    6ba2:	6c 83       	std	Y+4, r22	; 0x04
    6ba4:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    6ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ba8:	61 e0       	ldi	r22, 0x01	; 1
    6baa:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6bae:	9a 83       	std	Y+2, r25	; 0x02
    6bb0:	89 83       	std	Y+1, r24	; 0x01
	switch (State) {
    6bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    6bb4:	28 2f       	mov	r18, r24
    6bb6:	30 e0       	ldi	r19, 0x00	; 0
    6bb8:	3f 83       	std	Y+7, r19	; 0x07
    6bba:	2e 83       	std	Y+6, r18	; 0x06
    6bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    6bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    6bc0:	00 97       	sbiw	r24, 0x00	; 0
    6bc2:	31 f0       	breq	.+12     	; 0x6bd0 <DIO_WritePin+0x44>
    6bc4:	2e 81       	ldd	r18, Y+6	; 0x06
    6bc6:	3f 81       	ldd	r19, Y+7	; 0x07
    6bc8:	21 30       	cpi	r18, 0x01	; 1
    6bca:	31 05       	cpc	r19, r1
    6bcc:	a9 f0       	breq	.+42     	; 0x6bf8 <DIO_WritePin+0x6c>
    6bce:	26 c0       	rjmp	.+76     	; 0x6c1c <DIO_WritePin+0x90>
		case DIO_LOW: CLEAR_BIT(*Reg_Ptr, Pin); break;
    6bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    6bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    6bd4:	40 81       	ld	r20, Z
    6bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    6bd8:	28 2f       	mov	r18, r24
    6bda:	30 e0       	ldi	r19, 0x00	; 0
    6bdc:	81 e0       	ldi	r24, 0x01	; 1
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	02 2e       	mov	r0, r18
    6be2:	02 c0       	rjmp	.+4      	; 0x6be8 <DIO_WritePin+0x5c>
    6be4:	88 0f       	add	r24, r24
    6be6:	99 1f       	adc	r25, r25
    6be8:	0a 94       	dec	r0
    6bea:	e2 f7       	brpl	.-8      	; 0x6be4 <DIO_WritePin+0x58>
    6bec:	80 95       	com	r24
    6bee:	84 23       	and	r24, r20
    6bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    6bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    6bf4:	80 83       	st	Z, r24
    6bf6:	12 c0       	rjmp	.+36     	; 0x6c1c <DIO_WritePin+0x90>
		case DIO_HIGH: SET_BIT(*Reg_Ptr, Pin); break;
    6bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    6bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    6bfc:	40 81       	ld	r20, Z
    6bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    6c00:	28 2f       	mov	r18, r24
    6c02:	30 e0       	ldi	r19, 0x00	; 0
    6c04:	81 e0       	ldi	r24, 0x01	; 1
    6c06:	90 e0       	ldi	r25, 0x00	; 0
    6c08:	02 2e       	mov	r0, r18
    6c0a:	02 c0       	rjmp	.+4      	; 0x6c10 <DIO_WritePin+0x84>
    6c0c:	88 0f       	add	r24, r24
    6c0e:	99 1f       	adc	r25, r25
    6c10:	0a 94       	dec	r0
    6c12:	e2 f7       	brpl	.-8      	; 0x6c0c <DIO_WritePin+0x80>
    6c14:	84 2b       	or	r24, r20
    6c16:	e9 81       	ldd	r30, Y+1	; 0x01
    6c18:	fa 81       	ldd	r31, Y+2	; 0x02
    6c1a:	80 83       	st	Z, r24
		default: break;
	}
}
    6c1c:	27 96       	adiw	r28, 0x07	; 7
    6c1e:	0f b6       	in	r0, 0x3f	; 63
    6c20:	f8 94       	cli
    6c22:	de bf       	out	0x3e, r29	; 62
    6c24:	0f be       	out	0x3f, r0	; 63
    6c26:	cd bf       	out	0x3d, r28	; 61
    6c28:	cf 91       	pop	r28
    6c2a:	df 91       	pop	r29
    6c2c:	08 95       	ret

00006c2e <DIO_TogglePin>:

void DIO_TogglePin(DIO_PortType Port, DIO_PinType Pin) {
    6c2e:	df 93       	push	r29
    6c30:	cf 93       	push	r28
    6c32:	00 d0       	rcall	.+0      	; 0x6c34 <DIO_TogglePin+0x6>
    6c34:	00 d0       	rcall	.+0      	; 0x6c36 <DIO_TogglePin+0x8>
    6c36:	cd b7       	in	r28, 0x3d	; 61
    6c38:	de b7       	in	r29, 0x3e	; 62
    6c3a:	8b 83       	std	Y+3, r24	; 0x03
    6c3c:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    6c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c40:	61 e0       	ldi	r22, 0x01	; 1
    6c42:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6c46:	9a 83       	std	Y+2, r25	; 0x02
    6c48:	89 83       	std	Y+1, r24	; 0x01
	TOGGLE_BIT(*Reg_Ptr, Pin);
    6c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    6c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    6c4e:	40 81       	ld	r20, Z
    6c50:	8c 81       	ldd	r24, Y+4	; 0x04
    6c52:	28 2f       	mov	r18, r24
    6c54:	30 e0       	ldi	r19, 0x00	; 0
    6c56:	81 e0       	ldi	r24, 0x01	; 1
    6c58:	90 e0       	ldi	r25, 0x00	; 0
    6c5a:	02 2e       	mov	r0, r18
    6c5c:	02 c0       	rjmp	.+4      	; 0x6c62 <DIO_TogglePin+0x34>
    6c5e:	88 0f       	add	r24, r24
    6c60:	99 1f       	adc	r25, r25
    6c62:	0a 94       	dec	r0
    6c64:	e2 f7       	brpl	.-8      	; 0x6c5e <DIO_TogglePin+0x30>
    6c66:	84 27       	eor	r24, r20
    6c68:	e9 81       	ldd	r30, Y+1	; 0x01
    6c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    6c6c:	80 83       	st	Z, r24
}
    6c6e:	0f 90       	pop	r0
    6c70:	0f 90       	pop	r0
    6c72:	0f 90       	pop	r0
    6c74:	0f 90       	pop	r0
    6c76:	cf 91       	pop	r28
    6c78:	df 91       	pop	r29
    6c7a:	08 95       	ret

00006c7c <DIO_ReadPin>:

DIO_StateType DIO_ReadPin(DIO_PortType Port, DIO_PinType Pin) {
    6c7c:	df 93       	push	r29
    6c7e:	cf 93       	push	r28
    6c80:	00 d0       	rcall	.+0      	; 0x6c82 <DIO_ReadPin+0x6>
    6c82:	00 d0       	rcall	.+0      	; 0x6c84 <DIO_ReadPin+0x8>
    6c84:	0f 92       	push	r0
    6c86:	cd b7       	in	r28, 0x3d	; 61
    6c88:	de b7       	in	r29, 0x3e	; 62
    6c8a:	8c 83       	std	Y+4, r24	; 0x04
    6c8c:	6d 83       	std	Y+5, r22	; 0x05
	DIO_StateType eLocal_State = DIO_LOW;
    6c8e:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    6c90:	8c 81       	ldd	r24, Y+4	; 0x04
    6c92:	62 e0       	ldi	r22, 0x02	; 2
    6c94:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6c98:	9a 83       	std	Y+2, r25	; 0x02
    6c9a:	89 83       	std	Y+1, r24	; 0x01
	eLocal_State = READ_BIT(*Reg_Ptr, Pin);
    6c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    6c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    6ca0:	80 81       	ld	r24, Z
    6ca2:	28 2f       	mov	r18, r24
    6ca4:	30 e0       	ldi	r19, 0x00	; 0
    6ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca8:	88 2f       	mov	r24, r24
    6caa:	90 e0       	ldi	r25, 0x00	; 0
    6cac:	a9 01       	movw	r20, r18
    6cae:	02 c0       	rjmp	.+4      	; 0x6cb4 <DIO_ReadPin+0x38>
    6cb0:	55 95       	asr	r21
    6cb2:	47 95       	ror	r20
    6cb4:	8a 95       	dec	r24
    6cb6:	e2 f7       	brpl	.-8      	; 0x6cb0 <DIO_ReadPin+0x34>
    6cb8:	ca 01       	movw	r24, r20
    6cba:	81 70       	andi	r24, 0x01	; 1
    6cbc:	8b 83       	std	Y+3, r24	; 0x03
	return eLocal_State;
    6cbe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6cc0:	0f 90       	pop	r0
    6cc2:	0f 90       	pop	r0
    6cc4:	0f 90       	pop	r0
    6cc6:	0f 90       	pop	r0
    6cc8:	0f 90       	pop	r0
    6cca:	cf 91       	pop	r28
    6ccc:	df 91       	pop	r29
    6cce:	08 95       	ret

00006cd0 <DIO_SetPortDirection>:


void DIO_SetPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    6cd0:	df 93       	push	r29
    6cd2:	cf 93       	push	r28
    6cd4:	00 d0       	rcall	.+0      	; 0x6cd6 <DIO_SetPortDirection+0x6>
    6cd6:	00 d0       	rcall	.+0      	; 0x6cd8 <DIO_SetPortDirection+0x8>
    6cd8:	00 d0       	rcall	.+0      	; 0x6cda <DIO_SetPortDirection+0xa>
    6cda:	cd b7       	in	r28, 0x3d	; 61
    6cdc:	de b7       	in	r29, 0x3e	; 62
    6cde:	8b 83       	std	Y+3, r24	; 0x03
    6ce0:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    6ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ce4:	60 e0       	ldi	r22, 0x00	; 0
    6ce6:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6cea:	9a 83       	std	Y+2, r25	; 0x02
    6cec:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    6cee:	8c 81       	ldd	r24, Y+4	; 0x04
    6cf0:	28 2f       	mov	r18, r24
    6cf2:	30 e0       	ldi	r19, 0x00	; 0
    6cf4:	3e 83       	std	Y+6, r19	; 0x06
    6cf6:	2d 83       	std	Y+5, r18	; 0x05
    6cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    6cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    6cfc:	00 97       	sbiw	r24, 0x00	; 0
    6cfe:	31 f0       	breq	.+12     	; 0x6d0c <DIO_SetPortDirection+0x3c>
    6d00:	2d 81       	ldd	r18, Y+5	; 0x05
    6d02:	3e 81       	ldd	r19, Y+6	; 0x06
    6d04:	21 30       	cpi	r18, 0x01	; 1
    6d06:	31 05       	cpc	r19, r1
    6d08:	29 f0       	breq	.+10     	; 0x6d14 <DIO_SetPortDirection+0x44>
    6d0a:	08 c0       	rjmp	.+16     	; 0x6d1c <DIO_SetPortDirection+0x4c>
		case DIO_INPUT: *Reg_Ptr = 0x00U; break;
    6d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    6d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    6d10:	10 82       	st	Z, r1
    6d12:	04 c0       	rjmp	.+8      	; 0x6d1c <DIO_SetPortDirection+0x4c>
		case DIO_OUTPUT: *Reg_Ptr = 0xFFU; break;
    6d14:	e9 81       	ldd	r30, Y+1	; 0x01
    6d16:	fa 81       	ldd	r31, Y+2	; 0x02
    6d18:	8f ef       	ldi	r24, 0xFF	; 255
    6d1a:	80 83       	st	Z, r24
		default: break;
	}
}
    6d1c:	26 96       	adiw	r28, 0x06	; 6
    6d1e:	0f b6       	in	r0, 0x3f	; 63
    6d20:	f8 94       	cli
    6d22:	de bf       	out	0x3e, r29	; 62
    6d24:	0f be       	out	0x3f, r0	; 63
    6d26:	cd bf       	out	0x3d, r28	; 61
    6d28:	cf 91       	pop	r28
    6d2a:	df 91       	pop	r29
    6d2c:	08 95       	ret

00006d2e <DIO_WritePort>:

void DIO_WritePort(DIO_PortType Port, uint8 Value) {
    6d2e:	df 93       	push	r29
    6d30:	cf 93       	push	r28
    6d32:	00 d0       	rcall	.+0      	; 0x6d34 <DIO_WritePort+0x6>
    6d34:	00 d0       	rcall	.+0      	; 0x6d36 <DIO_WritePort+0x8>
    6d36:	cd b7       	in	r28, 0x3d	; 61
    6d38:	de b7       	in	r29, 0x3e	; 62
    6d3a:	8b 83       	std	Y+3, r24	; 0x03
    6d3c:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    6d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d40:	61 e0       	ldi	r22, 0x01	; 1
    6d42:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6d46:	9a 83       	std	Y+2, r25	; 0x02
    6d48:	89 83       	std	Y+1, r24	; 0x01
	*Reg_Ptr = Value;
    6d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    6d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    6d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d50:	80 83       	st	Z, r24
}
    6d52:	0f 90       	pop	r0
    6d54:	0f 90       	pop	r0
    6d56:	0f 90       	pop	r0
    6d58:	0f 90       	pop	r0
    6d5a:	cf 91       	pop	r28
    6d5c:	df 91       	pop	r29
    6d5e:	08 95       	ret

00006d60 <DIO_ReadPort>:

uint8 DIO_ReadPort(DIO_PortType Port) {
    6d60:	df 93       	push	r29
    6d62:	cf 93       	push	r28
    6d64:	00 d0       	rcall	.+0      	; 0x6d66 <DIO_ReadPort+0x6>
    6d66:	00 d0       	rcall	.+0      	; 0x6d68 <DIO_ReadPort+0x8>
    6d68:	cd b7       	in	r28, 0x3d	; 61
    6d6a:	de b7       	in	r29, 0x3e	; 62
    6d6c:	8c 83       	std	Y+4, r24	; 0x04
	uint8 u8Local_Value = 0x00U;
    6d6e:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    6d70:	8c 81       	ldd	r24, Y+4	; 0x04
    6d72:	62 e0       	ldi	r22, 0x02	; 2
    6d74:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6d78:	9a 83       	std	Y+2, r25	; 0x02
    6d7a:	89 83       	std	Y+1, r24	; 0x01
	u8Local_Value = *Reg_Ptr;
    6d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    6d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    6d80:	80 81       	ld	r24, Z
    6d82:	8b 83       	std	Y+3, r24	; 0x03
	return u8Local_Value;
    6d84:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6d86:	0f 90       	pop	r0
    6d88:	0f 90       	pop	r0
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	cf 91       	pop	r28
    6d90:	df 91       	pop	r29
    6d92:	08 95       	ret

00006d94 <DIO_SetHighHalfPortDirection>:

void DIO_SetHighHalfPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    6d94:	df 93       	push	r29
    6d96:	cf 93       	push	r28
    6d98:	00 d0       	rcall	.+0      	; 0x6d9a <DIO_SetHighHalfPortDirection+0x6>
    6d9a:	00 d0       	rcall	.+0      	; 0x6d9c <DIO_SetHighHalfPortDirection+0x8>
    6d9c:	00 d0       	rcall	.+0      	; 0x6d9e <DIO_SetHighHalfPortDirection+0xa>
    6d9e:	cd b7       	in	r28, 0x3d	; 61
    6da0:	de b7       	in	r29, 0x3e	; 62
    6da2:	8b 83       	std	Y+3, r24	; 0x03
    6da4:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    6da6:	8b 81       	ldd	r24, Y+3	; 0x03
    6da8:	60 e0       	ldi	r22, 0x00	; 0
    6daa:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6dae:	9a 83       	std	Y+2, r25	; 0x02
    6db0:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    6db2:	8c 81       	ldd	r24, Y+4	; 0x04
    6db4:	28 2f       	mov	r18, r24
    6db6:	30 e0       	ldi	r19, 0x00	; 0
    6db8:	3e 83       	std	Y+6, r19	; 0x06
    6dba:	2d 83       	std	Y+5, r18	; 0x05
    6dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    6dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    6dc0:	00 97       	sbiw	r24, 0x00	; 0
    6dc2:	31 f0       	breq	.+12     	; 0x6dd0 <DIO_SetHighHalfPortDirection+0x3c>
    6dc4:	2d 81       	ldd	r18, Y+5	; 0x05
    6dc6:	3e 81       	ldd	r19, Y+6	; 0x06
    6dc8:	21 30       	cpi	r18, 0x01	; 1
    6dca:	31 05       	cpc	r19, r1
    6dcc:	49 f0       	breq	.+18     	; 0x6de0 <DIO_SetHighHalfPortDirection+0x4c>
    6dce:	0f c0       	rjmp	.+30     	; 0x6dee <DIO_SetHighHalfPortDirection+0x5a>
		case DIO_INPUT: *Reg_Ptr &= ~(0xF0U); break;
    6dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    6dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    6dd4:	80 81       	ld	r24, Z
    6dd6:	8f 70       	andi	r24, 0x0F	; 15
    6dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    6dda:	fa 81       	ldd	r31, Y+2	; 0x02
    6ddc:	80 83       	st	Z, r24
    6dde:	07 c0       	rjmp	.+14     	; 0x6dee <DIO_SetHighHalfPortDirection+0x5a>
		case DIO_OUTPUT: *Reg_Ptr |= (0xF0U); break;
    6de0:	e9 81       	ldd	r30, Y+1	; 0x01
    6de2:	fa 81       	ldd	r31, Y+2	; 0x02
    6de4:	80 81       	ld	r24, Z
    6de6:	80 6f       	ori	r24, 0xF0	; 240
    6de8:	e9 81       	ldd	r30, Y+1	; 0x01
    6dea:	fa 81       	ldd	r31, Y+2	; 0x02
    6dec:	80 83       	st	Z, r24
		default: break;
	}
}
    6dee:	26 96       	adiw	r28, 0x06	; 6
    6df0:	0f b6       	in	r0, 0x3f	; 63
    6df2:	f8 94       	cli
    6df4:	de bf       	out	0x3e, r29	; 62
    6df6:	0f be       	out	0x3f, r0	; 63
    6df8:	cd bf       	out	0x3d, r28	; 61
    6dfa:	cf 91       	pop	r28
    6dfc:	df 91       	pop	r29
    6dfe:	08 95       	ret

00006e00 <DIO_SetLowHalfPortDirection>:

void DIO_SetLowHalfPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    6e00:	df 93       	push	r29
    6e02:	cf 93       	push	r28
    6e04:	00 d0       	rcall	.+0      	; 0x6e06 <DIO_SetLowHalfPortDirection+0x6>
    6e06:	00 d0       	rcall	.+0      	; 0x6e08 <DIO_SetLowHalfPortDirection+0x8>
    6e08:	00 d0       	rcall	.+0      	; 0x6e0a <DIO_SetLowHalfPortDirection+0xa>
    6e0a:	cd b7       	in	r28, 0x3d	; 61
    6e0c:	de b7       	in	r29, 0x3e	; 62
    6e0e:	8b 83       	std	Y+3, r24	; 0x03
    6e10:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    6e12:	8b 81       	ldd	r24, Y+3	; 0x03
    6e14:	60 e0       	ldi	r22, 0x00	; 0
    6e16:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6e1a:	9a 83       	std	Y+2, r25	; 0x02
    6e1c:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    6e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    6e20:	28 2f       	mov	r18, r24
    6e22:	30 e0       	ldi	r19, 0x00	; 0
    6e24:	3e 83       	std	Y+6, r19	; 0x06
    6e26:	2d 83       	std	Y+5, r18	; 0x05
    6e28:	8d 81       	ldd	r24, Y+5	; 0x05
    6e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e2c:	00 97       	sbiw	r24, 0x00	; 0
    6e2e:	31 f0       	breq	.+12     	; 0x6e3c <DIO_SetLowHalfPortDirection+0x3c>
    6e30:	2d 81       	ldd	r18, Y+5	; 0x05
    6e32:	3e 81       	ldd	r19, Y+6	; 0x06
    6e34:	21 30       	cpi	r18, 0x01	; 1
    6e36:	31 05       	cpc	r19, r1
    6e38:	49 f0       	breq	.+18     	; 0x6e4c <DIO_SetLowHalfPortDirection+0x4c>
    6e3a:	0f c0       	rjmp	.+30     	; 0x6e5a <DIO_SetLowHalfPortDirection+0x5a>
		case DIO_INPUT: *Reg_Ptr &= ~(0x0FU); break;
    6e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    6e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    6e40:	80 81       	ld	r24, Z
    6e42:	80 7f       	andi	r24, 0xF0	; 240
    6e44:	e9 81       	ldd	r30, Y+1	; 0x01
    6e46:	fa 81       	ldd	r31, Y+2	; 0x02
    6e48:	80 83       	st	Z, r24
    6e4a:	07 c0       	rjmp	.+14     	; 0x6e5a <DIO_SetLowHalfPortDirection+0x5a>
		case DIO_OUTPUT: *Reg_Ptr |= (0x0FU); break;
    6e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    6e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    6e50:	80 81       	ld	r24, Z
    6e52:	8f 60       	ori	r24, 0x0F	; 15
    6e54:	e9 81       	ldd	r30, Y+1	; 0x01
    6e56:	fa 81       	ldd	r31, Y+2	; 0x02
    6e58:	80 83       	st	Z, r24
		default: break;
	}
}
    6e5a:	26 96       	adiw	r28, 0x06	; 6
    6e5c:	0f b6       	in	r0, 0x3f	; 63
    6e5e:	f8 94       	cli
    6e60:	de bf       	out	0x3e, r29	; 62
    6e62:	0f be       	out	0x3f, r0	; 63
    6e64:	cd bf       	out	0x3d, r28	; 61
    6e66:	cf 91       	pop	r28
    6e68:	df 91       	pop	r29
    6e6a:	08 95       	ret

00006e6c <DIO_WriteHighHalfPort>:

void DIO_WriteHighHalfPort(DIO_PortType Port, uint8 HighValue) {
    6e6c:	df 93       	push	r29
    6e6e:	cf 93       	push	r28
    6e70:	00 d0       	rcall	.+0      	; 0x6e72 <DIO_WriteHighHalfPort+0x6>
    6e72:	00 d0       	rcall	.+0      	; 0x6e74 <DIO_WriteHighHalfPort+0x8>
    6e74:	cd b7       	in	r28, 0x3d	; 61
    6e76:	de b7       	in	r29, 0x3e	; 62
    6e78:	8b 83       	std	Y+3, r24	; 0x03
    6e7a:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    6e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e7e:	61 e0       	ldi	r22, 0x01	; 1
    6e80:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6e84:	9a 83       	std	Y+2, r25	; 0x02
    6e86:	89 83       	std	Y+1, r24	; 0x01
	*Reg_Ptr &= (0x0FU);
    6e88:	e9 81       	ldd	r30, Y+1	; 0x01
    6e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    6e8c:	80 81       	ld	r24, Z
    6e8e:	8f 70       	andi	r24, 0x0F	; 15
    6e90:	e9 81       	ldd	r30, Y+1	; 0x01
    6e92:	fa 81       	ldd	r31, Y+2	; 0x02
    6e94:	80 83       	st	Z, r24
	*Reg_Ptr |= (HighValue & 0xF0U);
    6e96:	e9 81       	ldd	r30, Y+1	; 0x01
    6e98:	fa 81       	ldd	r31, Y+2	; 0x02
    6e9a:	90 81       	ld	r25, Z
    6e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6e9e:	80 7f       	andi	r24, 0xF0	; 240
    6ea0:	89 2b       	or	r24, r25
    6ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    6ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    6ea6:	80 83       	st	Z, r24
}
    6ea8:	0f 90       	pop	r0
    6eaa:	0f 90       	pop	r0
    6eac:	0f 90       	pop	r0
    6eae:	0f 90       	pop	r0
    6eb0:	cf 91       	pop	r28
    6eb2:	df 91       	pop	r29
    6eb4:	08 95       	ret

00006eb6 <DIO_WriteLowHalfPort>:

void DIO_WriteLowHalfPort(DIO_PortType Port, uint8 LowValue) {
    6eb6:	df 93       	push	r29
    6eb8:	cf 93       	push	r28
    6eba:	00 d0       	rcall	.+0      	; 0x6ebc <DIO_WriteLowHalfPort+0x6>
    6ebc:	00 d0       	rcall	.+0      	; 0x6ebe <DIO_WriteLowHalfPort+0x8>
    6ebe:	cd b7       	in	r28, 0x3d	; 61
    6ec0:	de b7       	in	r29, 0x3e	; 62
    6ec2:	8b 83       	std	Y+3, r24	; 0x03
    6ec4:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    6ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ec8:	61 e0       	ldi	r22, 0x01	; 1
    6eca:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6ece:	9a 83       	std	Y+2, r25	; 0x02
    6ed0:	89 83       	std	Y+1, r24	; 0x01
	*Reg_Ptr &= (0xF0U);
    6ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    6ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    6ed6:	80 81       	ld	r24, Z
    6ed8:	80 7f       	andi	r24, 0xF0	; 240
    6eda:	e9 81       	ldd	r30, Y+1	; 0x01
    6edc:	fa 81       	ldd	r31, Y+2	; 0x02
    6ede:	80 83       	st	Z, r24
	*Reg_Ptr |= (LowValue & 0x0F);
    6ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    6ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    6ee4:	80 81       	ld	r24, Z
    6ee6:	98 2f       	mov	r25, r24
    6ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    6eea:	8f 70       	andi	r24, 0x0F	; 15
    6eec:	89 2b       	or	r24, r25
    6eee:	e9 81       	ldd	r30, Y+1	; 0x01
    6ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    6ef2:	80 83       	st	Z, r24
}
    6ef4:	0f 90       	pop	r0
    6ef6:	0f 90       	pop	r0
    6ef8:	0f 90       	pop	r0
    6efa:	0f 90       	pop	r0
    6efc:	cf 91       	pop	r28
    6efe:	df 91       	pop	r29
    6f00:	08 95       	ret

00006f02 <DIO_ReadHighHalfPort>:

uint8 DIO_ReadHighHalfPort(DIO_PortType Port) {
    6f02:	df 93       	push	r29
    6f04:	cf 93       	push	r28
    6f06:	00 d0       	rcall	.+0      	; 0x6f08 <DIO_ReadHighHalfPort+0x6>
    6f08:	00 d0       	rcall	.+0      	; 0x6f0a <DIO_ReadHighHalfPort+0x8>
    6f0a:	cd b7       	in	r28, 0x3d	; 61
    6f0c:	de b7       	in	r29, 0x3e	; 62
    6f0e:	8c 83       	std	Y+4, r24	; 0x04
	uint8 u8Local_Value = 0x00U;
    6f10:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    6f12:	8c 81       	ldd	r24, Y+4	; 0x04
    6f14:	62 e0       	ldi	r22, 0x02	; 2
    6f16:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6f1a:	9a 83       	std	Y+2, r25	; 0x02
    6f1c:	89 83       	std	Y+1, r24	; 0x01
	u8Local_Value = (((*Reg_Ptr) & 0xF0U)>>4);
    6f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    6f20:	fa 81       	ldd	r31, Y+2	; 0x02
    6f22:	80 81       	ld	r24, Z
    6f24:	82 95       	swap	r24
    6f26:	8f 70       	andi	r24, 0x0F	; 15
    6f28:	8b 83       	std	Y+3, r24	; 0x03
	return u8Local_Value;
    6f2a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6f2c:	0f 90       	pop	r0
    6f2e:	0f 90       	pop	r0
    6f30:	0f 90       	pop	r0
    6f32:	0f 90       	pop	r0
    6f34:	cf 91       	pop	r28
    6f36:	df 91       	pop	r29
    6f38:	08 95       	ret

00006f3a <DIO_ReadLowHalfPort>:

uint8 DIO_ReadLowHalfPort(DIO_PortType Port) {
    6f3a:	df 93       	push	r29
    6f3c:	cf 93       	push	r28
    6f3e:	00 d0       	rcall	.+0      	; 0x6f40 <DIO_ReadLowHalfPort+0x6>
    6f40:	00 d0       	rcall	.+0      	; 0x6f42 <DIO_ReadLowHalfPort+0x8>
    6f42:	cd b7       	in	r28, 0x3d	; 61
    6f44:	de b7       	in	r29, 0x3e	; 62
    6f46:	8c 83       	std	Y+4, r24	; 0x04
	uint8 u8Local_Value = 0x00U;
    6f48:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    6f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    6f4c:	62 e0       	ldi	r22, 0x02	; 2
    6f4e:	0e 94 b1 34 	call	0x6962	; 0x6962 <DIO_ObtainRegister>
    6f52:	9a 83       	std	Y+2, r25	; 0x02
    6f54:	89 83       	std	Y+1, r24	; 0x01
	u8Local_Value = ((*Reg_Ptr) & 0x0FU);
    6f56:	e9 81       	ldd	r30, Y+1	; 0x01
    6f58:	fa 81       	ldd	r31, Y+2	; 0x02
    6f5a:	80 81       	ld	r24, Z
    6f5c:	8f 70       	andi	r24, 0x0F	; 15
    6f5e:	8b 83       	std	Y+3, r24	; 0x03
	return u8Local_Value;
    6f60:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6f62:	0f 90       	pop	r0
    6f64:	0f 90       	pop	r0
    6f66:	0f 90       	pop	r0
    6f68:	0f 90       	pop	r0
    6f6a:	cf 91       	pop	r28
    6f6c:	df 91       	pop	r29
    6f6e:	08 95       	ret

00006f70 <main>:
#include "SYN/PWM_Drawer.h"

#include <util/delay.h>

int main(void)
{
    6f70:	df 93       	push	r29
    6f72:	cf 93       	push	r28
    6f74:	cd b7       	in	r28, 0x3d	; 61
    6f76:	de b7       	in	r29, 0x3e	; 62
    6f78:	a3 97       	sbiw	r28, 0x23	; 35
    6f7a:	0f b6       	in	r0, 0x3f	; 63
    6f7c:	f8 94       	cli
    6f7e:	de bf       	out	0x3e, r29	; 62
    6f80:	0f be       	out	0x3f, r0	; 63
    6f82:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
    6f84:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <PWMDrawer_Init>
	PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
    6f88:	81 e1       	ldi	r24, 0x11	; 17
    6f8a:	fe 01       	movw	r30, r28
    6f8c:	73 96       	adiw	r30, 0x13	; 19
    6f8e:	df 01       	movw	r26, r30
    6f90:	98 2f       	mov	r25, r24
    6f92:	1d 92       	st	X+, r1
    6f94:	9a 95       	dec	r25
    6f96:	e9 f7       	brne	.-6      	; 0x6f92 <main+0x22>
	float32 Scale_ms = 0.25;
    6f98:	80 e0       	ldi	r24, 0x00	; 0
    6f9a:	90 e0       	ldi	r25, 0x00	; 0
    6f9c:	a0 e8       	ldi	r26, 0x80	; 128
    6f9e:	be e3       	ldi	r27, 0x3E	; 62
    6fa0:	8f 87       	std	Y+15, r24	; 0x0f
    6fa2:	98 8b       	std	Y+16, r25	; 0x10
    6fa4:	a9 8b       	std	Y+17, r26	; 0x11
    6fa6:	ba 8b       	std	Y+18, r27	; 0x12
    while(1)
    {
        //TODO:: Please write your application code 
		PWMDrawer_MeasureSignal(&Signal_Data);
    6fa8:	ce 01       	movw	r24, r28
    6faa:	43 96       	adiw	r24, 0x13	; 19
    6fac:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <PWMDrawer_MeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms) / 5;
    6fb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6fb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6fb4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6fb6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6fb8:	bc 01       	movw	r22, r24
    6fba:	cd 01       	movw	r24, r26
    6fbc:	20 e0       	ldi	r18, 0x00	; 0
    6fbe:	30 e0       	ldi	r19, 0x00	; 0
    6fc0:	40 ea       	ldi	r20, 0xA0	; 160
    6fc2:	50 e4       	ldi	r21, 0x40	; 64
    6fc4:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    6fc8:	dc 01       	movw	r26, r24
    6fca:	cb 01       	movw	r24, r22
    6fcc:	8f 87       	std	Y+15, r24	; 0x0f
    6fce:	98 8b       	std	Y+16, r25	; 0x10
    6fd0:	a9 8b       	std	Y+17, r26	; 0x11
    6fd2:	ba 8b       	std	Y+18, r27	; 0x12
		PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	43 96       	adiw	r24, 0x13	; 19
    6fd8:	2f 85       	ldd	r18, Y+15	; 0x0f
    6fda:	38 89       	ldd	r19, Y+16	; 0x10
    6fdc:	49 89       	ldd	r20, Y+17	; 0x11
    6fde:	5a 89       	ldd	r21, Y+18	; 0x12
    6fe0:	ba 01       	movw	r22, r20
    6fe2:	a9 01       	movw	r20, r18
    6fe4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <PWMDrawer_DrawSignal>
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	a8 ec       	ldi	r26, 0xC8	; 200
    6fee:	b2 e4       	ldi	r27, 0x42	; 66
    6ff0:	8b 87       	std	Y+11, r24	; 0x0b
    6ff2:	9c 87       	std	Y+12, r25	; 0x0c
    6ff4:	ad 87       	std	Y+13, r26	; 0x0d
    6ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    7000:	20 e0       	ldi	r18, 0x00	; 0
    7002:	30 e0       	ldi	r19, 0x00	; 0
    7004:	4a e7       	ldi	r20, 0x7A	; 122
    7006:	55 e4       	ldi	r21, 0x45	; 69
    7008:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    700c:	dc 01       	movw	r26, r24
    700e:	cb 01       	movw	r24, r22
    7010:	8f 83       	std	Y+7, r24	; 0x07
    7012:	98 87       	std	Y+8, r25	; 0x08
    7014:	a9 87       	std	Y+9, r26	; 0x09
    7016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7018:	6f 81       	ldd	r22, Y+7	; 0x07
    701a:	78 85       	ldd	r23, Y+8	; 0x08
    701c:	89 85       	ldd	r24, Y+9	; 0x09
    701e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7020:	20 e0       	ldi	r18, 0x00	; 0
    7022:	30 e0       	ldi	r19, 0x00	; 0
    7024:	40 e8       	ldi	r20, 0x80	; 128
    7026:	5f e3       	ldi	r21, 0x3F	; 63
    7028:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    702c:	88 23       	and	r24, r24
    702e:	2c f4       	brge	.+10     	; 0x703a <main+0xca>
		__ticks = 1;
    7030:	81 e0       	ldi	r24, 0x01	; 1
    7032:	90 e0       	ldi	r25, 0x00	; 0
    7034:	9e 83       	std	Y+6, r25	; 0x06
    7036:	8d 83       	std	Y+5, r24	; 0x05
    7038:	3f c0       	rjmp	.+126    	; 0x70b8 <main+0x148>
	else if (__tmp > 65535)
    703a:	6f 81       	ldd	r22, Y+7	; 0x07
    703c:	78 85       	ldd	r23, Y+8	; 0x08
    703e:	89 85       	ldd	r24, Y+9	; 0x09
    7040:	9a 85       	ldd	r25, Y+10	; 0x0a
    7042:	20 e0       	ldi	r18, 0x00	; 0
    7044:	3f ef       	ldi	r19, 0xFF	; 255
    7046:	4f e7       	ldi	r20, 0x7F	; 127
    7048:	57 e4       	ldi	r21, 0x47	; 71
    704a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    704e:	18 16       	cp	r1, r24
    7050:	4c f5       	brge	.+82     	; 0x70a4 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7052:	6b 85       	ldd	r22, Y+11	; 0x0b
    7054:	7c 85       	ldd	r23, Y+12	; 0x0c
    7056:	8d 85       	ldd	r24, Y+13	; 0x0d
    7058:	9e 85       	ldd	r25, Y+14	; 0x0e
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	30 e0       	ldi	r19, 0x00	; 0
    705e:	40 e2       	ldi	r20, 0x20	; 32
    7060:	51 e4       	ldi	r21, 0x41	; 65
    7062:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    7066:	dc 01       	movw	r26, r24
    7068:	cb 01       	movw	r24, r22
    706a:	bc 01       	movw	r22, r24
    706c:	cd 01       	movw	r24, r26
    706e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7072:	dc 01       	movw	r26, r24
    7074:	cb 01       	movw	r24, r22
    7076:	9e 83       	std	Y+6, r25	; 0x06
    7078:	8d 83       	std	Y+5, r24	; 0x05
    707a:	0f c0       	rjmp	.+30     	; 0x709a <main+0x12a>
    707c:	80 e9       	ldi	r24, 0x90	; 144
    707e:	91 e0       	ldi	r25, 0x01	; 1
    7080:	9c 83       	std	Y+4, r25	; 0x04
    7082:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7084:	8b 81       	ldd	r24, Y+3	; 0x03
    7086:	9c 81       	ldd	r25, Y+4	; 0x04
    7088:	01 97       	sbiw	r24, 0x01	; 1
    708a:	f1 f7       	brne	.-4      	; 0x7088 <main+0x118>
    708c:	9c 83       	std	Y+4, r25	; 0x04
    708e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7090:	8d 81       	ldd	r24, Y+5	; 0x05
    7092:	9e 81       	ldd	r25, Y+6	; 0x06
    7094:	01 97       	sbiw	r24, 0x01	; 1
    7096:	9e 83       	std	Y+6, r25	; 0x06
    7098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    709a:	8d 81       	ldd	r24, Y+5	; 0x05
    709c:	9e 81       	ldd	r25, Y+6	; 0x06
    709e:	00 97       	sbiw	r24, 0x00	; 0
    70a0:	69 f7       	brne	.-38     	; 0x707c <main+0x10c>
    70a2:	82 cf       	rjmp	.-252    	; 0x6fa8 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70a4:	6f 81       	ldd	r22, Y+7	; 0x07
    70a6:	78 85       	ldd	r23, Y+8	; 0x08
    70a8:	89 85       	ldd	r24, Y+9	; 0x09
    70aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    70ac:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    70b0:	dc 01       	movw	r26, r24
    70b2:	cb 01       	movw	r24, r22
    70b4:	9e 83       	std	Y+6, r25	; 0x06
    70b6:	8d 83       	std	Y+5, r24	; 0x05
    70b8:	8d 81       	ldd	r24, Y+5	; 0x05
    70ba:	9e 81       	ldd	r25, Y+6	; 0x06
    70bc:	9a 83       	std	Y+2, r25	; 0x02
    70be:	89 83       	std	Y+1, r24	; 0x01
    70c0:	89 81       	ldd	r24, Y+1	; 0x01
    70c2:	9a 81       	ldd	r25, Y+2	; 0x02
    70c4:	01 97       	sbiw	r24, 0x01	; 1
    70c6:	f1 f7       	brne	.-4      	; 0x70c4 <main+0x154>
    70c8:	9a 83       	std	Y+2, r25	; 0x02
    70ca:	89 83       	std	Y+1, r24	; 0x01
    70cc:	6d cf       	rjmp	.-294    	; 0x6fa8 <main+0x38>

000070ce <__mulsi3>:
    70ce:	62 9f       	mul	r22, r18
    70d0:	d0 01       	movw	r26, r0
    70d2:	73 9f       	mul	r23, r19
    70d4:	f0 01       	movw	r30, r0
    70d6:	82 9f       	mul	r24, r18
    70d8:	e0 0d       	add	r30, r0
    70da:	f1 1d       	adc	r31, r1
    70dc:	64 9f       	mul	r22, r20
    70de:	e0 0d       	add	r30, r0
    70e0:	f1 1d       	adc	r31, r1
    70e2:	92 9f       	mul	r25, r18
    70e4:	f0 0d       	add	r31, r0
    70e6:	83 9f       	mul	r24, r19
    70e8:	f0 0d       	add	r31, r0
    70ea:	74 9f       	mul	r23, r20
    70ec:	f0 0d       	add	r31, r0
    70ee:	65 9f       	mul	r22, r21
    70f0:	f0 0d       	add	r31, r0
    70f2:	99 27       	eor	r25, r25
    70f4:	72 9f       	mul	r23, r18
    70f6:	b0 0d       	add	r27, r0
    70f8:	e1 1d       	adc	r30, r1
    70fa:	f9 1f       	adc	r31, r25
    70fc:	63 9f       	mul	r22, r19
    70fe:	b0 0d       	add	r27, r0
    7100:	e1 1d       	adc	r30, r1
    7102:	f9 1f       	adc	r31, r25
    7104:	bd 01       	movw	r22, r26
    7106:	cf 01       	movw	r24, r30
    7108:	11 24       	eor	r1, r1
    710a:	08 95       	ret

0000710c <__divmodhi4>:
    710c:	97 fb       	bst	r25, 7
    710e:	09 2e       	mov	r0, r25
    7110:	07 26       	eor	r0, r23
    7112:	0a d0       	rcall	.+20     	; 0x7128 <__divmodhi4_neg1>
    7114:	77 fd       	sbrc	r23, 7
    7116:	04 d0       	rcall	.+8      	; 0x7120 <__divmodhi4_neg2>
    7118:	27 d0       	rcall	.+78     	; 0x7168 <__udivmodhi4>
    711a:	06 d0       	rcall	.+12     	; 0x7128 <__divmodhi4_neg1>
    711c:	00 20       	and	r0, r0
    711e:	1a f4       	brpl	.+6      	; 0x7126 <__divmodhi4_exit>

00007120 <__divmodhi4_neg2>:
    7120:	70 95       	com	r23
    7122:	61 95       	neg	r22
    7124:	7f 4f       	sbci	r23, 0xFF	; 255

00007126 <__divmodhi4_exit>:
    7126:	08 95       	ret

00007128 <__divmodhi4_neg1>:
    7128:	f6 f7       	brtc	.-4      	; 0x7126 <__divmodhi4_exit>
    712a:	90 95       	com	r25
    712c:	81 95       	neg	r24
    712e:	9f 4f       	sbci	r25, 0xFF	; 255
    7130:	08 95       	ret

00007132 <__divmodsi4>:
    7132:	97 fb       	bst	r25, 7
    7134:	09 2e       	mov	r0, r25
    7136:	05 26       	eor	r0, r21
    7138:	0e d0       	rcall	.+28     	; 0x7156 <__divmodsi4_neg1>
    713a:	57 fd       	sbrc	r21, 7
    713c:	04 d0       	rcall	.+8      	; 0x7146 <__divmodsi4_neg2>
    713e:	28 d0       	rcall	.+80     	; 0x7190 <__udivmodsi4>
    7140:	0a d0       	rcall	.+20     	; 0x7156 <__divmodsi4_neg1>
    7142:	00 1c       	adc	r0, r0
    7144:	38 f4       	brcc	.+14     	; 0x7154 <__divmodsi4_exit>

00007146 <__divmodsi4_neg2>:
    7146:	50 95       	com	r21
    7148:	40 95       	com	r20
    714a:	30 95       	com	r19
    714c:	21 95       	neg	r18
    714e:	3f 4f       	sbci	r19, 0xFF	; 255
    7150:	4f 4f       	sbci	r20, 0xFF	; 255
    7152:	5f 4f       	sbci	r21, 0xFF	; 255

00007154 <__divmodsi4_exit>:
    7154:	08 95       	ret

00007156 <__divmodsi4_neg1>:
    7156:	f6 f7       	brtc	.-4      	; 0x7154 <__divmodsi4_exit>
    7158:	90 95       	com	r25
    715a:	80 95       	com	r24
    715c:	70 95       	com	r23
    715e:	61 95       	neg	r22
    7160:	7f 4f       	sbci	r23, 0xFF	; 255
    7162:	8f 4f       	sbci	r24, 0xFF	; 255
    7164:	9f 4f       	sbci	r25, 0xFF	; 255
    7166:	08 95       	ret

00007168 <__udivmodhi4>:
    7168:	aa 1b       	sub	r26, r26
    716a:	bb 1b       	sub	r27, r27
    716c:	51 e1       	ldi	r21, 0x11	; 17
    716e:	07 c0       	rjmp	.+14     	; 0x717e <__udivmodhi4_ep>

00007170 <__udivmodhi4_loop>:
    7170:	aa 1f       	adc	r26, r26
    7172:	bb 1f       	adc	r27, r27
    7174:	a6 17       	cp	r26, r22
    7176:	b7 07       	cpc	r27, r23
    7178:	10 f0       	brcs	.+4      	; 0x717e <__udivmodhi4_ep>
    717a:	a6 1b       	sub	r26, r22
    717c:	b7 0b       	sbc	r27, r23

0000717e <__udivmodhi4_ep>:
    717e:	88 1f       	adc	r24, r24
    7180:	99 1f       	adc	r25, r25
    7182:	5a 95       	dec	r21
    7184:	a9 f7       	brne	.-22     	; 0x7170 <__udivmodhi4_loop>
    7186:	80 95       	com	r24
    7188:	90 95       	com	r25
    718a:	bc 01       	movw	r22, r24
    718c:	cd 01       	movw	r24, r26
    718e:	08 95       	ret

00007190 <__udivmodsi4>:
    7190:	a1 e2       	ldi	r26, 0x21	; 33
    7192:	1a 2e       	mov	r1, r26
    7194:	aa 1b       	sub	r26, r26
    7196:	bb 1b       	sub	r27, r27
    7198:	fd 01       	movw	r30, r26
    719a:	0d c0       	rjmp	.+26     	; 0x71b6 <__udivmodsi4_ep>

0000719c <__udivmodsi4_loop>:
    719c:	aa 1f       	adc	r26, r26
    719e:	bb 1f       	adc	r27, r27
    71a0:	ee 1f       	adc	r30, r30
    71a2:	ff 1f       	adc	r31, r31
    71a4:	a2 17       	cp	r26, r18
    71a6:	b3 07       	cpc	r27, r19
    71a8:	e4 07       	cpc	r30, r20
    71aa:	f5 07       	cpc	r31, r21
    71ac:	20 f0       	brcs	.+8      	; 0x71b6 <__udivmodsi4_ep>
    71ae:	a2 1b       	sub	r26, r18
    71b0:	b3 0b       	sbc	r27, r19
    71b2:	e4 0b       	sbc	r30, r20
    71b4:	f5 0b       	sbc	r31, r21

000071b6 <__udivmodsi4_ep>:
    71b6:	66 1f       	adc	r22, r22
    71b8:	77 1f       	adc	r23, r23
    71ba:	88 1f       	adc	r24, r24
    71bc:	99 1f       	adc	r25, r25
    71be:	1a 94       	dec	r1
    71c0:	69 f7       	brne	.-38     	; 0x719c <__udivmodsi4_loop>
    71c2:	60 95       	com	r22
    71c4:	70 95       	com	r23
    71c6:	80 95       	com	r24
    71c8:	90 95       	com	r25
    71ca:	9b 01       	movw	r18, r22
    71cc:	ac 01       	movw	r20, r24
    71ce:	bd 01       	movw	r22, r26
    71d0:	cf 01       	movw	r24, r30
    71d2:	08 95       	ret

000071d4 <__prologue_saves__>:
    71d4:	2f 92       	push	r2
    71d6:	3f 92       	push	r3
    71d8:	4f 92       	push	r4
    71da:	5f 92       	push	r5
    71dc:	6f 92       	push	r6
    71de:	7f 92       	push	r7
    71e0:	8f 92       	push	r8
    71e2:	9f 92       	push	r9
    71e4:	af 92       	push	r10
    71e6:	bf 92       	push	r11
    71e8:	cf 92       	push	r12
    71ea:	df 92       	push	r13
    71ec:	ef 92       	push	r14
    71ee:	ff 92       	push	r15
    71f0:	0f 93       	push	r16
    71f2:	1f 93       	push	r17
    71f4:	cf 93       	push	r28
    71f6:	df 93       	push	r29
    71f8:	cd b7       	in	r28, 0x3d	; 61
    71fa:	de b7       	in	r29, 0x3e	; 62
    71fc:	ca 1b       	sub	r28, r26
    71fe:	db 0b       	sbc	r29, r27
    7200:	0f b6       	in	r0, 0x3f	; 63
    7202:	f8 94       	cli
    7204:	de bf       	out	0x3e, r29	; 62
    7206:	0f be       	out	0x3f, r0	; 63
    7208:	cd bf       	out	0x3d, r28	; 61
    720a:	09 94       	ijmp

0000720c <__epilogue_restores__>:
    720c:	2a 88       	ldd	r2, Y+18	; 0x12
    720e:	39 88       	ldd	r3, Y+17	; 0x11
    7210:	48 88       	ldd	r4, Y+16	; 0x10
    7212:	5f 84       	ldd	r5, Y+15	; 0x0f
    7214:	6e 84       	ldd	r6, Y+14	; 0x0e
    7216:	7d 84       	ldd	r7, Y+13	; 0x0d
    7218:	8c 84       	ldd	r8, Y+12	; 0x0c
    721a:	9b 84       	ldd	r9, Y+11	; 0x0b
    721c:	aa 84       	ldd	r10, Y+10	; 0x0a
    721e:	b9 84       	ldd	r11, Y+9	; 0x09
    7220:	c8 84       	ldd	r12, Y+8	; 0x08
    7222:	df 80       	ldd	r13, Y+7	; 0x07
    7224:	ee 80       	ldd	r14, Y+6	; 0x06
    7226:	fd 80       	ldd	r15, Y+5	; 0x05
    7228:	0c 81       	ldd	r16, Y+4	; 0x04
    722a:	1b 81       	ldd	r17, Y+3	; 0x03
    722c:	aa 81       	ldd	r26, Y+2	; 0x02
    722e:	b9 81       	ldd	r27, Y+1	; 0x01
    7230:	ce 0f       	add	r28, r30
    7232:	d1 1d       	adc	r29, r1
    7234:	0f b6       	in	r0, 0x3f	; 63
    7236:	f8 94       	cli
    7238:	de bf       	out	0x3e, r29	; 62
    723a:	0f be       	out	0x3f, r0	; 63
    723c:	cd bf       	out	0x3d, r28	; 61
    723e:	ed 01       	movw	r28, r26
    7240:	08 95       	ret

00007242 <_exit>:
    7242:	f8 94       	cli

00007244 <__stop_program>:
    7244:	ff cf       	rjmp	.-2      	; 0x7244 <__stop_program>
